
S10077_Image_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005fdc  08005fdc  00006fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b4  080060b4  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060bc  080060bc  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060bc  080060bc  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080060c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037dc  2000005c  08006120  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003838  08006120  00008838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010292  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002516  00000000  00000000  0001831e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b68  00000000  00000000  0001b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023945  00000000  00000000  0001c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012685  00000000  00000000  0003fb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddefe  00000000  00000000  000521fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001300f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004224  00000000  00000000  0013013c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00134360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fc4 	.word	0x08005fc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005fc4 	.word	0x08005fc4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f001 f961 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f847 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fc4b 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b2:	f000 fc19 	bl	8000de8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005b6:	f000 f8b3 	bl	8000720 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005ba:	f000 f9a7 	bl	800090c <MX_TIM1_Init>
  MX_TIM3_Init();
 80005be:	f000 facf 	bl	8000b60 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fbe7 	bl	8000d94 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 80005c6:	f000 f94f 	bl	8000868 <MX_ADC3_Init>
  MX_TIM2_Init();
 80005ca:	f000 fa3f 	bl	8000a4c <MX_TIM2_Init>
  MX_ADC2_Init();
 80005ce:	f000 f8f9 	bl	80007c4 <MX_ADC2_Init>
  MX_TIM8_Init();
 80005d2:	f000 fb51 	bl	8000c78 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the S10077 driver system with all necessary handles and configurations.
  // (JP) S10077ドライバシステムを�?�必要なすべてのハンドルと設定で初期化します�?????
  S10077_System_Init(sensor_configs, SENSORS_IN_USE, &htim1, &huart2);
 80005d6:	4b15      	ldr	r3, [pc, #84]	@ (800062c <main+0x8c>)
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <main+0x90>)
 80005da:	2102      	movs	r1, #2
 80005dc:	4815      	ldr	r0, [pc, #84]	@ (8000634 <main+0x94>)
 80005de:	f000 fcbd 	bl	8000f5c <S10077_System_Init>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Multi-Sensor System Ready.\n", 27, HAL_MAX_DELAY);
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	221b      	movs	r2, #27
 80005e8:	4913      	ldr	r1, [pc, #76]	@ (8000638 <main+0x98>)
 80005ea:	4810      	ldr	r0, [pc, #64]	@ (800062c <main+0x8c>)
 80005ec:	f004 fc7a 	bl	8004ee4 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	for (int i = 0; i < SENSORS_IN_USE; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e015      	b.n	8000622 <main+0x82>
	{
		S10077_StartAcquisition(i);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fcda 	bl	8000fb4 <S10077_StartAcquisition>
		while (!S10077_IsDataReady()){}
 8000600:	bf00      	nop
 8000602:	f000 fd45 	bl	8001090 <S10077_IsDataReady>
 8000606:	4603      	mov	r3, r0
 8000608:	f083 0301 	eor.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f7      	bne.n	8000602 <main+0x62>
		S10077_PrintDataViaUART();
 8000612:	f000 fd49 	bl	80010a8 <S10077_PrintDataViaUART>
		HAL_Delay(50);
 8000616:	2032      	movs	r0, #50	@ 0x32
 8000618:	f001 f99a 	bl	8001950 <HAL_Delay>
	for (int i = 0; i < SENSORS_IN_USE; i++)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b01      	cmp	r3, #1
 8000626:	dde6      	ble.n	80005f6 <main+0x56>
 8000628:	e7e2      	b.n	80005f0 <main+0x50>
 800062a:	bf00      	nop
 800062c:	20000390 	.word	0x20000390
 8000630:	20000270 	.word	0x20000270
 8000634:	08006030 	.word	0x08006030
 8000638:	08005fdc 	.word	0x08005fdc

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	@ 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 f83a 	bl	80056c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b2c      	ldr	r3, [pc, #176]	@ (8000718 <SystemClock_Config+0xdc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <SystemClock_Config+0xdc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xdc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b26      	ldr	r3, [pc, #152]	@ (800071c <SystemClock_Config+0xe0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a25      	ldr	r2, [pc, #148]	@ (800071c <SystemClock_Config+0xe0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <SystemClock_Config+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006b0:	23b4      	movs	r3, #180	@ 0xb4
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 ff4d 	bl	8003564 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d0:	f000 fc3e 	bl	8000f50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d4:	f002 fbac 	bl	8002e30 <HAL_PWREx_EnableOverDrive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006de:	f000 fc37 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2105      	movs	r1, #5
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fbe5 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800070c:	f000 fc20 	bl	8000f50 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	@ 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000734:	4a22      	ldr	r2, [pc, #136]	@ (80007c0 <MX_ADC1_Init+0xa0>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000738:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800073a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800075c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000764:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000780:	2201      	movs	r2, #1
 8000782:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000784:	480d      	ldr	r0, [pc, #52]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000786:	f001 f907 	bl	8001998 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000790:	f000 fbde 	bl	8000f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000794:	2301      	movs	r3, #1
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800079c:	2302      	movs	r3, #2
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_ADC1_Init+0x9c>)
 80007a6:	f001 fa63 	bl	8001c70 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007b0:	f000 fbce 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000078 	.word	0x20000078
 80007c0:	40012000 	.word	0x40012000

080007c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007d6:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <MX_ADC2_Init+0x9c>)
 80007d8:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <MX_ADC2_Init+0xa0>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007dc:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <MX_ADC2_Init+0x9c>)
 80007de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <MX_ADC2_Init+0x9c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_ADC2_Init+0x9c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_ADC2_Init+0x9c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_ADC2_Init+0x9c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_ADC2_Init+0x9c>)
 8000800:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_ADC2_Init+0x9c>)
 8000808:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_ADC2_Init+0x9c>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_ADC2_Init+0x9c>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_ADC2_Init+0x9c>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_ADC2_Init+0x9c>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_ADC2_Init+0x9c>)
 800082a:	f001 f8b5 	bl	8001998 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000834:	f000 fb8c 	bl	8000f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000840:	2301      	movs	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_ADC2_Init+0x9c>)
 800084a:	f001 fa11 	bl	8001c70 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000854:	f000 fb7c 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000c0 	.word	0x200000c0
 8000864:	40012100 	.word	0x40012100

08000868 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800087a:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <MX_ADC3_Init+0x9c>)
 800087c:	4a22      	ldr	r2, [pc, #136]	@ (8000908 <MX_ADC3_Init+0xa0>)
 800087e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <MX_ADC3_Init+0x9c>)
 8000882:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000886:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000888:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <MX_ADC3_Init+0x9c>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800088e:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <MX_ADC3_Init+0x9c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_ADC3_Init+0x9c>)
 8000896:	2200      	movs	r2, #0
 8000898:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <MX_ADC3_Init+0x9c>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008a4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80008a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008ac:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008cc:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008ce:	f001 f863 	bl	8001998 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 80008d8:	f000 fb3a 	bl	8000f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008e4:	2302      	movs	r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_ADC3_Init+0x9c>)
 80008ee:	f001 f9bf 	bl	8001c70 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80008f8:	f000 fb2a 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000108 	.word	0x20000108
 8000908:	40012200 	.word	0x40012200

0800090c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	@ 0x58
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2220      	movs	r2, #32
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f004 febd 	bl	80056c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a44 <MX_TIM1_Init+0x138>)
 800094c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 800094e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000950:	4b3c      	ldr	r3, [pc, #240]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b3b      	ldr	r3, [pc, #236]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 360-1;
 800095c:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <MX_TIM1_Init+0x138>)
 800095e:	f240 1267 	movw	r2, #359	@ 0x167
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b37      	ldr	r3, [pc, #220]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b36      	ldr	r3, [pc, #216]	@ (8000a44 <MX_TIM1_Init+0x138>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b34      	ldr	r3, [pc, #208]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4833      	ldr	r0, [pc, #204]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000978:	f003 f892 	bl	8003aa0 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000982:	f000 fae5 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000990:	4619      	mov	r1, r3
 8000992:	482c      	ldr	r0, [pc, #176]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000994:	f003 fbac 	bl	80040f0 <HAL_TIM_ConfigClockSource>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800099e:	f000 fad7 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a2:	4828      	ldr	r0, [pc, #160]	@ (8000a44 <MX_TIM1_Init+0x138>)
 80009a4:	f003 f8cb 	bl	8003b3e <HAL_TIM_PWM_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009ae:	f000 facf 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009be:	4619      	mov	r1, r3
 80009c0:	4820      	ldr	r0, [pc, #128]	@ (8000a44 <MX_TIM1_Init+0x138>)
 80009c2:	f004 f971 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009cc:	f000 fac0 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d0:	2360      	movs	r3, #96	@ 0x60
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 180;
 80009d4:	23b4      	movs	r3, #180	@ 0xb4
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4813      	ldr	r0, [pc, #76]	@ (8000a44 <MX_TIM1_Init+0x138>)
 80009f6:	f003 fab9 	bl	8003f6c <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a00:	f000 faa6 	bl	8000f50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000a28:	f004 f9ba 	bl	8004da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a32:	f000 fa8d 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a36:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <MX_TIM1_Init+0x138>)
 8000a38:	f000 fdd6 	bl	80015e8 <HAL_TIM_MspPostInit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3758      	adds	r7, #88	@ 0x58
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000270 	.word	0x20000270
 8000a48:	40010000 	.word	0x40010000

08000a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	@ 0x40
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a86:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a8e:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a9a:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aae:	482b      	ldr	r0, [pc, #172]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000ab0:	f002 fff6 	bl	8003aa0 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aba:	f000 fa49 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4824      	ldr	r0, [pc, #144]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000acc:	f003 fb10 	bl	80040f0 <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ad6:	f000 fa3b 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ada:	4820      	ldr	r0, [pc, #128]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000adc:	f003 f950 	bl	8003d80 <HAL_TIM_IC_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000ae6:	f000 fa33 	bl	8000f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000aea:	2304      	movs	r3, #4
 8000aec:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000aee:	2350      	movs	r3, #80	@ 0x50
 8000af0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000af2:	2302      	movs	r3, #2
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4816      	ldr	r0, [pc, #88]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000b02:	f003 fbbc 	bl	800427e <HAL_TIM_SlaveConfigSynchro>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000b0c:	f000 fa20 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b10:	2320      	movs	r3, #32
 8000b12:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480f      	ldr	r0, [pc, #60]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000b20:	f004 f8c2 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000b2a:	f000 fa11 	bl	8000f50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b32:	2301      	movs	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_TIM2_Init+0x110>)
 8000b46:	f003 f974 	bl	8003e32 <HAL_TIM_IC_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000b50:	f000 f9fe 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3740      	adds	r7, #64	@ 0x40
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200002b8 	.word	0x200002b8

08000b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b090      	sub	sp, #64	@ 0x40
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b9a:	4b35      	ldr	r3, [pc, #212]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000b9c:	4a35      	ldr	r2, [pc, #212]	@ (8000c74 <MX_TIM3_Init+0x114>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bac:	4b30      	ldr	r3, [pc, #192]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bba:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc0:	482b      	ldr	r0, [pc, #172]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000bc2:	f002 ff6d 	bl	8003aa0 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 f9c0 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4824      	ldr	r0, [pc, #144]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000bde:	f003 fa87 	bl	80040f0 <HAL_TIM_ConfigClockSource>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f000 f9b2 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bec:	4820      	ldr	r0, [pc, #128]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000bee:	f003 f8c7 	bl	8003d80 <HAL_TIM_IC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000bf8:	f000 f9aa 	bl	8000f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c00:	2350      	movs	r3, #80	@ 0x50
 8000c02:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c04:	2302      	movs	r3, #2
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4817      	ldr	r0, [pc, #92]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000c14:	f003 fb33 	bl	800427e <HAL_TIM_SlaveConfigSynchro>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000c1e:	f000 f997 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c22:	2320      	movs	r3, #32
 8000c24:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480f      	ldr	r0, [pc, #60]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000c32:	f004 f839 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000c3c:	f000 f988 	bl	8000f50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c40:	2302      	movs	r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c44:	2301      	movs	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <MX_TIM3_Init+0x110>)
 8000c58:	f003 f8eb 	bl	8003e32 <HAL_TIM_IC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000c62:	f000 f975 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	3740      	adds	r7, #64	@ 0x40
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000300 	.word	0x20000300
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b090      	sub	sp, #64	@ 0x40
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cb2:	4b36      	ldr	r3, [pc, #216]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cb4:	4a36      	ldr	r2, [pc, #216]	@ (8000d90 <MX_TIM8_Init+0x118>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cb8:	4b34      	ldr	r3, [pc, #208]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b33      	ldr	r3, [pc, #204]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000cc4:	4b31      	ldr	r3, [pc, #196]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000cde:	482b      	ldr	r0, [pc, #172]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000ce0:	f002 fede 	bl	8003aa0 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000cea:	f000 f931 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cf4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4824      	ldr	r0, [pc, #144]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000cfc:	f003 f9f8 	bl	80040f0 <HAL_TIM_ConfigClockSource>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000d06:	f000 f923 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000d0a:	4820      	ldr	r0, [pc, #128]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000d0c:	f003 f838 	bl	8003d80 <HAL_TIM_IC_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000d16:	f000 f91b 	bl	8000f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d1e:	2350      	movs	r3, #80	@ 0x50
 8000d20:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d22:	2302      	movs	r3, #2
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000d32:	f003 faa4 	bl	800427e <HAL_TIM_SlaveConfigSynchro>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000d3c:	f000 f908 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d40:	2320      	movs	r3, #32
 8000d42:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480f      	ldr	r0, [pc, #60]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000d50:	f003 ffaa 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000d5a:	f000 f8f9 	bl	8000f50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d62:	2301      	movs	r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_TIM8_Init+0x114>)
 8000d76:	f003 f85c 	bl	8003e32 <HAL_TIM_IC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000d80:	f000 f8e6 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3740      	adds	r7, #64	@ 0x40
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000348 	.word	0x20000348
 8000d90:	40010400 	.word	0x40010400

08000d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <MX_USART2_UART_Init+0x50>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	f004 f83a 	bl	8004e44 <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dd6:	f000 f8bb 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000390 	.word	0x20000390
 8000de4:	40004400 	.word	0x40004400

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_DMA_Init+0x5c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a13      	ldr	r2, [pc, #76]	@ (8000e44 <MX_DMA_Init+0x5c>)
 8000df8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_DMA_Init+0x5c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2038      	movs	r0, #56	@ 0x38
 8000e10:	f001 fab9 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e14:	2038      	movs	r0, #56	@ 0x38
 8000e16:	f001 fad2 	bl	80023be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2039      	movs	r0, #57	@ 0x39
 8000e20:	f001 fab1 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e24:	2039      	movs	r0, #57	@ 0x39
 8000e26:	f001 faca 	bl	80023be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	203a      	movs	r0, #58	@ 0x3a
 8000e30:	f001 faa9 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e34:	203a      	movs	r0, #58	@ 0x3a
 8000e36:	f001 fac2 	bl	80023be <HAL_NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a37      	ldr	r2, [pc, #220]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b31      	ldr	r3, [pc, #196]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a30      	ldr	r2, [pc, #192]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a29      	ldr	r2, [pc, #164]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a22      	ldr	r2, [pc, #136]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_GPIO_Init+0xfc>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST2_GPIO_Port, ST2_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	481d      	ldr	r0, [pc, #116]	@ (8000f48 <MX_GPIO_Init+0x100>)
 8000ed4:	f001 ff92 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST1_Pin|ST0_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f240 4101 	movw	r1, #1025	@ 0x401
 8000ede:	481b      	ldr	r0, [pc, #108]	@ (8000f4c <MX_GPIO_Init+0x104>)
 8000ee0:	f001 ff8c 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST2_Pin */
  GPIO_InitStruct.Pin = ST2_Pin;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST2_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4813      	ldr	r0, [pc, #76]	@ (8000f48 <MX_GPIO_Init+0x100>)
 8000efc:	f001 fdea 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST1_Pin */
  GPIO_InitStruct.Pin = ST1_Pin;
 8000f00:	2301      	movs	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST1_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_GPIO_Init+0x104>)
 8000f18:	f001 fddc 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST0_Pin */
  GPIO_InitStruct.Pin = ST0_Pin;
 8000f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST0_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_GPIO_Init+0x104>)
 8000f36:	f001 fdcd 	bl	8002ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	@ 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020400 	.word	0x40020400

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <S10077_System_Init>:
//================================================================================
// Public Function Implementations
//================================================================================

void S10077_System_Init(const S10077_SensorConfig* configs, uint8_t num_sensors, TIM_HandleTypeDef* htim_clk, UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	72fb      	strb	r3, [r7, #11]
    sensor_configs = configs;
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <S10077_System_Init+0x48>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6013      	str	r3, [r2, #0]
    configured_sensor_count = num_sensors;
 8000f72:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <S10077_System_Init+0x4c>)
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	7013      	strb	r3, [r2, #0]
    clk_tim_handle = htim_clk;
 8000f78:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <S10077_System_Init+0x50>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
    uart_handle = huart;
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <S10077_System_Init+0x54>)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6013      	str	r3, [r2, #0]

    if (HAL_TIM_PWM_Start(clk_tim_handle, TIM_CHANNEL_1) != HAL_OK)
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <S10077_System_Init+0x50>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fe30 	bl	8003bf0 <HAL_TIM_PWM_Start>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <S10077_System_Init+0x3e>
    {
        Error_Handler();
 8000f96:	f7ff ffdb 	bl	8000f50 <Error_Handler>
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200003e0 	.word	0x200003e0
 8000fa8:	200003e4 	.word	0x200003e4
 8000fac:	200003d8 	.word	0x200003d8
 8000fb0:	200003dc 	.word	0x200003dc

08000fb4 <S10077_StartAcquisition>:

void S10077_StartAcquisition(uint8_t sensor_id)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
    if (sensor_id >= configured_sensor_count) {
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001068 <S10077_StartAcquisition+0xb4>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d24b      	bcs.n	8001060 <S10077_StartAcquisition+0xac>
        return; // Invalid sensor ID
    }

    current_sensor_id = sensor_id;
 8000fc8:	4a28      	ldr	r2, [pc, #160]	@ (800106c <S10077_StartAcquisition+0xb8>)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	7013      	strb	r3, [r2, #0]
    const S10077_SensorConfig* config = &sensor_configs[sensor_id];
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <S10077_StartAcquisition+0xbc>)
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(uart_handle, (uint8_t*)"test1\n", 6, HAL_MAX_DELAY);
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <S10077_StartAcquisition+0xc0>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	2206      	movs	r2, #6
 8000fea:	4923      	ldr	r1, [pc, #140]	@ (8001078 <S10077_StartAcquisition+0xc4>)
 8000fec:	f003 ff7a 	bl	8004ee4 <HAL_UART_Transmit>

    // Store the handle of the ADC we are about to use. This is crucial for the callback.
    current_adc_handle = config->adc_handle;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <S10077_StartAcquisition+0xc8>)
 8000ff6:	6013      	str	r3, [r2, #0]
    data_ready_flag = false;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <S10077_StartAcquisition+0xcc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(uart_handle, (uint8_t*)"test2\n", 6, HAL_MAX_DELAY);
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <S10077_StartAcquisition+0xc0>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	2206      	movs	r2, #6
 8001008:	491e      	ldr	r1, [pc, #120]	@ (8001084 <S10077_StartAcquisition+0xd0>)
 800100a:	f003 ff6b 	bl	8004ee4 <HAL_UART_Transmit>
    // Step 1: Prepare the correct ADC and DMA to listen for triggers from its pre-configured timer.
    // This is the ONLY activation command needed for the acquisition chain.
    if (HAL_ADC_Start_DMA(config->adc_handle, (uint32_t*)adc_buffer, S10077_NUM_PIXELS) != HAL_OK)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001016:	491c      	ldr	r1, [pc, #112]	@ (8001088 <S10077_StartAcquisition+0xd4>)
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fd01 	bl	8001a20 <HAL_ADC_Start_DMA>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <S10077_StartAcquisition+0x74>
    {
        Error_Handler();
 8001024:	f7ff ff94 	bl	8000f50 <Error_Handler>
    }

    // Step 2: Send the ST pulse to the specific sensor to start its data readout.
    HAL_GPIO_WritePin(config->st_port, config->st_pin, GPIO_PIN_SET);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6918      	ldr	r0, [r3, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8a9b      	ldrh	r3, [r3, #20]
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	f001 fee2 	bl	8002dfc <HAL_GPIO_WritePin>
    HAL_Delay(S10077_INTEGRATION_TIME_MS);
 8001038:	200a      	movs	r0, #10
 800103a:	f000 fc89 	bl	8001950 <HAL_Delay>
    HAL_GPIO_WritePin(config->st_port, config->st_pin, GPIO_PIN_RESET);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6918      	ldr	r0, [r3, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	8a9b      	ldrh	r3, [r3, #20]
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	f001 fed7 	bl	8002dfc <HAL_GPIO_WritePin>
    HAL_UART_Transmit(uart_handle, (uint8_t*)"test3\n", 6, HAL_MAX_DELAY);
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <S10077_StartAcquisition+0xc0>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2206      	movs	r2, #6
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <S10077_StartAcquisition+0xd8>)
 800105a:	f003 ff43 	bl	8004ee4 <HAL_UART_Transmit>
 800105e:	e000      	b.n	8001062 <S10077_StartAcquisition+0xae>
        return; // Invalid sensor ID
 8001060:	bf00      	nop
}
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200003e4 	.word	0x200003e4
 800106c:	20000be9 	.word	0x20000be9
 8001070:	200003e0 	.word	0x200003e0
 8001074:	200003dc 	.word	0x200003dc
 8001078:	08005ff8 	.word	0x08005ff8
 800107c:	20000bec 	.word	0x20000bec
 8001080:	20000be8 	.word	0x20000be8
 8001084:	08006000 	.word	0x08006000
 8001088:	200003e8 	.word	0x200003e8
 800108c:	08006008 	.word	0x08006008

08001090 <S10077_IsDataReady>:

bool S10077_IsDataReady(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    return data_ready_flag;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <S10077_IsDataReady+0x14>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000be8 	.word	0x20000be8

080010a8 <S10077_PrintDataViaUART>:

void S10077_PrintDataViaUART(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
    static char buf[11000];
    int n = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]

    n += snprintf(buf + n, sizeof(buf) - n, "BEGIN,SENSOR_%u,", current_sensor_id);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a23      	ldr	r2, [pc, #140]	@ (8001144 <S10077_PrintDataViaUART+0x9c>)
 80010b6:	1898      	adds	r0, r3, r2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f5c3 512b 	rsb	r1, r3, #10944	@ 0x2ac0
 80010be:	3138      	adds	r1, #56	@ 0x38
 80010c0:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <S10077_PrintDataViaUART+0xa0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4a21      	ldr	r2, [pc, #132]	@ (800114c <S10077_PrintDataViaUART+0xa4>)
 80010c6:	f004 fac9 	bl	800565c <sniprintf>
 80010ca:	4602      	mov	r2, r0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < S10077_NUM_PIXELS; ++i) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	e014      	b.n	8001102 <S10077_PrintDataViaUART+0x5a>
        n += snprintf(buf + n, sizeof(buf) - n, "%u,", adc_buffer[i]);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <S10077_PrintDataViaUART+0x9c>)
 80010dc:	1898      	adds	r0, r3, r2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f5c3 512b 	rsb	r1, r3, #10944	@ 0x2ac0
 80010e4:	3138      	adds	r1, #56	@ 0x38
 80010e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001150 <S10077_PrintDataViaUART+0xa8>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ee:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <S10077_PrintDataViaUART+0xac>)
 80010f0:	f004 fab4 	bl	800565c <sniprintf>
 80010f4:	4602      	mov	r2, r0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < S10077_NUM_PIXELS; ++i) {
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001108:	dbe6      	blt.n	80010d8 <S10077_PrintDataViaUART+0x30>
    }
    n += snprintf(buf + n, sizeof(buf) - n, "END\r\n");
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <S10077_PrintDataViaUART+0x9c>)
 800110e:	1898      	adds	r0, r3, r2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f5c3 532b 	rsb	r3, r3, #10944	@ 0x2ac0
 8001116:	3338      	adds	r3, #56	@ 0x38
 8001118:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <S10077_PrintDataViaUART+0xb0>)
 800111a:	4619      	mov	r1, r3
 800111c:	f004 fa9e 	bl	800565c <sniprintf>
 8001120:	4602      	mov	r2, r0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	607b      	str	r3, [r7, #4]

    HAL_UART_Transmit(uart_handle, (uint8_t*)buf, n, HAL_MAX_DELAY);
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <S10077_PrintDataViaUART+0xb4>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	b29a      	uxth	r2, r3
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	4903      	ldr	r1, [pc, #12]	@ (8001144 <S10077_PrintDataViaUART+0x9c>)
 8001136:	f003 fed5 	bl	8004ee4 <HAL_UART_Transmit>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000bf0 	.word	0x20000bf0
 8001148:	20000be9 	.word	0x20000be9
 800114c:	08006010 	.word	0x08006010
 8001150:	200003e8 	.word	0x200003e8
 8001154:	08006024 	.word	0x08006024
 8001158:	08006028 	.word	0x08006028
 800115c:	200003dc 	.word	0x200003dc

08001160 <HAL_ADC_ConvCpltCallback>:
//================================================================================
// HAL Callback Function Override
//================================================================================

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  // Check if the callback is from the ADC we *currently* expect a response from.
  if(hadc->Instance == current_adc_handle->Instance)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_ADC_ConvCpltCallback+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d102      	bne.n	800117c <HAL_ADC_ConvCpltCallback+0x1c>
  {
    data_ready_flag = true;
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
  }
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	20000bec 	.word	0x20000bec
 800118c:	20000be8 	.word	0x20000be8

08001190 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ce:	2007      	movs	r0, #7
 80011d0:	f001 f8ce 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	@ 0x38
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a8c      	ldr	r2, [pc, #560]	@ (8001430 <HAL_ADC_MspInit+0x250>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d157      	bne.n	80012b2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	4b8b      	ldr	r3, [pc, #556]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	4a8a      	ldr	r2, [pc, #552]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001210:	6453      	str	r3, [r2, #68]	@ 0x44
 8001212:	4b88      	ldr	r3, [pc, #544]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	4b84      	ldr	r3, [pc, #528]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a83      	ldr	r2, [pc, #524]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b81      	ldr	r3, [pc, #516]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VIDEO0_Pin;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VIDEO0_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	487a      	ldr	r0, [pc, #488]	@ (8001438 <HAL_ADC_MspInit+0x258>)
 800124e:	f001 fc41 	bl	8002ad4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001252:	4b7a      	ldr	r3, [pc, #488]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 8001254:	4a7a      	ldr	r2, [pc, #488]	@ (8001440 <HAL_ADC_MspInit+0x260>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001258:	4b78      	ldr	r3, [pc, #480]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125e:	4b77      	ldr	r3, [pc, #476]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	4b75      	ldr	r3, [pc, #468]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	4b74      	ldr	r3, [pc, #464]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 800126c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001270:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001272:	4b72      	ldr	r3, [pc, #456]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 8001274:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001278:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800127a:	4b70      	ldr	r3, [pc, #448]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 800127c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001280:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001282:	4b6e      	ldr	r3, [pc, #440]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001288:	4b6c      	ldr	r3, [pc, #432]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128e:	4b6b      	ldr	r3, [pc, #428]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001294:	4869      	ldr	r0, [pc, #420]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 8001296:	f001 f8ad 	bl	80023f4 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80012a0:	f7ff fe56 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a65      	ldr	r2, [pc, #404]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 80012a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80012aa:	4a64      	ldr	r2, [pc, #400]	@ (800143c <HAL_ADC_MspInit+0x25c>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012b0:	e0ba      	b.n	8001428 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a63      	ldr	r2, [pc, #396]	@ (8001444 <HAL_ADC_MspInit+0x264>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d158      	bne.n	800136e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	4b5c      	ldr	r3, [pc, #368]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 80012c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c4:	4a5b      	ldr	r2, [pc, #364]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80012cc:	4b59      	ldr	r3, [pc, #356]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	4b55      	ldr	r3, [pc, #340]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	4a54      	ldr	r2, [pc, #336]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e8:	4b52      	ldr	r3, [pc, #328]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VIDEO2_Pin|VIDEO0_Pin;
 80012f4:	2303      	movs	r3, #3
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	484c      	ldr	r0, [pc, #304]	@ (8001438 <HAL_ADC_MspInit+0x258>)
 8001308:	f001 fbe4 	bl	8002ad4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800130c:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 800130e:	4a4f      	ldr	r2, [pc, #316]	@ (800144c <HAL_ADC_MspInit+0x26c>)
 8001310:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001312:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001314:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001318:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131a:	4b4b      	ldr	r3, [pc, #300]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001320:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001326:	4b48      	ldr	r3, [pc, #288]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800132e:	4b46      	ldr	r3, [pc, #280]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001334:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800133e:	4b42      	ldr	r3, [pc, #264]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001344:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134a:	4b3f      	ldr	r3, [pc, #252]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001350:	483d      	ldr	r0, [pc, #244]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001352:	f001 f84f 	bl	80023f4 <HAL_DMA_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_ADC_MspInit+0x180>
      Error_Handler();
 800135c:	f7ff fdf8 	bl	8000f50 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a39      	ldr	r2, [pc, #228]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001364:	639a      	str	r2, [r3, #56]	@ 0x38
 8001366:	4a38      	ldr	r2, [pc, #224]	@ (8001448 <HAL_ADC_MspInit+0x268>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800136c:	e05c      	b.n	8001428 <HAL_ADC_MspInit+0x248>
  else if(hadc->Instance==ADC3)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a37      	ldr	r2, [pc, #220]	@ (8001450 <HAL_ADC_MspInit+0x270>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d157      	bne.n	8001428 <HAL_ADC_MspInit+0x248>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001380:	4a2c      	ldr	r2, [pc, #176]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001386:	6453      	str	r3, [r2, #68]	@ 0x44
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	4a25      	ldr	r2, [pc, #148]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a4:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <HAL_ADC_MspInit+0x254>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VIDEO2_Pin;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VIDEO2_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	481d      	ldr	r0, [pc, #116]	@ (8001438 <HAL_ADC_MspInit+0x258>)
 80013c4:	f001 fb86 	bl	8002ad4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <HAL_ADC_MspInit+0x278>)
 80013cc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013d4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013f0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 800140e:	f000 fff1 	bl	80023f4 <HAL_DMA_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_ADC_MspInit+0x23c>
      Error_Handler();
 8001418:	f7ff fd9a 	bl	8000f50 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 8001420:	639a      	str	r2, [r3, #56]	@ 0x38
 8001422:	4a0c      	ldr	r2, [pc, #48]	@ (8001454 <HAL_ADC_MspInit+0x274>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	@ 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40012000 	.word	0x40012000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	20000150 	.word	0x20000150
 8001440:	40026410 	.word	0x40026410
 8001444:	40012100 	.word	0x40012100
 8001448:	200001b0 	.word	0x200001b0
 800144c:	40026440 	.word	0x40026440
 8001450:	40012200 	.word	0x40012200
 8001454:	20000210 	.word	0x20000210
 8001458:	40026428 	.word	0x40026428

0800145c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a55      	ldr	r2, [pc, #340]	@ (80015d0 <HAL_TIM_Base_MspInit+0x174>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10e      	bne.n	800149c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	4b54      	ldr	r3, [pc, #336]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a53      	ldr	r2, [pc, #332]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b51      	ldr	r3, [pc, #324]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800149a:	e094      	b.n	80015c6 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a4:	d12c      	bne.n	8001500 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	4b4a      	ldr	r3, [pc, #296]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a49      	ldr	r2, [pc, #292]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a42      	ldr	r2, [pc, #264]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b40      	ldr	r3, [pc, #256]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TRG1_Pin;
 80014de:	2320      	movs	r3, #32
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ee:	2301      	movs	r3, #1
 80014f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TRG1_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4837      	ldr	r0, [pc, #220]	@ (80015d8 <HAL_TIM_Base_MspInit+0x17c>)
 80014fa:	f001 faeb 	bl	8002ad4 <HAL_GPIO_Init>
}
 80014fe:	e062      	b.n	80015c6 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM3)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a35      	ldr	r2, [pc, #212]	@ (80015dc <HAL_TIM_Base_MspInit+0x180>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12c      	bne.n	8001564 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a29      	ldr	r2, [pc, #164]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TRG0_Pin;
 8001542:	2340      	movs	r3, #64	@ 0x40
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800154a:	2302      	movs	r3, #2
 800154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001552:	2302      	movs	r3, #2
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TRG0_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	481e      	ldr	r0, [pc, #120]	@ (80015d8 <HAL_TIM_Base_MspInit+0x17c>)
 800155e:	f001 fab9 	bl	8002ad4 <HAL_GPIO_Init>
}
 8001562:	e030      	b.n	80015c6 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM8)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <HAL_TIM_Base_MspInit+0x184>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12b      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_TIM_Base_MspInit+0x178>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TRG2_Pin;
 80015a6:	2340      	movs	r3, #64	@ 0x40
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015b6:	2303      	movs	r3, #3
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TRG2_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <HAL_TIM_Base_MspInit+0x188>)
 80015c2:	f001 fa87 	bl	8002ad4 <HAL_GPIO_Init>
}
 80015c6:	bf00      	nop
 80015c8:	3738      	adds	r7, #56	@ 0x38
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40010000 	.word	0x40010000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40010400 	.word	0x40010400
 80015e4:	40020800 	.word	0x40020800

080015e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11e      	bne.n	8001648 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_TIM_MspPostInit+0x6c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CLK_Pin;
 8001626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001638:	2301      	movs	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <HAL_TIM_MspPostInit+0x70>)
 8001644:	f001 fa46 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40010000 	.word	0x40010000
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_UART_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12b      	bne.n	80016d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016b6:	230c      	movs	r3, #12
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c6:	2307      	movs	r3, #7
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <HAL_UART_MspInit+0x8c>)
 80016d2:	f001 f9ff 	bl	8002ad4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001742:	f000 f8e5 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <DMA2_Stream0_IRQHandler+0x10>)
 8001752:	f000 ff55 	bl	8002600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000150 	.word	0x20000150

08001760 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <DMA2_Stream1_IRQHandler+0x10>)
 8001766:	f000 ff4b 	bl	8002600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000210 	.word	0x20000210

08001774 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA2_Stream2_IRQHandler+0x10>)
 800177a:	f000 ff41 	bl	8002600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200001b0 	.word	0x200001b0

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f003 ff8c 	bl	80056d4 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20020000 	.word	0x20020000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	200036e8 	.word	0x200036e8
 80017f0:	20003838 	.word	0x20003838

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001846:	f003 ff4b 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7fe fea9 	bl	80005a0 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800185c:	080060c4 	.word	0x080060c4
  ldr r2, =_sbss
 8001860:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001864:	20003838 	.word	0x20003838

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 fd6b 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fc76 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fd83 	bl	80023da <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 fd4b 	bl	8002386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	20000008 	.word	0x20000008
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	200036ec 	.word	0x200036ec

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200036ec 	.word	0x200036ec

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e033      	b.n	8001a16 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fc12 	bl	80011e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d118      	bne.n	8001a08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019de:	f023 0302 	bic.w	r3, r3, #2
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fa72 	bl	8001ed4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a06:	e001      	b.n	8001a0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Start_DMA+0x22>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e0eb      	b.n	8001c1a <HAL_ADC_Start_DMA+0x1fa>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d018      	beq.n	8001a8a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a68:	4b6e      	ldr	r3, [pc, #440]	@ (8001c24 <HAL_ADC_Start_DMA+0x204>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c28 <HAL_ADC_Start_DMA+0x208>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0c9a      	lsrs	r2, r3, #18
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a98:	d107      	bne.n	8001aaa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	f040 80a3 	bne.w	8001c00 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ae4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af8:	d106      	bne.n	8001b08 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f023 0206 	bic.w	r2, r3, #6
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b06:	e002      	b.n	8001b0e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b16:	4b45      	ldr	r3, [pc, #276]	@ (8001c2c <HAL_ADC_Start_DMA+0x20c>)
 8001b18:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1e:	4a44      	ldr	r2, [pc, #272]	@ (8001c30 <HAL_ADC_Start_DMA+0x210>)
 8001b20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b26:	4a43      	ldr	r2, [pc, #268]	@ (8001c34 <HAL_ADC_Start_DMA+0x214>)
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2e:	4a42      	ldr	r2, [pc, #264]	@ (8001c38 <HAL_ADC_Start_DMA+0x218>)
 8001b30:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b5a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	334c      	adds	r3, #76	@ 0x4c
 8001b66:	4619      	mov	r1, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f000 fcf0 	bl	8002550 <HAL_DMA_Start_IT>
 8001b70:	4603      	mov	r3, r0
 8001b72:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12a      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2d      	ldr	r2, [pc, #180]	@ (8001c3c <HAL_ADC_Start_DMA+0x21c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d015      	beq.n	8001bb6 <HAL_ADC_Start_DMA+0x196>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c40 <HAL_ADC_Start_DMA+0x220>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_Start_DMA+0x180>
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_ADC_Start_DMA+0x20c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00a      	beq.n	8001bb6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a27      	ldr	r2, [pc, #156]	@ (8001c44 <HAL_ADC_Start_DMA+0x224>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d136      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x1f8>
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_ADC_Start_DMA+0x20c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d130      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d129      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e020      	b.n	8001c18 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <HAL_ADC_Start_DMA+0x21c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d11b      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x1f8>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d114      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	e00b      	b.n	8001c18 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f043 0210 	orr.w	r2, r3, #16
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	40012300 	.word	0x40012300
 8001c30:	080020cd 	.word	0x080020cd
 8001c34:	08002187 	.word	0x08002187
 8001c38:	080021a3 	.word	0x080021a3
 8001c3c:	40012000 	.word	0x40012000
 8001c40:	40012100 	.word	0x40012100
 8001c44:	40012200 	.word	0x40012200

08001c48 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1c>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e113      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x244>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d925      	bls.n	8001ce8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68d9      	ldr	r1, [r3, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b1e      	subs	r3, #30
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68d9      	ldr	r1, [r3, #12]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4403      	add	r3, r0
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	e022      	b.n	8001d2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6919      	ldr	r1, [r3, #16]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4403      	add	r3, r0
 8001d24:	409a      	lsls	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d824      	bhi.n	8001d80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b05      	subs	r3, #5
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b05      	subs	r3, #5
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d7e:	e04c      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d824      	bhi.n	8001dd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b23      	subs	r3, #35	@ 0x23
 8001d9a:	221f      	movs	r2, #31
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43da      	mvns	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	400a      	ands	r2, r1
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b23      	subs	r3, #35	@ 0x23
 8001dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dd0:	e023      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b41      	subs	r3, #65	@ 0x41
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b41      	subs	r3, #65	@ 0x41
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1a:	4b29      	ldr	r3, [pc, #164]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x250>)
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a28      	ldr	r2, [pc, #160]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x254>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d10f      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d8>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b12      	cmp	r3, #18
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x254>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12b      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x258>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0x1f4>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b11      	cmp	r3, #17
 8001e62:	d122      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a11      	ldr	r2, [pc, #68]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x258>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d111      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_ADC_ConfigChannel+0x25c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a11      	ldr	r2, [pc, #68]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x260>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9a      	lsrs	r2, r3, #18
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e9c:	e002      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f9      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	10000012 	.word	0x10000012
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	431bde83 	.word	0x431bde83

08001ed4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001edc:	4b79      	ldr	r3, [pc, #484]	@ (80020c4 <ADC_Init+0x1f0>)
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	021a      	lsls	r2, r3, #8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	4a58      	ldr	r2, [pc, #352]	@ (80020c8 <ADC_Init+0x1f4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6899      	ldr	r1, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	e00f      	b.n	8001fd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0202 	bic.w	r2, r2, #2
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7e1b      	ldrb	r3, [r3, #24]
 8001fec:	005a      	lsls	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800200e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800201e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	3b01      	subs	r3, #1
 800202c:	035a      	lsls	r2, r3, #13
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e007      	b.n	8002048 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002046:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002056:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	3b01      	subs	r3, #1
 8002064:	051a      	lsls	r2, r3, #20
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800208a:	025a      	lsls	r2, r3, #9
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	029a      	lsls	r2, r3, #10
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	609a      	str	r2, [r3, #8]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40012300 	.word	0x40012300
 80020c8:	0f000001 	.word	0x0f000001

080020cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d13c      	bne.n	8002160 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12b      	bne.n	8002158 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002104:	2b00      	cmp	r3, #0
 8002106:	d127      	bne.n	8002158 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002120:	2b00      	cmp	r3, #0
 8002122:	d119      	bne.n	8002158 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0220 	bic.w	r2, r2, #32
 8002132:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff f801 	bl	8001160 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800215e:	e00e      	b.n	800217e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff fd75 	bl	8001c5c <HAL_ADC_ErrorCallback>
}
 8002172:	e004      	b.n	800217e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	4798      	blx	r3
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002192:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fd57 	bl	8001c48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2240      	movs	r2, #64	@ 0x40
 80021b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	f043 0204 	orr.w	r2, r3, #4
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff fd4a 	bl	8001c5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	@ (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	@ 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f7ff ff8e 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	@ (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff29 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff3e 	bl	8002218 <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff8e 	bl	80022c4 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5d 	bl	8002270 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff31 	bl	8002234 <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa2 	bl	800232c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fa9a 	bl	8001938 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e099      	b.n	8002544 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002430:	e00f      	b.n	8002452 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002432:	f7ff fa81 	bl	8001938 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b05      	cmp	r3, #5
 800243e:	d908      	bls.n	8002452 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e078      	b.n	8002544 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e8      	bne.n	8002432 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4b38      	ldr	r3, [pc, #224]	@ (800254c <HAL_DMA_Init+0x158>)
 800246c:	4013      	ands	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d107      	bne.n	80024bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	4313      	orrs	r3, r2
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0307 	bic.w	r3, r3, #7
 80024d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d117      	bne.n	8002516 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00e      	beq.n	8002516 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa6f 	bl	80029dc <DMA_CheckFifoParam>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2240      	movs	r2, #64	@ 0x40
 8002508:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002512:	2301      	movs	r3, #1
 8002514:	e016      	b.n	8002544 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa26 	bl	8002970 <DMA_CalcBaseAndBitshift>
 8002524:	4603      	mov	r3, r0
 8002526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	223f      	movs	r2, #63	@ 0x3f
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	f010803f 	.word	0xf010803f

08002550 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_DMA_Start_IT+0x26>
 8002572:	2302      	movs	r3, #2
 8002574:	e040      	b.n	80025f8 <HAL_DMA_Start_IT+0xa8>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d12f      	bne.n	80025ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f9b8 	bl	8002914 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	223f      	movs	r2, #63	@ 0x3f
 80025aa:	409a      	lsls	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0216 	orr.w	r2, r2, #22
 80025be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e005      	b.n	80025f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800260c:	4b8e      	ldr	r3, [pc, #568]	@ (8002848 <HAL_DMA_IRQHandler+0x248>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a8e      	ldr	r2, [pc, #568]	@ (800284c <HAL_DMA_IRQHandler+0x24c>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0a9b      	lsrs	r3, r3, #10
 8002618:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	2208      	movs	r2, #8
 800262c:	409a      	lsls	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01a      	beq.n	800266c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0204 	bic.w	r2, r2, #4
 8002652:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	2208      	movs	r2, #8
 800265a:	409a      	lsls	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	2201      	movs	r2, #1
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268e:	2201      	movs	r2, #1
 8002690:	409a      	lsls	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	f043 0202 	orr.w	r2, r3, #2
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	2204      	movs	r2, #4
 80026a8:	409a      	lsls	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d012      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	2204      	movs	r2, #4
 80026c6:	409a      	lsls	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026dc:	2210      	movs	r2, #16
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d043      	beq.n	8002770 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03c      	beq.n	8002770 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2210      	movs	r2, #16
 80026fc:	409a      	lsls	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d018      	beq.n	8002742 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d024      	beq.n	8002770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
 800272e:	e01f      	b.n	8002770 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01b      	beq.n	8002770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
 8002740:	e016      	b.n	8002770 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0208 	bic.w	r2, r2, #8
 800275e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	2220      	movs	r2, #32
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 808f 	beq.w	80028a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8087 	beq.w	80028a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	2220      	movs	r2, #32
 8002798:	409a      	lsls	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d136      	bne.n	8002818 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0216 	bic.w	r2, r2, #22
 80027b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <HAL_DMA_IRQHandler+0x1da>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0208 	bic.w	r2, r2, #8
 80027e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	223f      	movs	r2, #63	@ 0x3f
 80027f0:	409a      	lsls	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800280a:	2b00      	cmp	r3, #0
 800280c:	d07e      	beq.n	800290c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
        }
        return;
 8002816:	e079      	b.n	800290c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01d      	beq.n	8002862 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10d      	bne.n	8002850 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002838:	2b00      	cmp	r3, #0
 800283a:	d031      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
 8002844:	e02c      	b.n	80028a0 <HAL_DMA_IRQHandler+0x2a0>
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000
 800284c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d023      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e01e      	b.n	80028a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10f      	bne.n	8002890 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0210 	bic.w	r2, r2, #16
 800287e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d032      	beq.n	800290e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d022      	beq.n	80028fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2205      	movs	r2, #5
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d307      	bcc.n	80028e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f2      	bne.n	80028cc <HAL_DMA_IRQHandler+0x2cc>
 80028e6:	e000      	b.n	80028ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
 800290a:	e000      	b.n	800290e <HAL_DMA_IRQHandler+0x30e>
        return;
 800290c:	bf00      	nop
    }
  }
}
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002930:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b40      	cmp	r3, #64	@ 0x40
 8002940:	d108      	bne.n	8002954 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002952:	e007      	b.n	8002964 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3b10      	subs	r3, #16
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800298a:	4a13      	ldr	r2, [pc, #76]	@ (80029d8 <DMA_CalcBaseAndBitshift+0x68>)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d909      	bls.n	80029b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	1d1a      	adds	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b0:	e007      	b.n	80029c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	aaaaaaab 	.word	0xaaaaaaab
 80029d8:	08006078 	.word	0x08006078

080029dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11f      	bne.n	8002a36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d856      	bhi.n	8002aaa <DMA_CheckFifoParam+0xce>
 80029fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <DMA_CheckFifoParam+0x28>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a27 	.word	0x08002a27
 8002a0c:	08002a15 	.word	0x08002a15
 8002a10:	08002aab 	.word	0x08002aab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d046      	beq.n	8002aae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a24:	e043      	b.n	8002aae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a2e:	d140      	bne.n	8002ab2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a34:	e03d      	b.n	8002ab2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a3e:	d121      	bne.n	8002a84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d837      	bhi.n	8002ab6 <DMA_CheckFifoParam+0xda>
 8002a46:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <DMA_CheckFifoParam+0x70>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a63 	.word	0x08002a63
 8002a54:	08002a5d 	.word	0x08002a5d
 8002a58:	08002a75 	.word	0x08002a75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e030      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d025      	beq.n	8002aba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a72:	e022      	b.n	8002aba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a7c:	d11f      	bne.n	8002abe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a82:	e01c      	b.n	8002abe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d903      	bls.n	8002a92 <DMA_CheckFifoParam+0xb6>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d003      	beq.n	8002a98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a90:	e018      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      break;
 8002a96:	e015      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e00b      	b.n	8002ac2 <DMA_CheckFifoParam+0xe6>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e00a      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e008      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e006      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e004      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e165      	b.n	8002dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af0:	2201      	movs	r2, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f040 8154 	bne.w	8002db6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d005      	beq.n	8002b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d130      	bne.n	8002b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0201 	and.w	r2, r3, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d017      	beq.n	8002bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d123      	bne.n	8002c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	08da      	lsrs	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	220f      	movs	r2, #15
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	08da      	lsrs	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3208      	adds	r2, #8
 8002c12:	69b9      	ldr	r1, [r7, #24]
 8002c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0203 	and.w	r2, r3, #3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80ae 	beq.w	8002db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd4 <HAL_GPIO_Init+0x300>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	4a5c      	ldr	r2, [pc, #368]	@ (8002dd4 <HAL_GPIO_Init+0x300>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd4 <HAL_GPIO_Init+0x300>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c76:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ddc <HAL_GPIO_Init+0x308>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x21a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8002de0 <HAL_GPIO_Init+0x30c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x216>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4d      	ldr	r2, [pc, #308]	@ (8002de4 <HAL_GPIO_Init+0x310>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x212>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002de8 <HAL_GPIO_Init+0x314>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x20e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dec <HAL_GPIO_Init+0x318>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x20a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8002df0 <HAL_GPIO_Init+0x31c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x206>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a49      	ldr	r2, [pc, #292]	@ (8002df4 <HAL_GPIO_Init+0x320>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x202>
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	e00c      	b.n	8002cf0 <HAL_GPIO_Init+0x21c>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e00a      	b.n	8002cf0 <HAL_GPIO_Init+0x21c>
 8002cda:	2305      	movs	r3, #5
 8002cdc:	e008      	b.n	8002cf0 <HAL_GPIO_Init+0x21c>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x21c>
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e004      	b.n	8002cf0 <HAL_GPIO_Init+0x21c>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e002      	b.n	8002cf0 <HAL_GPIO_Init+0x21c>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_GPIO_Init+0x21c>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f002 0203 	and.w	r2, r2, #3
 8002cf6:	0092      	lsls	r2, r2, #2
 8002cf8:	4093      	lsls	r3, r2
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d00:	4935      	ldr	r1, [pc, #212]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	089b      	lsrs	r3, r3, #2
 8002d06:	3302      	adds	r3, #2
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a31      	ldr	r2, [pc, #196]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b2f      	ldr	r3, [pc, #188]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a26      	ldr	r2, [pc, #152]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d62:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d86:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db0:	4a11      	ldr	r2, [pc, #68]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	f67f ae96 	bls.w	8002af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3724      	adds	r7, #36	@ 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40021400 	.word	0x40021400
 8002df4:	40021800 	.word	0x40021800
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e5c:	f7fe fd6c 	bl	8001938 <HAL_GetTick>
 8002e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e62:	e009      	b.n	8002e78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e64:	f7fe fd68 	bl	8001938 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e72:	d901      	bls.n	8002e78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e01f      	b.n	8002eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e78:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e84:	d1ee      	bne.n	8002e64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e8c:	f7fe fd54 	bl	8001938 <HAL_GetTick>
 8002e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e92:	e009      	b.n	8002ea8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e94:	f7fe fd50 	bl	8001938 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ea2:	d901      	bls.n	8002ea8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e007      	b.n	8002eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ea8:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eb4:	d1ee      	bne.n	8002e94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	420e0040 	.word	0x420e0040
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	420e0044 	.word	0x420e0044

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0cc      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b68      	ldr	r3, [pc, #416]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d90c      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b65      	ldr	r3, [pc, #404]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a58      	ldr	r2, [pc, #352]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a52      	ldr	r2, [pc, #328]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d044      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d119      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e067      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b37      	ldr	r3, [pc, #220]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4934      	ldr	r1, [pc, #208]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fcba 	bl	8001938 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fcb6 	bl	8001938 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20c      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f855 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	@ (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fc1a 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00
 800308c:	40023800 	.word	0x40023800
 8003090:	08006060 	.word	0x08006060
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b8:	f7ff fff0 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08006070 	.word	0x08006070

080030dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030e0:	f7ff ffdc 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0b5b      	lsrs	r3, r3, #13
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	@ (8003100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	08006070 	.word	0x08006070

08003104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0ae      	sub	sp, #184	@ 0xb8
 800310a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312a:	4bcb      	ldr	r3, [pc, #812]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b0c      	cmp	r3, #12
 8003134:	f200 8206 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x440>
 8003138:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <HAL_RCC_GetSysClockFreq+0x3c>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003175 	.word	0x08003175
 8003144:	08003545 	.word	0x08003545
 8003148:	08003545 	.word	0x08003545
 800314c:	08003545 	.word	0x08003545
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003545 	.word	0x08003545
 8003158:	08003545 	.word	0x08003545
 800315c:	08003545 	.word	0x08003545
 8003160:	08003185 	.word	0x08003185
 8003164:	08003545 	.word	0x08003545
 8003168:	08003545 	.word	0x08003545
 800316c:	08003545 	.word	0x08003545
 8003170:	08003375 	.word	0x08003375
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4bb9      	ldr	r3, [pc, #740]	@ (800345c <HAL_RCC_GetSysClockFreq+0x358>)
 8003176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800317a:	e1e7      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800317c:	4bb8      	ldr	r3, [pc, #736]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x35c>)
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003182:	e1e3      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003184:	4bb4      	ldr	r3, [pc, #720]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003190:	4bb1      	ldr	r3, [pc, #708]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d071      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319c:	4bae      	ldr	r3, [pc, #696]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031c2:	4622      	mov	r2, r4
 80031c4:	462b      	mov	r3, r5
 80031c6:	f04f 0000 	mov.w	r0, #0
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	0159      	lsls	r1, r3, #5
 80031d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d4:	0150      	lsls	r0, r2, #5
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4621      	mov	r1, r4
 80031dc:	1a51      	subs	r1, r2, r1
 80031de:	6439      	str	r1, [r7, #64]	@ 0x40
 80031e0:	4629      	mov	r1, r5
 80031e2:	eb63 0301 	sbc.w	r3, r3, r1
 80031e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031f4:	4649      	mov	r1, r9
 80031f6:	018b      	lsls	r3, r1, #6
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031fe:	4641      	mov	r1, r8
 8003200:	018a      	lsls	r2, r1, #6
 8003202:	4641      	mov	r1, r8
 8003204:	1a51      	subs	r1, r2, r1
 8003206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003208:	4649      	mov	r1, r9
 800320a:	eb63 0301 	sbc.w	r3, r3, r1
 800320e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800321c:	4649      	mov	r1, r9
 800321e:	00cb      	lsls	r3, r1, #3
 8003220:	4641      	mov	r1, r8
 8003222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003226:	4641      	mov	r1, r8
 8003228:	00ca      	lsls	r2, r1, #3
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	4603      	mov	r3, r0
 8003230:	4622      	mov	r2, r4
 8003232:	189b      	adds	r3, r3, r2
 8003234:	633b      	str	r3, [r7, #48]	@ 0x30
 8003236:	462b      	mov	r3, r5
 8003238:	460a      	mov	r2, r1
 800323a:	eb42 0303 	adc.w	r3, r2, r3
 800323e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800324c:	4629      	mov	r1, r5
 800324e:	024b      	lsls	r3, r1, #9
 8003250:	4621      	mov	r1, r4
 8003252:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003256:	4621      	mov	r1, r4
 8003258:	024a      	lsls	r2, r1, #9
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003268:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800326c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003270:	f7fd f81e 	bl	80002b0 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800327e:	e067      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003280:	4b75      	ldr	r3, [pc, #468]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800328c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800329a:	2300      	movs	r3, #0
 800329c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800329e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032a2:	4622      	mov	r2, r4
 80032a4:	462b      	mov	r3, r5
 80032a6:	f04f 0000 	mov.w	r0, #0
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b4:	0150      	lsls	r0, r2, #5
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4621      	mov	r1, r4
 80032bc:	1a51      	subs	r1, r2, r1
 80032be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032c0:	4629      	mov	r1, r5
 80032c2:	eb63 0301 	sbc.w	r3, r3, r1
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032d4:	4649      	mov	r1, r9
 80032d6:	018b      	lsls	r3, r1, #6
 80032d8:	4641      	mov	r1, r8
 80032da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032de:	4641      	mov	r1, r8
 80032e0:	018a      	lsls	r2, r1, #6
 80032e2:	4641      	mov	r1, r8
 80032e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80032e8:	4649      	mov	r1, r9
 80032ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003302:	4692      	mov	sl, r2
 8003304:	469b      	mov	fp, r3
 8003306:	4623      	mov	r3, r4
 8003308:	eb1a 0303 	adds.w	r3, sl, r3
 800330c:	623b      	str	r3, [r7, #32]
 800330e:	462b      	mov	r3, r5
 8003310:	eb4b 0303 	adc.w	r3, fp, r3
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003338:	2200      	movs	r2, #0
 800333a:	673b      	str	r3, [r7, #112]	@ 0x70
 800333c:	677a      	str	r2, [r7, #116]	@ 0x74
 800333e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003342:	f7fc ffb5 	bl	80002b0 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4613      	mov	r3, r2
 800334c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003350:	4b41      	ldr	r3, [pc, #260]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	3301      	adds	r3, #1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003372:	e0eb      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003374:	4b38      	ldr	r3, [pc, #224]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800337c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003380:	4b35      	ldr	r3, [pc, #212]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d06b      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338c:	4b32      	ldr	r3, [pc, #200]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	2200      	movs	r2, #0
 8003394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003396:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800339a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339e:	663b      	str	r3, [r7, #96]	@ 0x60
 80033a0:	2300      	movs	r3, #0
 80033a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80033a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033a8:	4622      	mov	r2, r4
 80033aa:	462b      	mov	r3, r5
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	0159      	lsls	r1, r3, #5
 80033b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ba:	0150      	lsls	r0, r2, #5
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4621      	mov	r1, r4
 80033c2:	1a51      	subs	r1, r2, r1
 80033c4:	61b9      	str	r1, [r7, #24]
 80033c6:	4629      	mov	r1, r5
 80033c8:	eb63 0301 	sbc.w	r3, r3, r1
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033da:	4659      	mov	r1, fp
 80033dc:	018b      	lsls	r3, r1, #6
 80033de:	4651      	mov	r1, sl
 80033e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033e4:	4651      	mov	r1, sl
 80033e6:	018a      	lsls	r2, r1, #6
 80033e8:	4651      	mov	r1, sl
 80033ea:	ebb2 0801 	subs.w	r8, r2, r1
 80033ee:	4659      	mov	r1, fp
 80033f0:	eb63 0901 	sbc.w	r9, r3, r1
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003400:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003404:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	4623      	mov	r3, r4
 800340e:	eb18 0303 	adds.w	r3, r8, r3
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	462b      	mov	r3, r5
 8003416:	eb49 0303 	adc.w	r3, r9, r3
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003428:	4629      	mov	r1, r5
 800342a:	024b      	lsls	r3, r1, #9
 800342c:	4621      	mov	r1, r4
 800342e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003432:	4621      	mov	r1, r4
 8003434:	024a      	lsls	r2, r1, #9
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800343e:	2200      	movs	r2, #0
 8003440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003442:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003444:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003448:	f7fc ff32 	bl	80002b0 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003456:	e065      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x420>
 8003458:	40023800 	.word	0x40023800
 800345c:	00f42400 	.word	0x00f42400
 8003460:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003464:	4b3d      	ldr	r3, [pc, #244]	@ (800355c <HAL_RCC_GetSysClockFreq+0x458>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	2200      	movs	r2, #0
 800346c:	4618      	mov	r0, r3
 800346e:	4611      	mov	r1, r2
 8003470:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003474:	653b      	str	r3, [r7, #80]	@ 0x50
 8003476:	2300      	movs	r3, #0
 8003478:	657b      	str	r3, [r7, #84]	@ 0x54
 800347a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800347e:	4642      	mov	r2, r8
 8003480:	464b      	mov	r3, r9
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4641      	mov	r1, r8
 8003498:	1a51      	subs	r1, r2, r1
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	4649      	mov	r1, r9
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034b0:	4659      	mov	r1, fp
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ba:	4651      	mov	r1, sl
 80034bc:	018a      	lsls	r2, r1, #6
 80034be:	4651      	mov	r1, sl
 80034c0:	1a54      	subs	r4, r2, r1
 80034c2:	4659      	mov	r1, fp
 80034c4:	eb63 0501 	sbc.w	r5, r3, r1
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	00eb      	lsls	r3, r5, #3
 80034d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034d6:	00e2      	lsls	r2, r4, #3
 80034d8:	4614      	mov	r4, r2
 80034da:	461d      	mov	r5, r3
 80034dc:	4643      	mov	r3, r8
 80034de:	18e3      	adds	r3, r4, r3
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	464b      	mov	r3, r9
 80034e4:	eb45 0303 	adc.w	r3, r5, r3
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034f6:	4629      	mov	r1, r5
 80034f8:	028b      	lsls	r3, r1, #10
 80034fa:	4621      	mov	r1, r4
 80034fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003500:	4621      	mov	r1, r4
 8003502:	028a      	lsls	r2, r1, #10
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800350c:	2200      	movs	r2, #0
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003510:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003512:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003516:	f7fc fecb 	bl	80002b0 <__aeabi_uldivmod>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4613      	mov	r3, r2
 8003520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003524:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <HAL_RCC_GetSysClockFreq+0x458>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0f1b      	lsrs	r3, r3, #28
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003542:	e003      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800354a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003550:	4618      	mov	r0, r3
 8003552:	37b8      	adds	r7, #184	@ 0xb8
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400

08003564 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e28d      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8083 	beq.w	800368a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003584:	4b94      	ldr	r3, [pc, #592]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b04      	cmp	r3, #4
 800358e:	d019      	beq.n	80035c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003590:	4b91      	ldr	r3, [pc, #580]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
        || \
 8003598:	2b08      	cmp	r3, #8
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800359c:	4b8e      	ldr	r3, [pc, #568]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b8b      	ldr	r3, [pc, #556]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b88      	ldr	r3, [pc, #544]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b84      	ldr	r3, [pc, #528]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x124>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e25a      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x90>
 80035e6:	4b7c      	ldr	r3, [pc, #496]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7b      	ldr	r2, [pc, #492]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xcc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0xb4>
 80035fe:	4b76      	ldr	r3, [pc, #472]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b73      	ldr	r3, [pc, #460]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a72      	ldr	r2, [pc, #456]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xcc>
 8003618:	4b6f      	ldr	r3, [pc, #444]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6e      	ldr	r2, [pc, #440]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b6c      	ldr	r3, [pc, #432]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6b      	ldr	r2, [pc, #428]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f97e 	bl	8001938 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe f97a 	bl	8001938 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	@ 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e21f      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b61      	ldr	r3, [pc, #388]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xdc>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe f96a 	bl	8001938 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe f966 	bl	8001938 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e20b      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b57      	ldr	r3, [pc, #348]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x104>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d06f      	beq.n	8003776 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003696:	4b50      	ldr	r3, [pc, #320]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036a2:	4b4d      	ldr	r3, [pc, #308]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036ae:	4b4a      	ldr	r3, [pc, #296]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b47      	ldr	r3, [pc, #284]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d11c      	bne.n	8003700 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c6:	4b44      	ldr	r3, [pc, #272]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d116      	bne.n	8003700 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d2:	4b41      	ldr	r3, [pc, #260]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x186>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1d3      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b3b      	ldr	r3, [pc, #236]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4937      	ldr	r1, [pc, #220]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	e03a      	b.n	8003776 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003708:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <HAL_RCC_OscConfig+0x278>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fe f913 	bl	8001938 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003716:	f7fe f90f 	bl	8001938 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1b4      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	4b2b      	ldr	r3, [pc, #172]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4925      	ldr	r1, [pc, #148]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	e015      	b.n	8003776 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <HAL_RCC_OscConfig+0x278>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe f8f2 	bl	8001938 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003758:	f7fe f8ee 	bl	8001938 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e193      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d036      	beq.n	80037f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe f8d2 	bl	8001938 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003798:	f7fe f8ce 	bl	8001938 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e173      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 80037ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x234>
 80037b6:	e01b      	b.n	80037f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fe f8bb 	bl	8001938 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	e00e      	b.n	80037e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe f8b7 	bl	8001938 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d907      	bls.n	80037e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e15c      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	42470000 	.word	0x42470000
 80037e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ea      	bne.n	80037c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8097 	beq.w	800392c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4b83      	ldr	r3, [pc, #524]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4b7f      	ldr	r3, [pc, #508]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	4a7e      	ldr	r2, [pc, #504]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800381c:	6413      	str	r3, [r2, #64]	@ 0x40
 800381e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b79      	ldr	r3, [pc, #484]	@ (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b76      	ldr	r3, [pc, #472]	@ (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a75      	ldr	r2, [pc, #468]	@ (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe f877 	bl	8001938 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe f873 	bl	8001938 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e118      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b6c      	ldr	r3, [pc, #432]	@ (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x31e>
 8003874:	4b66      	ldr	r3, [pc, #408]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003878:	4a65      	ldr	r2, [pc, #404]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003880:	e01c      	b.n	80038bc <HAL_RCC_OscConfig+0x358>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x340>
 800388a:	4b61      	ldr	r3, [pc, #388]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a60      	ldr	r2, [pc, #384]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	4b5e      	ldr	r3, [pc, #376]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a5d      	ldr	r2, [pc, #372]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0x358>
 80038a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a8:	4a59      	ldr	r2, [pc, #356]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b0:	4b57      	ldr	r3, [pc, #348]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b4:	4a56      	ldr	r2, [pc, #344]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe f838 	bl	8001938 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe f834 	bl	8001938 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0d7      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ee      	beq.n	80038cc <HAL_RCC_OscConfig+0x368>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fe f822 	bl	8001938 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe f81e 	bl	8001938 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0c1      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390e:	4b40      	ldr	r3, [pc, #256]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ee      	bne.n	80038f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	4a3a      	ldr	r2, [pc, #232]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80ad 	beq.w	8003a90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003936:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b08      	cmp	r3, #8
 8003940:	d060      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d145      	bne.n	80039d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b33      	ldr	r3, [pc, #204]	@ (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fff2 	bl	8001938 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fd ffee 	bl	8001938 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e093      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b29      	ldr	r3, [pc, #164]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	071b      	lsls	r3, r3, #28
 80039a2:	491b      	ldr	r1, [pc, #108]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fd ffc3 	bl	8001938 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fd ffbf 	bl	8001938 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e064      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x452>
 80039d4:	e05c      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd ffac 	bl	8001938 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fd ffa8 	bl	8001938 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04d      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x480>
 8003a02:	e045      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e040      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a9c <HAL_RCC_OscConfig+0x538>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d030      	beq.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d129      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d122      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d119      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d10f      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e041      	b.n	8003b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fcc8 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f000 fc10 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e041      	b.n	8003bd4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f839 	bl	8003bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 fbc1 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_PWM_Start+0x24>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e022      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d109      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x3e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e015      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x58>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e008      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07c      	b.n	8003d5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x82>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x92>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0xa2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 ffda 	bl	8004c5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	@ (8003d64 <HAL_TIM_PWM_Start+0x174>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_PWM_Start+0xcc>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d68 <HAL_TIM_PWM_Start+0x178>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_PWM_Start+0xd0>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_TIM_PWM_Start+0xd2>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a22      	ldr	r2, [pc, #136]	@ (8003d64 <HAL_TIM_PWM_Start+0x174>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d01d      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1f      	ldr	r2, [pc, #124]	@ (8003d6c <HAL_TIM_PWM_Start+0x17c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d70 <HAL_TIM_PWM_Start+0x180>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <HAL_TIM_PWM_Start+0x184>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <HAL_TIM_PWM_Start+0x178>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a18      	ldr	r2, [pc, #96]	@ (8003d78 <HAL_TIM_PWM_Start+0x188>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a16      	ldr	r2, [pc, #88]	@ (8003d7c <HAL_TIM_PWM_Start+0x18c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d010      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	e007      	b.n	8003d5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40001800 	.word	0x40001800

08003d80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e041      	b.n	8003e16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f839 	bl	8003e1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 faa0 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e088      	b.n	8003f62 <HAL_TIM_IC_ConfigChannel+0x130>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11b      	bne.n	8003e96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003e6e:	f000 fd31 	bl	80048d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 020c 	bic.w	r2, r2, #12
 8003e80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6999      	ldr	r1, [r3, #24]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	619a      	str	r2, [r3, #24]
 8003e94:	e060      	b.n	8003f58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d11c      	bne.n	8003ed6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003eac:	f000 fdb5 	bl	8004a1a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ebe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6999      	ldr	r1, [r3, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	619a      	str	r2, [r3, #24]
 8003ed4:	e040      	b.n	8003f58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003eec:	f000 fe02 	bl	8004af4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 020c 	bic.w	r2, r2, #12
 8003efe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69d9      	ldr	r1, [r3, #28]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	61da      	str	r2, [r3, #28]
 8003f12:	e021      	b.n	8003f58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d11c      	bne.n	8003f54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003f2a:	f000 fe1f 	bl	8004b6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003f3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	61da      	str	r2, [r3, #28]
 8003f52:	e001      	b.n	8003f58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e0ae      	b.n	80040e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	f200 809f 	bhi.w	80040d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	080040d9 	.word	0x080040d9
 8003fa8:	080040d9 	.word	0x080040d9
 8003fac:	080040d9 	.word	0x080040d9
 8003fb0:	08004015 	.word	0x08004015
 8003fb4:	080040d9 	.word	0x080040d9
 8003fb8:	080040d9 	.word	0x080040d9
 8003fbc:	080040d9 	.word	0x080040d9
 8003fc0:	08004057 	.word	0x08004057
 8003fc4:	080040d9 	.word	0x080040d9
 8003fc8:	080040d9 	.word	0x080040d9
 8003fcc:	080040d9 	.word	0x080040d9
 8003fd0:	08004097 	.word	0x08004097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fa38 	bl	8004450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0208 	orr.w	r2, r2, #8
 8003fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0204 	bic.w	r2, r2, #4
 8003ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6999      	ldr	r1, [r3, #24]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	619a      	str	r2, [r3, #24]
      break;
 8004012:	e064      	b.n	80040de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fa88 	bl	8004530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800402e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6999      	ldr	r1, [r3, #24]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	619a      	str	r2, [r3, #24]
      break;
 8004054:	e043      	b.n	80040de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fadd 	bl	800461c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0208 	orr.w	r2, r2, #8
 8004070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0204 	bic.w	r2, r2, #4
 8004080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69d9      	ldr	r1, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	61da      	str	r2, [r3, #28]
      break;
 8004094:	e023      	b.n	80040de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb31 	bl	8004704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69d9      	ldr	r1, [r3, #28]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	021a      	lsls	r2, r3, #8
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	61da      	str	r2, [r3, #28]
      break;
 80040d6:	e002      	b.n	80040de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	75fb      	strb	r3, [r7, #23]
      break;
 80040dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIM_ConfigClockSource+0x1c>
 8004108:	2302      	movs	r3, #2
 800410a:	e0b4      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x186>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800412a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004144:	d03e      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800414a:	f200 8087 	bhi.w	800425c <HAL_TIM_ConfigClockSource+0x16c>
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004152:	f000 8086 	beq.w	8004262 <HAL_TIM_ConfigClockSource+0x172>
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415a:	d87f      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
 800415c:	2b70      	cmp	r3, #112	@ 0x70
 800415e:	d01a      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0xa6>
 8004160:	2b70      	cmp	r3, #112	@ 0x70
 8004162:	d87b      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
 8004164:	2b60      	cmp	r3, #96	@ 0x60
 8004166:	d050      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x11a>
 8004168:	2b60      	cmp	r3, #96	@ 0x60
 800416a:	d877      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
 800416c:	2b50      	cmp	r3, #80	@ 0x50
 800416e:	d03c      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0xfa>
 8004170:	2b50      	cmp	r3, #80	@ 0x50
 8004172:	d873      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	d058      	beq.n	800422a <HAL_TIM_ConfigClockSource+0x13a>
 8004178:	2b40      	cmp	r3, #64	@ 0x40
 800417a:	d86f      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
 800417c:	2b30      	cmp	r3, #48	@ 0x30
 800417e:	d064      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x15a>
 8004180:	2b30      	cmp	r3, #48	@ 0x30
 8004182:	d86b      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b20      	cmp	r3, #32
 8004186:	d060      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x15a>
 8004188:	2b20      	cmp	r3, #32
 800418a:	d867      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05c      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x15a>
 8004190:	2b10      	cmp	r3, #16
 8004192:	d05a      	beq.n	800424a <HAL_TIM_ConfigClockSource+0x15a>
 8004194:	e062      	b.n	800425c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041a6:	f000 fd39 	bl	8004c1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	609a      	str	r2, [r3, #8]
      break;
 80041c2:	e04f      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d4:	f000 fd22 	bl	8004c1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041e6:	609a      	str	r2, [r3, #8]
      break;
 80041e8:	e03c      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	461a      	mov	r2, r3
 80041f8:	f000 fbe0 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2150      	movs	r1, #80	@ 0x50
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fcef 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 8004208:	e02c      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004216:	461a      	mov	r2, r3
 8004218:	f000 fc3c 	bl	8004a94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2160      	movs	r1, #96	@ 0x60
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fcdf 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 8004228:	e01c      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	461a      	mov	r2, r3
 8004238:	f000 fbc0 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2140      	movs	r1, #64	@ 0x40
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fccf 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 8004248:	e00c      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f000 fcc6 	bl	8004be6 <TIM_ITRx_SetConfig>
      break;
 800425a:	e003      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e000      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004292:	2302      	movs	r3, #2
 8004294:	e031      	b.n	80042fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa81 	bl	80047b0 <TIM_SlaveTimer_SetConfig>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e018      	b.n	80042fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a43      	ldr	r2, [pc, #268]	@ (8004424 <TIM_Base_SetConfig+0x120>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004322:	d00f      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a40      	ldr	r2, [pc, #256]	@ (8004428 <TIM_Base_SetConfig+0x124>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00b      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3f      	ldr	r2, [pc, #252]	@ (800442c <TIM_Base_SetConfig+0x128>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a3e      	ldr	r2, [pc, #248]	@ (8004430 <TIM_Base_SetConfig+0x12c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a3d      	ldr	r2, [pc, #244]	@ (8004434 <TIM_Base_SetConfig+0x130>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d108      	bne.n	8004356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a32      	ldr	r2, [pc, #200]	@ (8004424 <TIM_Base_SetConfig+0x120>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02b      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004364:	d027      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2f      	ldr	r2, [pc, #188]	@ (8004428 <TIM_Base_SetConfig+0x124>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d023      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2e      	ldr	r2, [pc, #184]	@ (800442c <TIM_Base_SetConfig+0x128>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01f      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a2d      	ldr	r2, [pc, #180]	@ (8004430 <TIM_Base_SetConfig+0x12c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01b      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2c      	ldr	r2, [pc, #176]	@ (8004434 <TIM_Base_SetConfig+0x130>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d017      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2b      	ldr	r2, [pc, #172]	@ (8004438 <TIM_Base_SetConfig+0x134>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2a      	ldr	r2, [pc, #168]	@ (800443c <TIM_Base_SetConfig+0x138>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a29      	ldr	r2, [pc, #164]	@ (8004440 <TIM_Base_SetConfig+0x13c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a28      	ldr	r2, [pc, #160]	@ (8004444 <TIM_Base_SetConfig+0x140>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a27      	ldr	r2, [pc, #156]	@ (8004448 <TIM_Base_SetConfig+0x144>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a26      	ldr	r2, [pc, #152]	@ (800444c <TIM_Base_SetConfig+0x148>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004424 <TIM_Base_SetConfig+0x120>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0xf2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a10      	ldr	r2, [pc, #64]	@ (8004434 <TIM_Base_SetConfig+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d103      	bne.n	80043fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f043 0204 	orr.w	r2, r3, #4
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40010400 	.word	0x40010400
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800
 8004444:	40001800 	.word	0x40001800
 8004448:	40001c00 	.word	0x40001c00
 800444c:	40002000 	.word	0x40002000

08004450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f023 0201 	bic.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 0302 	bic.w	r3, r3, #2
 8004498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a20      	ldr	r2, [pc, #128]	@ (8004528 <TIM_OC1_SetConfig+0xd8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_OC1_SetConfig+0x64>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1f      	ldr	r2, [pc, #124]	@ (800452c <TIM_OC1_SetConfig+0xdc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10c      	bne.n	80044ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0308 	bic.w	r3, r3, #8
 80044ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a15      	ldr	r2, [pc, #84]	@ (8004528 <TIM_OC1_SetConfig+0xd8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_OC1_SetConfig+0x8e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <TIM_OC1_SetConfig+0xdc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400

08004530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f023 0210 	bic.w	r2, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0320 	bic.w	r3, r3, #32
 800457a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <TIM_OC2_SetConfig+0xe4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_OC2_SetConfig+0x68>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a21      	ldr	r2, [pc, #132]	@ (8004618 <TIM_OC2_SetConfig+0xe8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d10d      	bne.n	80045b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800459e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a17      	ldr	r2, [pc, #92]	@ (8004614 <TIM_OC2_SetConfig+0xe4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC2_SetConfig+0x94>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a16      	ldr	r2, [pc, #88]	@ (8004618 <TIM_OC2_SetConfig+0xe8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d113      	bne.n	80045ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400

0800461c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a21      	ldr	r2, [pc, #132]	@ (80046fc <TIM_OC3_SetConfig+0xe0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_OC3_SetConfig+0x66>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a20      	ldr	r2, [pc, #128]	@ (8004700 <TIM_OC3_SetConfig+0xe4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a16      	ldr	r2, [pc, #88]	@ (80046fc <TIM_OC3_SetConfig+0xe0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC3_SetConfig+0x92>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a15      	ldr	r2, [pc, #84]	@ (8004700 <TIM_OC3_SetConfig+0xe4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d113      	bne.n	80046d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	621a      	str	r2, [r3, #32]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010400 	.word	0x40010400

08004704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800474e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a12      	ldr	r2, [pc, #72]	@ (80047a8 <TIM_OC4_SetConfig+0xa4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_OC4_SetConfig+0x68>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a11      	ldr	r2, [pc, #68]	@ (80047ac <TIM_OC4_SetConfig+0xa8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d109      	bne.n	8004780 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	019b      	lsls	r3, r3, #6
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40010400 	.word	0x40010400

080047b0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047cc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b70      	cmp	r3, #112	@ 0x70
 80047f8:	d01a      	beq.n	8004830 <TIM_SlaveTimer_SetConfig+0x80>
 80047fa:	2b70      	cmp	r3, #112	@ 0x70
 80047fc:	d860      	bhi.n	80048c0 <TIM_SlaveTimer_SetConfig+0x110>
 80047fe:	2b60      	cmp	r3, #96	@ 0x60
 8004800:	d054      	beq.n	80048ac <TIM_SlaveTimer_SetConfig+0xfc>
 8004802:	2b60      	cmp	r3, #96	@ 0x60
 8004804:	d85c      	bhi.n	80048c0 <TIM_SlaveTimer_SetConfig+0x110>
 8004806:	2b50      	cmp	r3, #80	@ 0x50
 8004808:	d046      	beq.n	8004898 <TIM_SlaveTimer_SetConfig+0xe8>
 800480a:	2b50      	cmp	r3, #80	@ 0x50
 800480c:	d858      	bhi.n	80048c0 <TIM_SlaveTimer_SetConfig+0x110>
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d019      	beq.n	8004846 <TIM_SlaveTimer_SetConfig+0x96>
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d854      	bhi.n	80048c0 <TIM_SlaveTimer_SetConfig+0x110>
 8004816:	2b30      	cmp	r3, #48	@ 0x30
 8004818:	d055      	beq.n	80048c6 <TIM_SlaveTimer_SetConfig+0x116>
 800481a:	2b30      	cmp	r3, #48	@ 0x30
 800481c:	d850      	bhi.n	80048c0 <TIM_SlaveTimer_SetConfig+0x110>
 800481e:	2b20      	cmp	r3, #32
 8004820:	d051      	beq.n	80048c6 <TIM_SlaveTimer_SetConfig+0x116>
 8004822:	2b20      	cmp	r3, #32
 8004824:	d84c      	bhi.n	80048c0 <TIM_SlaveTimer_SetConfig+0x110>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d04d      	beq.n	80048c6 <TIM_SlaveTimer_SetConfig+0x116>
 800482a:	2b10      	cmp	r3, #16
 800482c:	d04b      	beq.n	80048c6 <TIM_SlaveTimer_SetConfig+0x116>
 800482e:	e047      	b.n	80048c0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004840:	f000 f9ec 	bl	8004c1c <TIM_ETR_SetConfig>
      break;
 8004844:	e040      	b.n	80048c8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d101      	bne.n	8004852 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e03b      	b.n	80048ca <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004878:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
      break;
 8004896:	e017      	b.n	80048c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a4:	461a      	mov	r2, r3
 80048a6:	f000 f889 	bl	80049bc <TIM_TI1_ConfigInputStage>
      break;
 80048aa:	e00d      	b.n	80048c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b8:	461a      	mov	r2, r3
 80048ba:	f000 f8eb 	bl	8004a94 <TIM_TI2_ConfigInputStage>
      break;
 80048be:	e003      	b.n	80048c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
      break;
 80048c4:	e000      	b.n	80048c8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80048c6:	bf00      	nop
  }

  return status;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f023 0201 	bic.w	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a28      	ldr	r2, [pc, #160]	@ (80049a0 <TIM_TI1_SetConfig+0xcc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01b      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004908:	d017      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a25      	ldr	r2, [pc, #148]	@ (80049a4 <TIM_TI1_SetConfig+0xd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a24      	ldr	r2, [pc, #144]	@ (80049a8 <TIM_TI1_SetConfig+0xd4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a23      	ldr	r2, [pc, #140]	@ (80049ac <TIM_TI1_SetConfig+0xd8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <TIM_TI1_SetConfig+0xdc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a21      	ldr	r2, [pc, #132]	@ (80049b4 <TIM_TI1_SetConfig+0xe0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_TI1_SetConfig+0x66>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a20      	ldr	r2, [pc, #128]	@ (80049b8 <TIM_TI1_SetConfig+0xe4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <TIM_TI1_SetConfig+0x6a>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <TIM_TI1_SetConfig+0x6c>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e003      	b.n	800495e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	b2db      	uxtb	r3, r3
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f023 030a 	bic.w	r3, r3, #10
 8004978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f003 030a 	and.w	r3, r3, #10
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40001800 	.word	0x40001800

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 030a 	bic.w	r3, r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0210 	bic.w	r2, r3, #16
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	031b      	lsls	r3, r3, #12
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0210 	bic.w	r2, r3, #16
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	031b      	lsls	r3, r3, #12
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	621a      	str	r2, [r3, #32]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004baa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	031b      	lsls	r3, r3, #12
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	031b      	lsls	r3, r3, #12
 8004bc4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f043 0307 	orr.w	r3, r3, #7
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	609a      	str	r2, [r3, #8]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2201      	movs	r2, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	401a      	ands	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1a      	ldr	r2, [r3, #32]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	621a      	str	r2, [r3, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e05a      	b.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a21      	ldr	r2, [pc, #132]	@ (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d022      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0c:	d01d      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1d      	ldr	r2, [pc, #116]	@ (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1a      	ldr	r2, [pc, #104]	@ (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	@ (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a15      	ldr	r2, [pc, #84]	@ (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10c      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40010400 	.word	0x40010400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40001800 	.word	0x40001800

08004da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e03d      	b.n	8004e38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e042      	b.n	8004edc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fc fbf6 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	@ 0x24
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f973 	bl	8005174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	@ 0x28
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d175      	bne.n	8004ff0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_UART_Transmit+0x2c>
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e06e      	b.n	8004ff2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2221      	movs	r2, #33	@ 0x21
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f22:	f7fc fd09 	bl	8001938 <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3c:	d108      	bne.n	8004f50 <HAL_UART_Transmit+0x6c>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d104      	bne.n	8004f50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	e003      	b.n	8004f58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f58:	e02e      	b.n	8004fb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2180      	movs	r1, #128	@ 0x80
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f848 	bl	8004ffa <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e03a      	b.n	8004ff2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	3302      	adds	r3, #2
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	e007      	b.n	8004faa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1cb      	bne.n	8004f5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2140      	movs	r1, #64	@ 0x40
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f814 	bl	8004ffa <UART_WaitOnFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e006      	b.n	8004ff2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b086      	sub	sp, #24
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	4613      	mov	r3, r2
 8005008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500a:	e03b      	b.n	8005084 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d037      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005014:	f7fc fc90 	bl	8001938 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	6a3a      	ldr	r2, [r7, #32]
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <UART_WaitOnFlagUntilTimeout+0x30>
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e03a      	b.n	80050a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d023      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x8a>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b80      	cmp	r3, #128	@ 0x80
 8005040:	d020      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b40      	cmp	r3, #64	@ 0x40
 8005046:	d01d      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b08      	cmp	r3, #8
 8005054:	d116      	bne.n	8005084 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f81d 	bl	80050ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2208      	movs	r2, #8
 8005076:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e00f      	b.n	80050a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d0b4      	beq.n	800500c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b095      	sub	sp, #84	@ 0x54
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80050d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005108:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800510a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800510e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005120:	2b01      	cmp	r3, #1
 8005122:	d119      	bne.n	8005158 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	60bb      	str	r3, [r7, #8]
   return(result);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0310 	bic.w	r3, r3, #16
 800513a:	647b      	str	r3, [r7, #68]	@ 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005144:	61ba      	str	r2, [r7, #24]
 8005146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6979      	ldr	r1, [r7, #20]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e5      	bne.n	8005124 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005166:	bf00      	nop
 8005168:	3754      	adds	r7, #84	@ 0x54
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005178:	b0c0      	sub	sp, #256	@ 0x100
 800517a:	af00      	add	r7, sp, #0
 800517c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	68d9      	ldr	r1, [r3, #12]
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	ea40 0301 	orr.w	r3, r0, r1
 800519c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051cc:	f021 010c 	bic.w	r1, r1, #12
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051da:	430b      	orrs	r3, r1
 80051dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ee:	6999      	ldr	r1, [r3, #24]
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	ea40 0301 	orr.w	r3, r0, r1
 80051fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b8f      	ldr	r3, [pc, #572]	@ (8005440 <UART_SetConfig+0x2cc>)
 8005204:	429a      	cmp	r2, r3
 8005206:	d005      	beq.n	8005214 <UART_SetConfig+0xa0>
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b8d      	ldr	r3, [pc, #564]	@ (8005444 <UART_SetConfig+0x2d0>)
 8005210:	429a      	cmp	r2, r3
 8005212:	d104      	bne.n	800521e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005214:	f7fd ff62 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8005218:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800521c:	e003      	b.n	8005226 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800521e:	f7fd ff49 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 8005222:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005230:	f040 810c 	bne.w	800544c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005238:	2200      	movs	r2, #0
 800523a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800523e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005242:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005246:	4622      	mov	r2, r4
 8005248:	462b      	mov	r3, r5
 800524a:	1891      	adds	r1, r2, r2
 800524c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800524e:	415b      	adcs	r3, r3
 8005250:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005252:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005256:	4621      	mov	r1, r4
 8005258:	eb12 0801 	adds.w	r8, r2, r1
 800525c:	4629      	mov	r1, r5
 800525e:	eb43 0901 	adc.w	r9, r3, r1
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800526e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005272:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005276:	4690      	mov	r8, r2
 8005278:	4699      	mov	r9, r3
 800527a:	4623      	mov	r3, r4
 800527c:	eb18 0303 	adds.w	r3, r8, r3
 8005280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005284:	462b      	mov	r3, r5
 8005286:	eb49 0303 	adc.w	r3, r9, r3
 800528a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800529a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800529e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052a2:	460b      	mov	r3, r1
 80052a4:	18db      	adds	r3, r3, r3
 80052a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a8:	4613      	mov	r3, r2
 80052aa:	eb42 0303 	adc.w	r3, r2, r3
 80052ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80052b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052b8:	f7fa fffa 	bl	80002b0 <__aeabi_uldivmod>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4b61      	ldr	r3, [pc, #388]	@ (8005448 <UART_SetConfig+0x2d4>)
 80052c2:	fba3 2302 	umull	r2, r3, r3, r2
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	011c      	lsls	r4, r3, #4
 80052ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052dc:	4642      	mov	r2, r8
 80052de:	464b      	mov	r3, r9
 80052e0:	1891      	adds	r1, r2, r2
 80052e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052e4:	415b      	adcs	r3, r3
 80052e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052ec:	4641      	mov	r1, r8
 80052ee:	eb12 0a01 	adds.w	sl, r2, r1
 80052f2:	4649      	mov	r1, r9
 80052f4:	eb43 0b01 	adc.w	fp, r3, r1
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005304:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800530c:	4692      	mov	sl, r2
 800530e:	469b      	mov	fp, r3
 8005310:	4643      	mov	r3, r8
 8005312:	eb1a 0303 	adds.w	r3, sl, r3
 8005316:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800531a:	464b      	mov	r3, r9
 800531c:	eb4b 0303 	adc.w	r3, fp, r3
 8005320:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005330:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005334:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005338:	460b      	mov	r3, r1
 800533a:	18db      	adds	r3, r3, r3
 800533c:	643b      	str	r3, [r7, #64]	@ 0x40
 800533e:	4613      	mov	r3, r2
 8005340:	eb42 0303 	adc.w	r3, r2, r3
 8005344:	647b      	str	r3, [r7, #68]	@ 0x44
 8005346:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800534a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800534e:	f7fa ffaf 	bl	80002b0 <__aeabi_uldivmod>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4611      	mov	r1, r2
 8005358:	4b3b      	ldr	r3, [pc, #236]	@ (8005448 <UART_SetConfig+0x2d4>)
 800535a:	fba3 2301 	umull	r2, r3, r3, r1
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2264      	movs	r2, #100	@ 0x64
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	1acb      	subs	r3, r1, r3
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800536e:	4b36      	ldr	r3, [pc, #216]	@ (8005448 <UART_SetConfig+0x2d4>)
 8005370:	fba3 2302 	umull	r2, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800537c:	441c      	add	r4, r3
 800537e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005388:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800538c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005398:	415b      	adcs	r3, r3
 800539a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800539c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053a0:	4641      	mov	r1, r8
 80053a2:	1851      	adds	r1, r2, r1
 80053a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80053a6:	4649      	mov	r1, r9
 80053a8:	414b      	adcs	r3, r1
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053b8:	4659      	mov	r1, fp
 80053ba:	00cb      	lsls	r3, r1, #3
 80053bc:	4651      	mov	r1, sl
 80053be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c2:	4651      	mov	r1, sl
 80053c4:	00ca      	lsls	r2, r1, #3
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	4642      	mov	r2, r8
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053d4:	464b      	mov	r3, r9
 80053d6:	460a      	mov	r2, r1
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053f4:	460b      	mov	r3, r1
 80053f6:	18db      	adds	r3, r3, r3
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fa:	4613      	mov	r3, r2
 80053fc:	eb42 0303 	adc.w	r3, r2, r3
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005406:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800540a:	f7fa ff51 	bl	80002b0 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4b0d      	ldr	r3, [pc, #52]	@ (8005448 <UART_SetConfig+0x2d4>)
 8005414:	fba3 1302 	umull	r1, r3, r3, r2
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	2164      	movs	r1, #100	@ 0x64
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	3332      	adds	r3, #50	@ 0x32
 8005426:	4a08      	ldr	r2, [pc, #32]	@ (8005448 <UART_SetConfig+0x2d4>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	f003 0207 	and.w	r2, r3, #7
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4422      	add	r2, r4
 800543a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800543c:	e106      	b.n	800564c <UART_SetConfig+0x4d8>
 800543e:	bf00      	nop
 8005440:	40011000 	.word	0x40011000
 8005444:	40011400 	.word	0x40011400
 8005448:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800544c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005450:	2200      	movs	r2, #0
 8005452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005456:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800545a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800545e:	4642      	mov	r2, r8
 8005460:	464b      	mov	r3, r9
 8005462:	1891      	adds	r1, r2, r2
 8005464:	6239      	str	r1, [r7, #32]
 8005466:	415b      	adcs	r3, r3
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
 800546a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800546e:	4641      	mov	r1, r8
 8005470:	1854      	adds	r4, r2, r1
 8005472:	4649      	mov	r1, r9
 8005474:	eb43 0501 	adc.w	r5, r3, r1
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	00eb      	lsls	r3, r5, #3
 8005482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005486:	00e2      	lsls	r2, r4, #3
 8005488:	4614      	mov	r4, r2
 800548a:	461d      	mov	r5, r3
 800548c:	4643      	mov	r3, r8
 800548e:	18e3      	adds	r3, r4, r3
 8005490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005494:	464b      	mov	r3, r9
 8005496:	eb45 0303 	adc.w	r3, r5, r3
 800549a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054ba:	4629      	mov	r1, r5
 80054bc:	008b      	lsls	r3, r1, #2
 80054be:	4621      	mov	r1, r4
 80054c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c4:	4621      	mov	r1, r4
 80054c6:	008a      	lsls	r2, r1, #2
 80054c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054cc:	f7fa fef0 	bl	80002b0 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4b60      	ldr	r3, [pc, #384]	@ (8005658 <UART_SetConfig+0x4e4>)
 80054d6:	fba3 2302 	umull	r2, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	011c      	lsls	r4, r3, #4
 80054de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	1891      	adds	r1, r2, r2
 80054f6:	61b9      	str	r1, [r7, #24]
 80054f8:	415b      	adcs	r3, r3
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005500:	4641      	mov	r1, r8
 8005502:	1851      	adds	r1, r2, r1
 8005504:	6139      	str	r1, [r7, #16]
 8005506:	4649      	mov	r1, r9
 8005508:	414b      	adcs	r3, r1
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005518:	4659      	mov	r1, fp
 800551a:	00cb      	lsls	r3, r1, #3
 800551c:	4651      	mov	r1, sl
 800551e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005522:	4651      	mov	r1, sl
 8005524:	00ca      	lsls	r2, r1, #3
 8005526:	4610      	mov	r0, r2
 8005528:	4619      	mov	r1, r3
 800552a:	4603      	mov	r3, r0
 800552c:	4642      	mov	r2, r8
 800552e:	189b      	adds	r3, r3, r2
 8005530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005534:	464b      	mov	r3, r9
 8005536:	460a      	mov	r2, r1
 8005538:	eb42 0303 	adc.w	r3, r2, r3
 800553c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	67bb      	str	r3, [r7, #120]	@ 0x78
 800554a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005558:	4649      	mov	r1, r9
 800555a:	008b      	lsls	r3, r1, #2
 800555c:	4641      	mov	r1, r8
 800555e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005562:	4641      	mov	r1, r8
 8005564:	008a      	lsls	r2, r1, #2
 8005566:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800556a:	f7fa fea1 	bl	80002b0 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4611      	mov	r1, r2
 8005574:	4b38      	ldr	r3, [pc, #224]	@ (8005658 <UART_SetConfig+0x4e4>)
 8005576:	fba3 2301 	umull	r2, r3, r3, r1
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	2264      	movs	r2, #100	@ 0x64
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	1acb      	subs	r3, r1, r3
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	3332      	adds	r3, #50	@ 0x32
 8005588:	4a33      	ldr	r2, [pc, #204]	@ (8005658 <UART_SetConfig+0x4e4>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005594:	441c      	add	r4, r3
 8005596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800559a:	2200      	movs	r2, #0
 800559c:	673b      	str	r3, [r7, #112]	@ 0x70
 800559e:	677a      	str	r2, [r7, #116]	@ 0x74
 80055a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	1891      	adds	r1, r2, r2
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	415b      	adcs	r3, r3
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055b4:	4641      	mov	r1, r8
 80055b6:	1851      	adds	r1, r2, r1
 80055b8:	6039      	str	r1, [r7, #0]
 80055ba:	4649      	mov	r1, r9
 80055bc:	414b      	adcs	r3, r1
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055cc:	4659      	mov	r1, fp
 80055ce:	00cb      	lsls	r3, r1, #3
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d6:	4651      	mov	r1, sl
 80055d8:	00ca      	lsls	r2, r1, #3
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	4642      	mov	r2, r8
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055e6:	464b      	mov	r3, r9
 80055e8:	460a      	mov	r2, r1
 80055ea:	eb42 0303 	adc.w	r3, r2, r3
 80055ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80055fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005608:	4649      	mov	r1, r9
 800560a:	008b      	lsls	r3, r1, #2
 800560c:	4641      	mov	r1, r8
 800560e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005612:	4641      	mov	r1, r8
 8005614:	008a      	lsls	r2, r1, #2
 8005616:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800561a:	f7fa fe49 	bl	80002b0 <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <UART_SetConfig+0x4e4>)
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2164      	movs	r1, #100	@ 0x64
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	3332      	adds	r3, #50	@ 0x32
 8005636:	4a08      	ldr	r2, [pc, #32]	@ (8005658 <UART_SetConfig+0x4e4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4422      	add	r2, r4
 800564a:	609a      	str	r2, [r3, #8]
}
 800564c:	bf00      	nop
 800564e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005652:	46bd      	mov	sp, r7
 8005654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005658:	51eb851f 	.word	0x51eb851f

0800565c <sniprintf>:
 800565c:	b40c      	push	{r2, r3}
 800565e:	b530      	push	{r4, r5, lr}
 8005660:	4b17      	ldr	r3, [pc, #92]	@ (80056c0 <sniprintf+0x64>)
 8005662:	1e0c      	subs	r4, r1, #0
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	b09d      	sub	sp, #116	@ 0x74
 8005668:	da08      	bge.n	800567c <sniprintf+0x20>
 800566a:	238b      	movs	r3, #139	@ 0x8b
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	f04f 30ff 	mov.w	r0, #4294967295
 8005672:	b01d      	add	sp, #116	@ 0x74
 8005674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005678:	b002      	add	sp, #8
 800567a:	4770      	bx	lr
 800567c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005680:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005684:	bf14      	ite	ne
 8005686:	f104 33ff 	addne.w	r3, r4, #4294967295
 800568a:	4623      	moveq	r3, r4
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	9307      	str	r3, [sp, #28]
 8005690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005694:	9002      	str	r0, [sp, #8]
 8005696:	9006      	str	r0, [sp, #24]
 8005698:	f8ad 3016 	strh.w	r3, [sp, #22]
 800569c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800569e:	ab21      	add	r3, sp, #132	@ 0x84
 80056a0:	a902      	add	r1, sp, #8
 80056a2:	4628      	mov	r0, r5
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	f000 f995 	bl	80059d4 <_svfiprintf_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	bfbc      	itt	lt
 80056ae:	238b      	movlt	r3, #139	@ 0x8b
 80056b0:	602b      	strlt	r3, [r5, #0]
 80056b2:	2c00      	cmp	r4, #0
 80056b4:	d0dd      	beq.n	8005672 <sniprintf+0x16>
 80056b6:	9b02      	ldr	r3, [sp, #8]
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e7d9      	b.n	8005672 <sniprintf+0x16>
 80056be:	bf00      	nop
 80056c0:	2000000c 	.word	0x2000000c

080056c4 <memset>:
 80056c4:	4402      	add	r2, r0
 80056c6:	4603      	mov	r3, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <memset+0xa>
 80056cc:	4770      	bx	lr
 80056ce:	f803 1b01 	strb.w	r1, [r3], #1
 80056d2:	e7f9      	b.n	80056c8 <memset+0x4>

080056d4 <__errno>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	@ (80056dc <__errno+0x8>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	2000000c 	.word	0x2000000c

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	@ (800571c <__libc_init_array+0x3c>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2600      	movs	r6, #0
 80056ec:	42a6      	cmp	r6, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005724 <__libc_init_array+0x44>)
 80056f4:	f000 fc66 	bl	8005fc4 <_init>
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2600      	movs	r6, #0
 80056fe:	42a6      	cmp	r6, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f855 3b04 	ldr.w	r3, [r5], #4
 8005708:	4798      	blx	r3
 800570a:	3601      	adds	r6, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005712:	4798      	blx	r3
 8005714:	3601      	adds	r6, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	080060bc 	.word	0x080060bc
 800571c:	080060bc 	.word	0x080060bc
 8005720:	080060bc 	.word	0x080060bc
 8005724:	080060c0 	.word	0x080060c0

08005728 <__retarget_lock_acquire_recursive>:
 8005728:	4770      	bx	lr

0800572a <__retarget_lock_release_recursive>:
 800572a:	4770      	bx	lr

0800572c <_free_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4605      	mov	r5, r0
 8005730:	2900      	cmp	r1, #0
 8005732:	d041      	beq.n	80057b8 <_free_r+0x8c>
 8005734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005738:	1f0c      	subs	r4, r1, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfb8      	it	lt
 800573e:	18e4      	addlt	r4, r4, r3
 8005740:	f000 f8e0 	bl	8005904 <__malloc_lock>
 8005744:	4a1d      	ldr	r2, [pc, #116]	@ (80057bc <_free_r+0x90>)
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	b933      	cbnz	r3, 8005758 <_free_r+0x2c>
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	6014      	str	r4, [r2, #0]
 800574e:	4628      	mov	r0, r5
 8005750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005754:	f000 b8dc 	b.w	8005910 <__malloc_unlock>
 8005758:	42a3      	cmp	r3, r4
 800575a:	d908      	bls.n	800576e <_free_r+0x42>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	1821      	adds	r1, r4, r0
 8005760:	428b      	cmp	r3, r1
 8005762:	bf01      	itttt	eq
 8005764:	6819      	ldreq	r1, [r3, #0]
 8005766:	685b      	ldreq	r3, [r3, #4]
 8005768:	1809      	addeq	r1, r1, r0
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	e7ed      	b.n	800574a <_free_r+0x1e>
 800576e:	461a      	mov	r2, r3
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b10b      	cbz	r3, 8005778 <_free_r+0x4c>
 8005774:	42a3      	cmp	r3, r4
 8005776:	d9fa      	bls.n	800576e <_free_r+0x42>
 8005778:	6811      	ldr	r1, [r2, #0]
 800577a:	1850      	adds	r0, r2, r1
 800577c:	42a0      	cmp	r0, r4
 800577e:	d10b      	bne.n	8005798 <_free_r+0x6c>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	4401      	add	r1, r0
 8005784:	1850      	adds	r0, r2, r1
 8005786:	4283      	cmp	r3, r0
 8005788:	6011      	str	r1, [r2, #0]
 800578a:	d1e0      	bne.n	800574e <_free_r+0x22>
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	6053      	str	r3, [r2, #4]
 8005792:	4408      	add	r0, r1
 8005794:	6010      	str	r0, [r2, #0]
 8005796:	e7da      	b.n	800574e <_free_r+0x22>
 8005798:	d902      	bls.n	80057a0 <_free_r+0x74>
 800579a:	230c      	movs	r3, #12
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	e7d6      	b.n	800574e <_free_r+0x22>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf04      	itt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	bf04      	itt	eq
 80057b0:	1809      	addeq	r1, r1, r0
 80057b2:	6021      	streq	r1, [r4, #0]
 80057b4:	6054      	str	r4, [r2, #4]
 80057b6:	e7ca      	b.n	800574e <_free_r+0x22>
 80057b8:	bd38      	pop	{r3, r4, r5, pc}
 80057ba:	bf00      	nop
 80057bc:	20003834 	.word	0x20003834

080057c0 <sbrk_aligned>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005800 <sbrk_aligned+0x40>)
 80057c4:	460c      	mov	r4, r1
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	4605      	mov	r5, r0
 80057ca:	b911      	cbnz	r1, 80057d2 <sbrk_aligned+0x12>
 80057cc:	f000 fba6 	bl	8005f1c <_sbrk_r>
 80057d0:	6030      	str	r0, [r6, #0]
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 fba1 	bl	8005f1c <_sbrk_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d103      	bne.n	80057e6 <sbrk_aligned+0x26>
 80057de:	f04f 34ff 	mov.w	r4, #4294967295
 80057e2:	4620      	mov	r0, r4
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d0f8      	beq.n	80057e2 <sbrk_aligned+0x22>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 fb92 	bl	8005f1c <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d1f2      	bne.n	80057e2 <sbrk_aligned+0x22>
 80057fc:	e7ef      	b.n	80057de <sbrk_aligned+0x1e>
 80057fe:	bf00      	nop
 8005800:	20003830 	.word	0x20003830

08005804 <_malloc_r>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	1ccd      	adds	r5, r1, #3
 800580a:	f025 0503 	bic.w	r5, r5, #3
 800580e:	3508      	adds	r5, #8
 8005810:	2d0c      	cmp	r5, #12
 8005812:	bf38      	it	cc
 8005814:	250c      	movcc	r5, #12
 8005816:	2d00      	cmp	r5, #0
 8005818:	4606      	mov	r6, r0
 800581a:	db01      	blt.n	8005820 <_malloc_r+0x1c>
 800581c:	42a9      	cmp	r1, r5
 800581e:	d904      	bls.n	800582a <_malloc_r+0x26>
 8005820:	230c      	movs	r3, #12
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005900 <_malloc_r+0xfc>
 800582e:	f000 f869 	bl	8005904 <__malloc_lock>
 8005832:	f8d8 3000 	ldr.w	r3, [r8]
 8005836:	461c      	mov	r4, r3
 8005838:	bb44      	cbnz	r4, 800588c <_malloc_r+0x88>
 800583a:	4629      	mov	r1, r5
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff ffbf 	bl	80057c0 <sbrk_aligned>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	4604      	mov	r4, r0
 8005846:	d158      	bne.n	80058fa <_malloc_r+0xf6>
 8005848:	f8d8 4000 	ldr.w	r4, [r8]
 800584c:	4627      	mov	r7, r4
 800584e:	2f00      	cmp	r7, #0
 8005850:	d143      	bne.n	80058da <_malloc_r+0xd6>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d04b      	beq.n	80058ee <_malloc_r+0xea>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	eb04 0903 	add.w	r9, r4, r3
 8005860:	f000 fb5c 	bl	8005f1c <_sbrk_r>
 8005864:	4581      	cmp	r9, r0
 8005866:	d142      	bne.n	80058ee <_malloc_r+0xea>
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	1a6d      	subs	r5, r5, r1
 800586c:	4629      	mov	r1, r5
 800586e:	4630      	mov	r0, r6
 8005870:	f7ff ffa6 	bl	80057c0 <sbrk_aligned>
 8005874:	3001      	adds	r0, #1
 8005876:	d03a      	beq.n	80058ee <_malloc_r+0xea>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	442b      	add	r3, r5
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	f8d8 3000 	ldr.w	r3, [r8]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	bb62      	cbnz	r2, 80058e0 <_malloc_r+0xdc>
 8005886:	f8c8 7000 	str.w	r7, [r8]
 800588a:	e00f      	b.n	80058ac <_malloc_r+0xa8>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	1b52      	subs	r2, r2, r5
 8005890:	d420      	bmi.n	80058d4 <_malloc_r+0xd0>
 8005892:	2a0b      	cmp	r2, #11
 8005894:	d917      	bls.n	80058c6 <_malloc_r+0xc2>
 8005896:	1961      	adds	r1, r4, r5
 8005898:	42a3      	cmp	r3, r4
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	6059      	strne	r1, [r3, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	bf08      	it	eq
 80058a4:	f8c8 1000 	streq.w	r1, [r8]
 80058a8:	5162      	str	r2, [r4, r5]
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f82f 	bl	8005910 <__malloc_unlock>
 80058b2:	f104 000b 	add.w	r0, r4, #11
 80058b6:	1d23      	adds	r3, r4, #4
 80058b8:	f020 0007 	bic.w	r0, r0, #7
 80058bc:	1ac2      	subs	r2, r0, r3
 80058be:	bf1c      	itt	ne
 80058c0:	1a1b      	subne	r3, r3, r0
 80058c2:	50a3      	strne	r3, [r4, r2]
 80058c4:	e7af      	b.n	8005826 <_malloc_r+0x22>
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	bf0c      	ite	eq
 80058cc:	f8c8 2000 	streq.w	r2, [r8]
 80058d0:	605a      	strne	r2, [r3, #4]
 80058d2:	e7eb      	b.n	80058ac <_malloc_r+0xa8>
 80058d4:	4623      	mov	r3, r4
 80058d6:	6864      	ldr	r4, [r4, #4]
 80058d8:	e7ae      	b.n	8005838 <_malloc_r+0x34>
 80058da:	463c      	mov	r4, r7
 80058dc:	687f      	ldr	r7, [r7, #4]
 80058de:	e7b6      	b.n	800584e <_malloc_r+0x4a>
 80058e0:	461a      	mov	r2, r3
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d1fb      	bne.n	80058e0 <_malloc_r+0xdc>
 80058e8:	2300      	movs	r3, #0
 80058ea:	6053      	str	r3, [r2, #4]
 80058ec:	e7de      	b.n	80058ac <_malloc_r+0xa8>
 80058ee:	230c      	movs	r3, #12
 80058f0:	6033      	str	r3, [r6, #0]
 80058f2:	4630      	mov	r0, r6
 80058f4:	f000 f80c 	bl	8005910 <__malloc_unlock>
 80058f8:	e794      	b.n	8005824 <_malloc_r+0x20>
 80058fa:	6005      	str	r5, [r0, #0]
 80058fc:	e7d6      	b.n	80058ac <_malloc_r+0xa8>
 80058fe:	bf00      	nop
 8005900:	20003834 	.word	0x20003834

08005904 <__malloc_lock>:
 8005904:	4801      	ldr	r0, [pc, #4]	@ (800590c <__malloc_lock+0x8>)
 8005906:	f7ff bf0f 	b.w	8005728 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	2000382c 	.word	0x2000382c

08005910 <__malloc_unlock>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__malloc_unlock+0x8>)
 8005912:	f7ff bf0a 	b.w	800572a <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	2000382c 	.word	0x2000382c

0800591c <__ssputs_r>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	688e      	ldr	r6, [r1, #8]
 8005922:	461f      	mov	r7, r3
 8005924:	42be      	cmp	r6, r7
 8005926:	680b      	ldr	r3, [r1, #0]
 8005928:	4682      	mov	sl, r0
 800592a:	460c      	mov	r4, r1
 800592c:	4690      	mov	r8, r2
 800592e:	d82d      	bhi.n	800598c <__ssputs_r+0x70>
 8005930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005938:	d026      	beq.n	8005988 <__ssputs_r+0x6c>
 800593a:	6965      	ldr	r5, [r4, #20]
 800593c:	6909      	ldr	r1, [r1, #16]
 800593e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005942:	eba3 0901 	sub.w	r9, r3, r1
 8005946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800594a:	1c7b      	adds	r3, r7, #1
 800594c:	444b      	add	r3, r9
 800594e:	106d      	asrs	r5, r5, #1
 8005950:	429d      	cmp	r5, r3
 8005952:	bf38      	it	cc
 8005954:	461d      	movcc	r5, r3
 8005956:	0553      	lsls	r3, r2, #21
 8005958:	d527      	bpl.n	80059aa <__ssputs_r+0x8e>
 800595a:	4629      	mov	r1, r5
 800595c:	f7ff ff52 	bl	8005804 <_malloc_r>
 8005960:	4606      	mov	r6, r0
 8005962:	b360      	cbz	r0, 80059be <__ssputs_r+0xa2>
 8005964:	6921      	ldr	r1, [r4, #16]
 8005966:	464a      	mov	r2, r9
 8005968:	f000 fae8 	bl	8005f3c <memcpy>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	6126      	str	r6, [r4, #16]
 800597a:	6165      	str	r5, [r4, #20]
 800597c:	444e      	add	r6, r9
 800597e:	eba5 0509 	sub.w	r5, r5, r9
 8005982:	6026      	str	r6, [r4, #0]
 8005984:	60a5      	str	r5, [r4, #8]
 8005986:	463e      	mov	r6, r7
 8005988:	42be      	cmp	r6, r7
 800598a:	d900      	bls.n	800598e <__ssputs_r+0x72>
 800598c:	463e      	mov	r6, r7
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	4632      	mov	r2, r6
 8005992:	4641      	mov	r1, r8
 8005994:	f000 faa8 	bl	8005ee8 <memmove>
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	1b9b      	subs	r3, r3, r6
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	4433      	add	r3, r6
 80059a2:	6023      	str	r3, [r4, #0]
 80059a4:	2000      	movs	r0, #0
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	462a      	mov	r2, r5
 80059ac:	f000 fad4 	bl	8005f58 <_realloc_r>
 80059b0:	4606      	mov	r6, r0
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d1e0      	bne.n	8005978 <__ssputs_r+0x5c>
 80059b6:	6921      	ldr	r1, [r4, #16]
 80059b8:	4650      	mov	r0, sl
 80059ba:	f7ff feb7 	bl	800572c <_free_r>
 80059be:	230c      	movs	r3, #12
 80059c0:	f8ca 3000 	str.w	r3, [sl]
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	e7e9      	b.n	80059a6 <__ssputs_r+0x8a>
	...

080059d4 <_svfiprintf_r>:
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	4698      	mov	r8, r3
 80059da:	898b      	ldrh	r3, [r1, #12]
 80059dc:	061b      	lsls	r3, r3, #24
 80059de:	b09d      	sub	sp, #116	@ 0x74
 80059e0:	4607      	mov	r7, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	d510      	bpl.n	8005a0a <_svfiprintf_r+0x36>
 80059e8:	690b      	ldr	r3, [r1, #16]
 80059ea:	b973      	cbnz	r3, 8005a0a <_svfiprintf_r+0x36>
 80059ec:	2140      	movs	r1, #64	@ 0x40
 80059ee:	f7ff ff09 	bl	8005804 <_malloc_r>
 80059f2:	6028      	str	r0, [r5, #0]
 80059f4:	6128      	str	r0, [r5, #16]
 80059f6:	b930      	cbnz	r0, 8005a06 <_svfiprintf_r+0x32>
 80059f8:	230c      	movs	r3, #12
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	b01d      	add	sp, #116	@ 0x74
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	2340      	movs	r3, #64	@ 0x40
 8005a08:	616b      	str	r3, [r5, #20]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a0e:	2320      	movs	r3, #32
 8005a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a18:	2330      	movs	r3, #48	@ 0x30
 8005a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bb8 <_svfiprintf_r+0x1e4>
 8005a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a22:	f04f 0901 	mov.w	r9, #1
 8005a26:	4623      	mov	r3, r4
 8005a28:	469a      	mov	sl, r3
 8005a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a2e:	b10a      	cbz	r2, 8005a34 <_svfiprintf_r+0x60>
 8005a30:	2a25      	cmp	r2, #37	@ 0x25
 8005a32:	d1f9      	bne.n	8005a28 <_svfiprintf_r+0x54>
 8005a34:	ebba 0b04 	subs.w	fp, sl, r4
 8005a38:	d00b      	beq.n	8005a52 <_svfiprintf_r+0x7e>
 8005a3a:	465b      	mov	r3, fp
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4638      	mov	r0, r7
 8005a42:	f7ff ff6b 	bl	800591c <__ssputs_r>
 8005a46:	3001      	adds	r0, #1
 8005a48:	f000 80a7 	beq.w	8005b9a <_svfiprintf_r+0x1c6>
 8005a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a4e:	445a      	add	r2, fp
 8005a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a52:	f89a 3000 	ldrb.w	r3, [sl]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 809f 	beq.w	8005b9a <_svfiprintf_r+0x1c6>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a66:	f10a 0a01 	add.w	sl, sl, #1
 8005a6a:	9304      	str	r3, [sp, #16]
 8005a6c:	9307      	str	r3, [sp, #28]
 8005a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a74:	4654      	mov	r4, sl
 8005a76:	2205      	movs	r2, #5
 8005a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7c:	484e      	ldr	r0, [pc, #312]	@ (8005bb8 <_svfiprintf_r+0x1e4>)
 8005a7e:	f7fa fbc7 	bl	8000210 <memchr>
 8005a82:	9a04      	ldr	r2, [sp, #16]
 8005a84:	b9d8      	cbnz	r0, 8005abe <_svfiprintf_r+0xea>
 8005a86:	06d0      	lsls	r0, r2, #27
 8005a88:	bf44      	itt	mi
 8005a8a:	2320      	movmi	r3, #32
 8005a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a90:	0711      	lsls	r1, r2, #28
 8005a92:	bf44      	itt	mi
 8005a94:	232b      	movmi	r3, #43	@ 0x2b
 8005a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa0:	d015      	beq.n	8005ace <_svfiprintf_r+0xfa>
 8005aa2:	9a07      	ldr	r2, [sp, #28]
 8005aa4:	4654      	mov	r4, sl
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f04f 0c0a 	mov.w	ip, #10
 8005aac:	4621      	mov	r1, r4
 8005aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ab2:	3b30      	subs	r3, #48	@ 0x30
 8005ab4:	2b09      	cmp	r3, #9
 8005ab6:	d94b      	bls.n	8005b50 <_svfiprintf_r+0x17c>
 8005ab8:	b1b0      	cbz	r0, 8005ae8 <_svfiprintf_r+0x114>
 8005aba:	9207      	str	r2, [sp, #28]
 8005abc:	e014      	b.n	8005ae8 <_svfiprintf_r+0x114>
 8005abe:	eba0 0308 	sub.w	r3, r0, r8
 8005ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	9304      	str	r3, [sp, #16]
 8005aca:	46a2      	mov	sl, r4
 8005acc:	e7d2      	b.n	8005a74 <_svfiprintf_r+0xa0>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	9103      	str	r1, [sp, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfbb      	ittet	lt
 8005ada:	425b      	neglt	r3, r3
 8005adc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ae0:	9307      	strge	r3, [sp, #28]
 8005ae2:	9307      	strlt	r3, [sp, #28]
 8005ae4:	bfb8      	it	lt
 8005ae6:	9204      	strlt	r2, [sp, #16]
 8005ae8:	7823      	ldrb	r3, [r4, #0]
 8005aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aec:	d10a      	bne.n	8005b04 <_svfiprintf_r+0x130>
 8005aee:	7863      	ldrb	r3, [r4, #1]
 8005af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af2:	d132      	bne.n	8005b5a <_svfiprintf_r+0x186>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	9203      	str	r2, [sp, #12]
 8005afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b00:	3402      	adds	r4, #2
 8005b02:	9305      	str	r3, [sp, #20]
 8005b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bc8 <_svfiprintf_r+0x1f4>
 8005b08:	7821      	ldrb	r1, [r4, #0]
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	4650      	mov	r0, sl
 8005b0e:	f7fa fb7f 	bl	8000210 <memchr>
 8005b12:	b138      	cbz	r0, 8005b24 <_svfiprintf_r+0x150>
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	eba0 000a 	sub.w	r0, r0, sl
 8005b1a:	2240      	movs	r2, #64	@ 0x40
 8005b1c:	4082      	lsls	r2, r0
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	3401      	adds	r4, #1
 8005b22:	9304      	str	r3, [sp, #16]
 8005b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b28:	4824      	ldr	r0, [pc, #144]	@ (8005bbc <_svfiprintf_r+0x1e8>)
 8005b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b2e:	2206      	movs	r2, #6
 8005b30:	f7fa fb6e 	bl	8000210 <memchr>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d036      	beq.n	8005ba6 <_svfiprintf_r+0x1d2>
 8005b38:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <_svfiprintf_r+0x1ec>)
 8005b3a:	bb1b      	cbnz	r3, 8005b84 <_svfiprintf_r+0x1b0>
 8005b3c:	9b03      	ldr	r3, [sp, #12]
 8005b3e:	3307      	adds	r3, #7
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	3308      	adds	r3, #8
 8005b46:	9303      	str	r3, [sp, #12]
 8005b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b4a:	4433      	add	r3, r6
 8005b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b4e:	e76a      	b.n	8005a26 <_svfiprintf_r+0x52>
 8005b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b54:	460c      	mov	r4, r1
 8005b56:	2001      	movs	r0, #1
 8005b58:	e7a8      	b.n	8005aac <_svfiprintf_r+0xd8>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	3401      	adds	r4, #1
 8005b5e:	9305      	str	r3, [sp, #20]
 8005b60:	4619      	mov	r1, r3
 8005b62:	f04f 0c0a 	mov.w	ip, #10
 8005b66:	4620      	mov	r0, r4
 8005b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b6c:	3a30      	subs	r2, #48	@ 0x30
 8005b6e:	2a09      	cmp	r2, #9
 8005b70:	d903      	bls.n	8005b7a <_svfiprintf_r+0x1a6>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0c6      	beq.n	8005b04 <_svfiprintf_r+0x130>
 8005b76:	9105      	str	r1, [sp, #20]
 8005b78:	e7c4      	b.n	8005b04 <_svfiprintf_r+0x130>
 8005b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7e:	4604      	mov	r4, r0
 8005b80:	2301      	movs	r3, #1
 8005b82:	e7f0      	b.n	8005b66 <_svfiprintf_r+0x192>
 8005b84:	ab03      	add	r3, sp, #12
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	462a      	mov	r2, r5
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc4 <_svfiprintf_r+0x1f0>)
 8005b8c:	a904      	add	r1, sp, #16
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f3af 8000 	nop.w
 8005b94:	1c42      	adds	r2, r0, #1
 8005b96:	4606      	mov	r6, r0
 8005b98:	d1d6      	bne.n	8005b48 <_svfiprintf_r+0x174>
 8005b9a:	89ab      	ldrh	r3, [r5, #12]
 8005b9c:	065b      	lsls	r3, r3, #25
 8005b9e:	f53f af2d 	bmi.w	80059fc <_svfiprintf_r+0x28>
 8005ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ba4:	e72c      	b.n	8005a00 <_svfiprintf_r+0x2c>
 8005ba6:	ab03      	add	r3, sp, #12
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	462a      	mov	r2, r5
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <_svfiprintf_r+0x1f0>)
 8005bae:	a904      	add	r1, sp, #16
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f000 f879 	bl	8005ca8 <_printf_i>
 8005bb6:	e7ed      	b.n	8005b94 <_svfiprintf_r+0x1c0>
 8005bb8:	08006080 	.word	0x08006080
 8005bbc:	0800608a 	.word	0x0800608a
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	0800591d 	.word	0x0800591d
 8005bc8:	08006086 	.word	0x08006086

08005bcc <_printf_common>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	4698      	mov	r8, r3
 8005bd4:	688a      	ldr	r2, [r1, #8]
 8005bd6:	690b      	ldr	r3, [r1, #16]
 8005bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	bfb8      	it	lt
 8005be0:	4613      	movlt	r3, r2
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005be8:	4607      	mov	r7, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	b10a      	cbz	r2, 8005bf2 <_printf_common+0x26>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	6833      	ldrmi	r3, [r6, #0]
 8005bfa:	3302      	addmi	r3, #2
 8005bfc:	6033      	strmi	r3, [r6, #0]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	f015 0506 	ands.w	r5, r5, #6
 8005c04:	d106      	bne.n	8005c14 <_printf_common+0x48>
 8005c06:	f104 0a19 	add.w	sl, r4, #25
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	6832      	ldr	r2, [r6, #0]
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc26      	bgt.n	8005c62 <_printf_common+0x96>
 8005c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	3b00      	subs	r3, #0
 8005c1c:	bf18      	it	ne
 8005c1e:	2301      	movne	r3, #1
 8005c20:	0692      	lsls	r2, r2, #26
 8005c22:	d42b      	bmi.n	8005c7c <_printf_common+0xb0>
 8005c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c28:	4641      	mov	r1, r8
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	47c8      	blx	r9
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d01e      	beq.n	8005c70 <_printf_common+0xa4>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	6922      	ldr	r2, [r4, #16]
 8005c36:	f003 0306 	and.w	r3, r3, #6
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	bf02      	ittt	eq
 8005c3e:	68e5      	ldreq	r5, [r4, #12]
 8005c40:	6833      	ldreq	r3, [r6, #0]
 8005c42:	1aed      	subeq	r5, r5, r3
 8005c44:	68a3      	ldr	r3, [r4, #8]
 8005c46:	bf0c      	ite	eq
 8005c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c4c:	2500      	movne	r5, #0
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	bfc4      	itt	gt
 8005c52:	1a9b      	subgt	r3, r3, r2
 8005c54:	18ed      	addgt	r5, r5, r3
 8005c56:	2600      	movs	r6, #0
 8005c58:	341a      	adds	r4, #26
 8005c5a:	42b5      	cmp	r5, r6
 8005c5c:	d11a      	bne.n	8005c94 <_printf_common+0xc8>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e008      	b.n	8005c74 <_printf_common+0xa8>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4641      	mov	r1, r8
 8005c68:	4638      	mov	r0, r7
 8005c6a:	47c8      	blx	r9
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d103      	bne.n	8005c78 <_printf_common+0xac>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	3501      	adds	r5, #1
 8005c7a:	e7c6      	b.n	8005c0a <_printf_common+0x3e>
 8005c7c:	18e1      	adds	r1, r4, r3
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	2030      	movs	r0, #48	@ 0x30
 8005c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c86:	4422      	add	r2, r4
 8005c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c90:	3302      	adds	r3, #2
 8005c92:	e7c7      	b.n	8005c24 <_printf_common+0x58>
 8005c94:	2301      	movs	r3, #1
 8005c96:	4622      	mov	r2, r4
 8005c98:	4641      	mov	r1, r8
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c8      	blx	r9
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0e6      	beq.n	8005c70 <_printf_common+0xa4>
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	e7d9      	b.n	8005c5a <_printf_common+0x8e>
	...

08005ca8 <_printf_i>:
 8005ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	7e0f      	ldrb	r7, [r1, #24]
 8005cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cb0:	2f78      	cmp	r7, #120	@ 0x78
 8005cb2:	4691      	mov	r9, r2
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	469a      	mov	sl, r3
 8005cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cbe:	d807      	bhi.n	8005cd0 <_printf_i+0x28>
 8005cc0:	2f62      	cmp	r7, #98	@ 0x62
 8005cc2:	d80a      	bhi.n	8005cda <_printf_i+0x32>
 8005cc4:	2f00      	cmp	r7, #0
 8005cc6:	f000 80d2 	beq.w	8005e6e <_printf_i+0x1c6>
 8005cca:	2f58      	cmp	r7, #88	@ 0x58
 8005ccc:	f000 80b9 	beq.w	8005e42 <_printf_i+0x19a>
 8005cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cd8:	e03a      	b.n	8005d50 <_printf_i+0xa8>
 8005cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cde:	2b15      	cmp	r3, #21
 8005ce0:	d8f6      	bhi.n	8005cd0 <_printf_i+0x28>
 8005ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ce8 <_printf_i+0x40>)
 8005ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d55 	.word	0x08005d55
 8005cf0:	08005cd1 	.word	0x08005cd1
 8005cf4:	08005cd1 	.word	0x08005cd1
 8005cf8:	08005cd1 	.word	0x08005cd1
 8005cfc:	08005cd1 	.word	0x08005cd1
 8005d00:	08005d55 	.word	0x08005d55
 8005d04:	08005cd1 	.word	0x08005cd1
 8005d08:	08005cd1 	.word	0x08005cd1
 8005d0c:	08005cd1 	.word	0x08005cd1
 8005d10:	08005cd1 	.word	0x08005cd1
 8005d14:	08005e55 	.word	0x08005e55
 8005d18:	08005d7f 	.word	0x08005d7f
 8005d1c:	08005e0f 	.word	0x08005e0f
 8005d20:	08005cd1 	.word	0x08005cd1
 8005d24:	08005cd1 	.word	0x08005cd1
 8005d28:	08005e77 	.word	0x08005e77
 8005d2c:	08005cd1 	.word	0x08005cd1
 8005d30:	08005d7f 	.word	0x08005d7f
 8005d34:	08005cd1 	.word	0x08005cd1
 8005d38:	08005cd1 	.word	0x08005cd1
 8005d3c:	08005e17 	.word	0x08005e17
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6032      	str	r2, [r6, #0]
 8005d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d50:	2301      	movs	r3, #1
 8005d52:	e09d      	b.n	8005e90 <_printf_i+0x1e8>
 8005d54:	6833      	ldr	r3, [r6, #0]
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	6031      	str	r1, [r6, #0]
 8005d5c:	0606      	lsls	r6, r0, #24
 8005d5e:	d501      	bpl.n	8005d64 <_printf_i+0xbc>
 8005d60:	681d      	ldr	r5, [r3, #0]
 8005d62:	e003      	b.n	8005d6c <_printf_i+0xc4>
 8005d64:	0645      	lsls	r5, r0, #25
 8005d66:	d5fb      	bpl.n	8005d60 <_printf_i+0xb8>
 8005d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	da03      	bge.n	8005d78 <_printf_i+0xd0>
 8005d70:	232d      	movs	r3, #45	@ 0x2d
 8005d72:	426d      	negs	r5, r5
 8005d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d78:	4859      	ldr	r0, [pc, #356]	@ (8005ee0 <_printf_i+0x238>)
 8005d7a:	230a      	movs	r3, #10
 8005d7c:	e011      	b.n	8005da2 <_printf_i+0xfa>
 8005d7e:	6821      	ldr	r1, [r4, #0]
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	0608      	lsls	r0, r1, #24
 8005d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d88:	d402      	bmi.n	8005d90 <_printf_i+0xe8>
 8005d8a:	0649      	lsls	r1, r1, #25
 8005d8c:	bf48      	it	mi
 8005d8e:	b2ad      	uxthmi	r5, r5
 8005d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d92:	4853      	ldr	r0, [pc, #332]	@ (8005ee0 <_printf_i+0x238>)
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	bf14      	ite	ne
 8005d98:	230a      	movne	r3, #10
 8005d9a:	2308      	moveq	r3, #8
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005da2:	6866      	ldr	r6, [r4, #4]
 8005da4:	60a6      	str	r6, [r4, #8]
 8005da6:	2e00      	cmp	r6, #0
 8005da8:	bfa2      	ittt	ge
 8005daa:	6821      	ldrge	r1, [r4, #0]
 8005dac:	f021 0104 	bicge.w	r1, r1, #4
 8005db0:	6021      	strge	r1, [r4, #0]
 8005db2:	b90d      	cbnz	r5, 8005db8 <_printf_i+0x110>
 8005db4:	2e00      	cmp	r6, #0
 8005db6:	d04b      	beq.n	8005e50 <_printf_i+0x1a8>
 8005db8:	4616      	mov	r6, r2
 8005dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8005dc2:	5dc7      	ldrb	r7, [r0, r7]
 8005dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dc8:	462f      	mov	r7, r5
 8005dca:	42bb      	cmp	r3, r7
 8005dcc:	460d      	mov	r5, r1
 8005dce:	d9f4      	bls.n	8005dba <_printf_i+0x112>
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d10b      	bne.n	8005dec <_printf_i+0x144>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	07df      	lsls	r7, r3, #31
 8005dd8:	d508      	bpl.n	8005dec <_printf_i+0x144>
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	6861      	ldr	r1, [r4, #4]
 8005dde:	4299      	cmp	r1, r3
 8005de0:	bfde      	ittt	le
 8005de2:	2330      	movle	r3, #48	@ 0x30
 8005de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005de8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dec:	1b92      	subs	r2, r2, r6
 8005dee:	6122      	str	r2, [r4, #16]
 8005df0:	f8cd a000 	str.w	sl, [sp]
 8005df4:	464b      	mov	r3, r9
 8005df6:	aa03      	add	r2, sp, #12
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	f7ff fee6 	bl	8005bcc <_printf_common>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d14a      	bne.n	8005e9a <_printf_i+0x1f2>
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	b004      	add	sp, #16
 8005e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f043 0320 	orr.w	r3, r3, #32
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	4833      	ldr	r0, [pc, #204]	@ (8005ee4 <_printf_i+0x23c>)
 8005e18:	2778      	movs	r7, #120	@ 0x78
 8005e1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	6831      	ldr	r1, [r6, #0]
 8005e22:	061f      	lsls	r7, r3, #24
 8005e24:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e28:	d402      	bmi.n	8005e30 <_printf_i+0x188>
 8005e2a:	065f      	lsls	r7, r3, #25
 8005e2c:	bf48      	it	mi
 8005e2e:	b2ad      	uxthmi	r5, r5
 8005e30:	6031      	str	r1, [r6, #0]
 8005e32:	07d9      	lsls	r1, r3, #31
 8005e34:	bf44      	itt	mi
 8005e36:	f043 0320 	orrmi.w	r3, r3, #32
 8005e3a:	6023      	strmi	r3, [r4, #0]
 8005e3c:	b11d      	cbz	r5, 8005e46 <_printf_i+0x19e>
 8005e3e:	2310      	movs	r3, #16
 8005e40:	e7ac      	b.n	8005d9c <_printf_i+0xf4>
 8005e42:	4827      	ldr	r0, [pc, #156]	@ (8005ee0 <_printf_i+0x238>)
 8005e44:	e7e9      	b.n	8005e1a <_printf_i+0x172>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f023 0320 	bic.w	r3, r3, #32
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	e7f6      	b.n	8005e3e <_printf_i+0x196>
 8005e50:	4616      	mov	r6, r2
 8005e52:	e7bd      	b.n	8005dd0 <_printf_i+0x128>
 8005e54:	6833      	ldr	r3, [r6, #0]
 8005e56:	6825      	ldr	r5, [r4, #0]
 8005e58:	6961      	ldr	r1, [r4, #20]
 8005e5a:	1d18      	adds	r0, r3, #4
 8005e5c:	6030      	str	r0, [r6, #0]
 8005e5e:	062e      	lsls	r6, r5, #24
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	d501      	bpl.n	8005e68 <_printf_i+0x1c0>
 8005e64:	6019      	str	r1, [r3, #0]
 8005e66:	e002      	b.n	8005e6e <_printf_i+0x1c6>
 8005e68:	0668      	lsls	r0, r5, #25
 8005e6a:	d5fb      	bpl.n	8005e64 <_printf_i+0x1bc>
 8005e6c:	8019      	strh	r1, [r3, #0]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	4616      	mov	r6, r2
 8005e74:	e7bc      	b.n	8005df0 <_printf_i+0x148>
 8005e76:	6833      	ldr	r3, [r6, #0]
 8005e78:	1d1a      	adds	r2, r3, #4
 8005e7a:	6032      	str	r2, [r6, #0]
 8005e7c:	681e      	ldr	r6, [r3, #0]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	2100      	movs	r1, #0
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7fa f9c4 	bl	8000210 <memchr>
 8005e88:	b108      	cbz	r0, 8005e8e <_printf_i+0x1e6>
 8005e8a:	1b80      	subs	r0, r0, r6
 8005e8c:	6060      	str	r0, [r4, #4]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	2300      	movs	r3, #0
 8005e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e98:	e7aa      	b.n	8005df0 <_printf_i+0x148>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	47d0      	blx	sl
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d0ad      	beq.n	8005e04 <_printf_i+0x15c>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	079b      	lsls	r3, r3, #30
 8005eac:	d413      	bmi.n	8005ed6 <_printf_i+0x22e>
 8005eae:	68e0      	ldr	r0, [r4, #12]
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	4298      	cmp	r0, r3
 8005eb4:	bfb8      	it	lt
 8005eb6:	4618      	movlt	r0, r3
 8005eb8:	e7a6      	b.n	8005e08 <_printf_i+0x160>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	47d0      	blx	sl
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d09d      	beq.n	8005e04 <_printf_i+0x15c>
 8005ec8:	3501      	adds	r5, #1
 8005eca:	68e3      	ldr	r3, [r4, #12]
 8005ecc:	9903      	ldr	r1, [sp, #12]
 8005ece:	1a5b      	subs	r3, r3, r1
 8005ed0:	42ab      	cmp	r3, r5
 8005ed2:	dcf2      	bgt.n	8005eba <_printf_i+0x212>
 8005ed4:	e7eb      	b.n	8005eae <_printf_i+0x206>
 8005ed6:	2500      	movs	r5, #0
 8005ed8:	f104 0619 	add.w	r6, r4, #25
 8005edc:	e7f5      	b.n	8005eca <_printf_i+0x222>
 8005ede:	bf00      	nop
 8005ee0:	08006091 	.word	0x08006091
 8005ee4:	080060a2 	.word	0x080060a2

08005ee8 <memmove>:
 8005ee8:	4288      	cmp	r0, r1
 8005eea:	b510      	push	{r4, lr}
 8005eec:	eb01 0402 	add.w	r4, r1, r2
 8005ef0:	d902      	bls.n	8005ef8 <memmove+0x10>
 8005ef2:	4284      	cmp	r4, r0
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	d807      	bhi.n	8005f08 <memmove+0x20>
 8005ef8:	1e43      	subs	r3, r0, #1
 8005efa:	42a1      	cmp	r1, r4
 8005efc:	d008      	beq.n	8005f10 <memmove+0x28>
 8005efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f06:	e7f8      	b.n	8005efa <memmove+0x12>
 8005f08:	4402      	add	r2, r0
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	428a      	cmp	r2, r1
 8005f0e:	d100      	bne.n	8005f12 <memmove+0x2a>
 8005f10:	bd10      	pop	{r4, pc}
 8005f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f1a:	e7f7      	b.n	8005f0c <memmove+0x24>

08005f1c <_sbrk_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	@ (8005f38 <_sbrk_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fb fc2e 	bl	8001788 <_sbrk>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_sbrk_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_sbrk_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20003828 	.word	0x20003828

08005f3c <memcpy>:
 8005f3c:	440a      	add	r2, r1
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f44:	d100      	bne.n	8005f48 <memcpy+0xc>
 8005f46:	4770      	bx	lr
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f52:	4291      	cmp	r1, r2
 8005f54:	d1f9      	bne.n	8005f4a <memcpy+0xe>
 8005f56:	bd10      	pop	{r4, pc}

08005f58 <_realloc_r>:
 8005f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	4615      	mov	r5, r2
 8005f60:	460c      	mov	r4, r1
 8005f62:	b921      	cbnz	r1, 8005f6e <_realloc_r+0x16>
 8005f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f68:	4611      	mov	r1, r2
 8005f6a:	f7ff bc4b 	b.w	8005804 <_malloc_r>
 8005f6e:	b92a      	cbnz	r2, 8005f7c <_realloc_r+0x24>
 8005f70:	f7ff fbdc 	bl	800572c <_free_r>
 8005f74:	2400      	movs	r4, #0
 8005f76:	4620      	mov	r0, r4
 8005f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7c:	f000 f81a 	bl	8005fb4 <_malloc_usable_size_r>
 8005f80:	4285      	cmp	r5, r0
 8005f82:	4606      	mov	r6, r0
 8005f84:	d802      	bhi.n	8005f8c <_realloc_r+0x34>
 8005f86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f8a:	d8f4      	bhi.n	8005f76 <_realloc_r+0x1e>
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4640      	mov	r0, r8
 8005f90:	f7ff fc38 	bl	8005804 <_malloc_r>
 8005f94:	4607      	mov	r7, r0
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d0ec      	beq.n	8005f74 <_realloc_r+0x1c>
 8005f9a:	42b5      	cmp	r5, r6
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	bf28      	it	cs
 8005fa2:	4632      	movcs	r2, r6
 8005fa4:	f7ff ffca 	bl	8005f3c <memcpy>
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4640      	mov	r0, r8
 8005fac:	f7ff fbbe 	bl	800572c <_free_r>
 8005fb0:	463c      	mov	r4, r7
 8005fb2:	e7e0      	b.n	8005f76 <_realloc_r+0x1e>

08005fb4 <_malloc_usable_size_r>:
 8005fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb8:	1f18      	subs	r0, r3, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bfbc      	itt	lt
 8005fbe:	580b      	ldrlt	r3, [r1, r0]
 8005fc0:	18c0      	addlt	r0, r0, r3
 8005fc2:	4770      	bx	lr

08005fc4 <_init>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	bf00      	nop
 8005fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fca:	bc08      	pop	{r3}
 8005fcc:	469e      	mov	lr, r3
 8005fce:	4770      	bx	lr

08005fd0 <_fini>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr
