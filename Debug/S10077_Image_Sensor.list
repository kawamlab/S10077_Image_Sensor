
S10077_Image_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800595c  0800595c  0000695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a04  08005a04  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a04  08005a04  00006a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a0c  08005a0c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a10  08005a10  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035fc  2000005c  08005a70  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003658  08005a70  00007658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010008  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002512  00000000  00000000  00017094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  000195a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3e  00000000  00000000  0001a408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023915  00000000  00000000  0001af46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012376  00000000  00000000  0003e85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dddc9  00000000  00000000  00050bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e99a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  0012e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00132b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005944 	.word	0x08005944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005944 	.word	0x08005944

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fe21 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f83f 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fa77 	bl	8000aa0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b2:	f000 fa55 	bl	8000a60 <MX_DMA_Init>
  MX_ADC1_Init();
 80005b6:	f000 f8ab 	bl	8000710 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005ba:	f000 f8fb 	bl	80007b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005be:	f000 f999 	bl	80008f4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fa23 	bl	8000a0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the S10077 driver system with all necessary handles and configurations.
  // (JP) S10077ドライバシステムを�?�必要なすべてのハンドルと設定で初期化します�??
  S10077_System_Init(sensor_configs, SENSORS_IN_USE, &htim1, &huart2);
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <main+0x7c>)
 80005c8:	4a15      	ldr	r2, [pc, #84]	@ (8000620 <main+0x80>)
 80005ca:	2101      	movs	r1, #1
 80005cc:	4815      	ldr	r0, [pc, #84]	@ (8000624 <main+0x84>)
 80005ce:	f000 fae9 	bl	8000ba4 <S10077_System_Init>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Multi-Sensor System Ready.\n", 27, HAL_MAX_DELAY);
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	221b      	movs	r2, #27
 80005d8:	4913      	ldr	r1, [pc, #76]	@ (8000628 <main+0x88>)
 80005da:	4810      	ldr	r0, [pc, #64]	@ (800061c <main+0x7c>)
 80005dc:	f004 f942 	bl	8004864 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	for (int i = 0; i < SENSORS_IN_USE; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	e015      	b.n	8000612 <main+0x72>
	{
		S10077_StartAcquisition(i);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fb06 	bl	8000bfc <S10077_StartAcquisition>
		while (!S10077_IsDataReady()){}
 80005f0:	bf00      	nop
 80005f2:	f000 fb51 	bl	8000c98 <S10077_IsDataReady>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f7      	bne.n	80005f2 <main+0x52>
		S10077_PrintDataViaUART();
 8000602:	f000 fb55 	bl	8000cb0 <S10077_PrintDataViaUART>
		HAL_Delay(50);
 8000606:	2032      	movs	r0, #50	@ 0x32
 8000608:	f000 fe62 	bl	80012d0 <HAL_Delay>
	for (int i = 0; i < SENSORS_IN_USE; i++)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dde6      	ble.n	80005e6 <main+0x46>
 8000618:	e7e2      	b.n	80005e0 <main+0x40>
 800061a:	bf00      	nop
 800061c:	200001b0 	.word	0x200001b0
 8000620:	20000120 	.word	0x20000120
 8000624:	08005998 	.word	0x08005998
 8000628:	0800595c 	.word	0x0800595c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	@ 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fd02 	bl	8005044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <SystemClock_Config+0xdc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemClock_Config+0xdc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <SystemClock_Config+0xdc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <SystemClock_Config+0xe0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a25      	ldr	r2, [pc, #148]	@ (800070c <SystemClock_Config+0xe0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <SystemClock_Config+0xe0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006a0:	23b4      	movs	r3, #180	@ 0xb4
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fc15 	bl	8002ee4 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 fa6a 	bl	8000b98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c4:	f002 f874 	bl	80027b0 <HAL_PWREx_EnableOverDrive>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ce:	f000 fa63 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2105      	movs	r1, #5
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f8ad 	bl	8002850 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006fc:	f000 fa4c 	bl	8000b98 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000724:	4a22      	ldr	r2, [pc, #136]	@ (80007b0 <MX_ADC1_Init+0xa0>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000728:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <MX_ADC1_Init+0x9c>)
 800072a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800072e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <MX_ADC1_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_ADC1_Init+0x9c>)
 800074c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000752:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000754:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_ADC1_Init+0x9c>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000762:	2201      	movs	r2, #1
 8000764:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000770:	2201      	movs	r2, #1
 8000772:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000776:	f000 fdcf 	bl	8001318 <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000780:	f000 fa0a 	bl	8000b98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000784:	2301      	movs	r3, #1
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800078c:	2302      	movs	r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_ADC1_Init+0x9c>)
 8000796:	f000 ff2b 	bl	80015f0 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007a0:	f000 f9fa 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000078 	.word	0x20000078
 80007b0:	40012000 	.word	0x40012000

080007b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b096      	sub	sp, #88	@ 0x58
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fc29 	bl	8005044 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ec <MX_TIM1_Init+0x138>)
 80007f4:	4a3e      	ldr	r2, [pc, #248]	@ (80008f0 <MX_TIM1_Init+0x13c>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007f8:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <MX_TIM1_Init+0x138>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <MX_TIM1_Init+0x138>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 360-1;
 8000804:	4b39      	ldr	r3, [pc, #228]	@ (80008ec <MX_TIM1_Init+0x138>)
 8000806:	f240 1267 	movw	r2, #359	@ 0x167
 800080a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <MX_TIM1_Init+0x138>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000812:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <MX_TIM1_Init+0x138>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <MX_TIM1_Init+0x138>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800081e:	4833      	ldr	r0, [pc, #204]	@ (80008ec <MX_TIM1_Init+0x138>)
 8000820:	f002 fdfe 	bl	8003420 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800082a:	f000 f9b5 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000838:	4619      	mov	r1, r3
 800083a:	482c      	ldr	r0, [pc, #176]	@ (80008ec <MX_TIM1_Init+0x138>)
 800083c:	f003 f918 	bl	8003a70 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000846:	f000 f9a7 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800084a:	4828      	ldr	r0, [pc, #160]	@ (80008ec <MX_TIM1_Init+0x138>)
 800084c:	f002 fe37 	bl	80034be <HAL_TIM_PWM_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000856:	f000 f99f 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000862:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	@ (80008ec <MX_TIM1_Init+0x138>)
 800086a:	f003 fedd 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000874:	f000 f990 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000878:	2360      	movs	r3, #96	@ 0x60
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 180;
 800087c:	23b4      	movs	r3, #180	@ 0xb4
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <MX_TIM1_Init+0x138>)
 800089e:	f003 f825 	bl	80038ec <HAL_TIM_PWM_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80008a8:	f000 f976 	bl	8000b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4807      	ldr	r0, [pc, #28]	@ (80008ec <MX_TIM1_Init+0x138>)
 80008d0:	f003 ff26 	bl	8004720 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80008da:	f000 f95d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <MX_TIM1_Init+0x138>)
 80008e0:	f000 fb56 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 80008e4:	bf00      	nop
 80008e6:	3758      	adds	r7, #88	@ 0x58
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000120 	.word	0x20000120
 80008f0:	40010000 	.word	0x40010000

080008f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b090      	sub	sp, #64	@ 0x40
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800092e:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <MX_TIM3_Init+0x110>)
 8000930:	4a35      	ldr	r2, [pc, #212]	@ (8000a08 <MX_TIM3_Init+0x114>)
 8000932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000934:	4b33      	ldr	r3, [pc, #204]	@ (8000a04 <MX_TIM3_Init+0x110>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <MX_TIM3_Init+0x110>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <MX_TIM3_Init+0x110>)
 8000942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <MX_TIM3_Init+0x110>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a04 <MX_TIM3_Init+0x110>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000954:	482b      	ldr	r0, [pc, #172]	@ (8000a04 <MX_TIM3_Init+0x110>)
 8000956:	f002 fd63 	bl	8003420 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000960:	f000 f91a 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800096e:	4619      	mov	r1, r3
 8000970:	4824      	ldr	r0, [pc, #144]	@ (8000a04 <MX_TIM3_Init+0x110>)
 8000972:	f003 f87d 	bl	8003a70 <HAL_TIM_ConfigClockSource>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800097c:	f000 f90c 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000980:	4820      	ldr	r0, [pc, #128]	@ (8000a04 <MX_TIM3_Init+0x110>)
 8000982:	f002 febd 	bl	8003700 <HAL_TIM_IC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800098c:	f000 f904 	bl	8000b98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000990:	2304      	movs	r3, #4
 8000992:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000994:	2350      	movs	r3, #80	@ 0x50
 8000996:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000998:	2302      	movs	r3, #2
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4817      	ldr	r0, [pc, #92]	@ (8000a04 <MX_TIM3_Init+0x110>)
 80009a8:	f003 f929 	bl	8003bfe <HAL_TIM_SlaveConfigSynchro>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80009b2:	f000 f8f1 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009b6:	2320      	movs	r3, #32
 80009b8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <MX_TIM3_Init+0x110>)
 80009c6:	f003 fe2f 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80009d0:	f000 f8e2 	bl	8000b98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009d4:	2302      	movs	r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009d8:	2301      	movs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <MX_TIM3_Init+0x110>)
 80009ec:	f002 fee1 	bl	80037b2 <HAL_TIM_IC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80009f6:	f000 f8cf 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3740      	adds	r7, #64	@ 0x40
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000168 	.word	0x20000168
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <MX_USART2_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f003 febe 	bl	80047c4 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f8a3 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001b0 	.word	0x200001b0
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_DMA_Init+0x3c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <MX_DMA_Init+0x3c>)
 8000a70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_DMA_Init+0x3c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2038      	movs	r0, #56	@ 0x38
 8000a88:	f001 f93d 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a8c:	2038      	movs	r0, #56	@ 0x38
 8000a8e:	f001 f956 	bl	8001d3e <HAL_NVIC_EnableIRQ>

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b34      	ldr	r3, [pc, #208]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a33      	ldr	r2, [pc, #204]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a2c      	ldr	r2, [pc, #176]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a25      	ldr	r2, [pc, #148]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MX_GPIO_Init+0xec>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST0_GPIO_Port, ST0_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b2c:	4818      	ldr	r0, [pc, #96]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b2e:	f001 fe25 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VIDEO0_Pin */
  GPIO_InitStruct.Pin = VIDEO0_Pin;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VIDEO0_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b46:	f001 fc85 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST0_Pin */
  GPIO_InitStruct.Pin = ST0_Pin;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST0_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480b      	ldr	r0, [pc, #44]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b64:	f001 fc76 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : EOS_Pin */
  GPIO_InitStruct.Pin = EOS_Pin;
 8000b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EOS_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b7e:	f001 fc69 	bl	8002454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020000 	.word	0x40020000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <S10077_System_Init>:
//================================================================================
// Public Function Implementations
//================================================================================

void S10077_System_Init(const S10077_SensorConfig* configs, uint8_t num_sensors, TIM_HandleTypeDef* htim_clk, UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	72fb      	strb	r3, [r7, #11]
    sensor_configs = configs;
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <S10077_System_Init+0x48>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6013      	str	r3, [r2, #0]
    configured_sensor_count = num_sensors;
 8000bba:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <S10077_System_Init+0x4c>)
 8000bbc:	7afb      	ldrb	r3, [r7, #11]
 8000bbe:	7013      	strb	r3, [r2, #0]
    clk_tim_handle = htim_clk;
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <S10077_System_Init+0x50>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
    uart_handle = huart;
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <S10077_System_Init+0x54>)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	6013      	str	r3, [r2, #0]

    if (HAL_TIM_PWM_Start(clk_tim_handle, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <S10077_System_Init+0x50>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fccc 	bl	8003570 <HAL_TIM_PWM_Start>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <S10077_System_Init+0x3e>
    {
        Error_Handler();
 8000bde:	f7ff ffdb 	bl	8000b98 <Error_Handler>
    }
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000200 	.word	0x20000200
 8000bf0:	20000204 	.word	0x20000204
 8000bf4:	200001f8 	.word	0x200001f8
 8000bf8:	200001fc 	.word	0x200001fc

08000bfc <S10077_StartAcquisition>:

void S10077_StartAcquisition(uint8_t sensor_id)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
    if (sensor_id >= configured_sensor_count) {
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <S10077_StartAcquisition+0x84>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d233      	bcs.n	8000c78 <S10077_StartAcquisition+0x7c>
        return; // Invalid sensor ID
    }

    current_sensor_id = sensor_id;
 8000c10:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <S10077_StartAcquisition+0x88>)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	7013      	strb	r3, [r2, #0]
    const S10077_SensorConfig* config = &sensor_configs[sensor_id];
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <S10077_StartAcquisition+0x8c>)
 8000c18:	6819      	ldr	r1, [r3, #0]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	60fb      	str	r3, [r7, #12]

    // Store the handle of the ADC we are about to use. This is crucial for the callback.
    current_adc_handle = config->adc_handle;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a17      	ldr	r2, [pc, #92]	@ (8000c8c <S10077_StartAcquisition+0x90>)
 8000c2e:	6013      	str	r3, [r2, #0]
    data_ready_flag = false;
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <S10077_StartAcquisition+0x94>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]

    // Step 1: Prepare the correct ADC and DMA to listen for triggers from its pre-configured timer.
    // This is the ONLY activation command needed for the acquisition chain.
    if (HAL_ADC_Start_DMA(config->adc_handle, (uint32_t*)adc_buffer, S10077_NUM_PIXELS) != HAL_OK)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3e:	4915      	ldr	r1, [pc, #84]	@ (8000c94 <S10077_StartAcquisition+0x98>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fbad 	bl	80013a0 <HAL_ADC_Start_DMA>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <S10077_StartAcquisition+0x54>
    {
        Error_Handler();
 8000c4c:	f7ff ffa4 	bl	8000b98 <Error_Handler>
    }

    // Step 2: Send the ST pulse to the specific sensor to start its data readout.
    HAL_GPIO_WritePin(config->st_port, config->st_pin, GPIO_PIN_SET);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6918      	ldr	r0, [r3, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	8a9b      	ldrh	r3, [r3, #20]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f001 fd8e 	bl	800277c <HAL_GPIO_WritePin>
    HAL_Delay(S10077_INTEGRATION_TIME_MS);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f000 fb35 	bl	80012d0 <HAL_Delay>
    HAL_GPIO_WritePin(config->st_port, config->st_pin, GPIO_PIN_RESET);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6918      	ldr	r0, [r3, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	8a9b      	ldrh	r3, [r3, #20]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	f001 fd83 	bl	800277c <HAL_GPIO_WritePin>
 8000c76:	e000      	b.n	8000c7a <S10077_StartAcquisition+0x7e>
        return; // Invalid sensor ID
 8000c78:	bf00      	nop
}
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000204 	.word	0x20000204
 8000c84:	20000a09 	.word	0x20000a09
 8000c88:	20000200 	.word	0x20000200
 8000c8c:	20000a0c 	.word	0x20000a0c
 8000c90:	20000a08 	.word	0x20000a08
 8000c94:	20000208 	.word	0x20000208

08000c98 <S10077_IsDataReady>:

bool S10077_IsDataReady(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
    return data_ready_flag;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <S10077_IsDataReady+0x14>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20000a08 	.word	0x20000a08

08000cb0 <S10077_PrintDataViaUART>:

void S10077_PrintDataViaUART(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
    static char buf[11000];
    int n = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]

    n += snprintf(buf + n, sizeof(buf) - n, "BEGIN,SENSOR_%u,", current_sensor_id);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a23      	ldr	r2, [pc, #140]	@ (8000d4c <S10077_PrintDataViaUART+0x9c>)
 8000cbe:	1898      	adds	r0, r3, r2
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f5c3 512b 	rsb	r1, r3, #10944	@ 0x2ac0
 8000cc6:	3138      	adds	r1, #56	@ 0x38
 8000cc8:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <S10077_PrintDataViaUART+0xa0>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4a21      	ldr	r2, [pc, #132]	@ (8000d54 <S10077_PrintDataViaUART+0xa4>)
 8000cce:	f004 f985 	bl	8004fdc <sniprintf>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < S10077_NUM_PIXELS; ++i) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	e014      	b.n	8000d0a <S10077_PrintDataViaUART+0x5a>
        n += snprintf(buf + n, sizeof(buf) - n, "%u,", adc_buffer[i]);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d4c <S10077_PrintDataViaUART+0x9c>)
 8000ce4:	1898      	adds	r0, r3, r2
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f5c3 512b 	rsb	r1, r3, #10944	@ 0x2ac0
 8000cec:	3138      	adds	r1, #56	@ 0x38
 8000cee:	4a1a      	ldr	r2, [pc, #104]	@ (8000d58 <S10077_PrintDataViaUART+0xa8>)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf6:	4a19      	ldr	r2, [pc, #100]	@ (8000d5c <S10077_PrintDataViaUART+0xac>)
 8000cf8:	f004 f970 	bl	8004fdc <sniprintf>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < S10077_NUM_PIXELS; ++i) {
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d10:	dbe6      	blt.n	8000ce0 <S10077_PrintDataViaUART+0x30>
    }
    n += snprintf(buf + n, sizeof(buf) - n, "END\r\n");
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <S10077_PrintDataViaUART+0x9c>)
 8000d16:	1898      	adds	r0, r3, r2
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f5c3 532b 	rsb	r3, r3, #10944	@ 0x2ac0
 8000d1e:	3338      	adds	r3, #56	@ 0x38
 8000d20:	4a0f      	ldr	r2, [pc, #60]	@ (8000d60 <S10077_PrintDataViaUART+0xb0>)
 8000d22:	4619      	mov	r1, r3
 8000d24:	f004 f95a 	bl	8004fdc <sniprintf>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	607b      	str	r3, [r7, #4]

    HAL_UART_Transmit(uart_handle, (uint8_t*)buf, n, HAL_MAX_DELAY);
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <S10077_PrintDataViaUART+0xb4>)
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	4903      	ldr	r1, [pc, #12]	@ (8000d4c <S10077_PrintDataViaUART+0x9c>)
 8000d3e:	f003 fd91 	bl	8004864 <HAL_UART_Transmit>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000a10 	.word	0x20000a10
 8000d50:	20000a09 	.word	0x20000a09
 8000d54:	08005978 	.word	0x08005978
 8000d58:	20000208 	.word	0x20000208
 8000d5c:	0800598c 	.word	0x0800598c
 8000d60:	08005990 	.word	0x08005990
 8000d64:	200001fc 	.word	0x200001fc

08000d68 <HAL_ADC_ConvCpltCallback>:
//================================================================================
// HAL Callback Function Override
//================================================================================

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  // Check if the callback is from the ADC we *currently* expect a response from.
  if(hadc->Instance == current_adc_handle->Instance)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_ADC_ConvCpltCallback+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d102      	bne.n	8000d84 <HAL_ADC_ConvCpltCallback+0x1c>
  {
    data_ready_flag = true;
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
  }
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000a0c 	.word	0x20000a0c
 8000d94:	20000a08 	.word	0x20000a08

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f000 ff8a 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec0 <HAL_ADC_MspInit+0xd8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d156      	bne.n	8000eb8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <HAL_ADC_MspInit+0xdc>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec4 <HAL_ADC_MspInit+0xdc>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <HAL_ADC_MspInit+0xdc>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <HAL_ADC_MspInit+0xdc>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ec4 <HAL_ADC_MspInit+0xdc>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <HAL_ADC_MspInit+0xdc>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VIDEO0_Pin;
 8000e42:	2302      	movs	r3, #2
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VIDEO0_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e56:	f001 fafd 	bl	8002454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <HAL_ADC_MspInit+0xe8>)
 8000e5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e9c:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e9e:	f000 ff69 	bl	8001d74 <HAL_DMA_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ea8:	f7ff fe76 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000eb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eb2:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	@ 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	200000c0 	.word	0x200000c0
 8000ed0:	40026410 	.word	0x40026410

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <HAL_TIM_Base_MspInit+0xac>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10e      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f12:	e030      	b.n	8000f76 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1b      	ldr	r2, [pc, #108]	@ (8000f88 <HAL_TIM_Base_MspInit+0xb4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_TIM_Base_MspInit+0xb0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TRG0_Pin;
 8000f56:	2340      	movs	r3, #64	@ 0x40
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f66:	2302      	movs	r3, #2
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TRG0_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <HAL_TIM_Base_MspInit+0xb8>)
 8000f72:	f001 fa6f 	bl	8002454 <HAL_GPIO_Init>
}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010000 	.word	0x40010000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40000400 	.word	0x40000400
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <HAL_TIM_MspPostInit+0x68>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d11e      	bne.n	8000ff0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CLK_Pin;
 8000fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <HAL_TIM_MspPostInit+0x70>)
 8000fec:	f001 fa32 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a19      	ldr	r2, [pc, #100]	@ (8001088 <HAL_UART_MspInit+0x84>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d12b      	bne.n	800107e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <HAL_UART_MspInit+0x88>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <HAL_UART_MspInit+0x88>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_UART_MspInit+0x88>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_UART_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a10      	ldr	r2, [pc, #64]	@ (800108c <HAL_UART_MspInit+0x88>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <HAL_UART_MspInit+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800105e:	230c      	movs	r3, #12
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <HAL_UART_MspInit+0x8c>)
 800107a:	f001 f9eb 	bl	8002454 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	@ 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004400 	.word	0x40004400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <MemManage_Handler+0x4>

080010ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <UsageFault_Handler+0x4>

080010bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ea:	f000 f8d1 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <DMA2_Stream0_IRQHandler+0x10>)
 80010fa:	f000 ff41 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000c0 	.word	0x200000c0

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f003 ff8c 	bl	8005054 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20020000 	.word	0x20020000
 8001168:	00000400 	.word	0x00000400
 800116c:	20003508 	.word	0x20003508
 8001170:	20003658 	.word	0x20003658

08001174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f003 ff4b 	bl	8005060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff f9e9 	bl	80005a0 <main>
  bx  lr    
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011dc:	08005a14 	.word	0x08005a14
  ldr r2, =_sbss
 80011e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011e4:	20003658 	.word	0x20003658

080011e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <HAL_Init+0x40>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_Init+0x40>)
 8001202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	@ (800122c <HAL_Init+0x40>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 fd6b 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fdba 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fd83 	bl	8001d5a <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 fd4b 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	@ (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	2000350c 	.word	0x2000350c

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000350c 	.word	0x2000350c

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e033      	b.n	8001396 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fd56 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d118      	bne.n	8001388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800135e:	f023 0302 	bic.w	r3, r3, #2
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fa72 	bl	8001854 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	@ 0x40
 8001386:	e001      	b.n	800138c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Start_DMA+0x22>
 80013be:	2302      	movs	r3, #2
 80013c0:	e0eb      	b.n	800159a <HAL_ADC_Start_DMA+0x1fa>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d018      	beq.n	800140a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e8:	4b6e      	ldr	r3, [pc, #440]	@ (80015a4 <HAL_ADC_Start_DMA+0x204>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a6e      	ldr	r2, [pc, #440]	@ (80015a8 <HAL_ADC_Start_DMA+0x208>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9a      	lsrs	r2, r3, #18
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3b01      	subs	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001418:	d107      	bne.n	800142a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001428:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b01      	cmp	r3, #1
 8001436:	f040 80a3 	bne.w	8001580 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001458:	2b00      	cmp	r3, #0
 800145a:	d007      	beq.n	800146c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001464:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001478:	d106      	bne.n	8001488 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f023 0206 	bic.w	r2, r3, #6
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	645a      	str	r2, [r3, #68]	@ 0x44
 8001486:	e002      	b.n	800148e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001496:	4b45      	ldr	r3, [pc, #276]	@ (80015ac <HAL_ADC_Start_DMA+0x20c>)
 8001498:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	4a44      	ldr	r2, [pc, #272]	@ (80015b0 <HAL_ADC_Start_DMA+0x210>)
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a6:	4a43      	ldr	r2, [pc, #268]	@ (80015b4 <HAL_ADC_Start_DMA+0x214>)
 80014a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ae:	4a42      	ldr	r2, [pc, #264]	@ (80015b8 <HAL_ADC_Start_DMA+0x218>)
 80014b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80014ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80014ca:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014da:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	334c      	adds	r3, #76	@ 0x4c
 80014e6:	4619      	mov	r1, r3
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f000 fcf0 	bl	8001ed0 <HAL_DMA_Start_IT>
 80014f0:	4603      	mov	r3, r0
 80014f2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d12a      	bne.n	8001556 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2d      	ldr	r2, [pc, #180]	@ (80015bc <HAL_ADC_Start_DMA+0x21c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d015      	beq.n	8001536 <HAL_ADC_Start_DMA+0x196>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a2c      	ldr	r2, [pc, #176]	@ (80015c0 <HAL_ADC_Start_DMA+0x220>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d105      	bne.n	8001520 <HAL_ADC_Start_DMA+0x180>
 8001514:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <HAL_ADC_Start_DMA+0x20c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 031f 	and.w	r3, r3, #31
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00a      	beq.n	8001536 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <HAL_ADC_Start_DMA+0x224>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d136      	bne.n	8001598 <HAL_ADC_Start_DMA+0x1f8>
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_ADC_Start_DMA+0x20c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	d130      	bne.n	8001598 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d129      	bne.n	8001598 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	e020      	b.n	8001598 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a18      	ldr	r2, [pc, #96]	@ (80015bc <HAL_ADC_Start_DMA+0x21c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d11b      	bne.n	8001598 <HAL_ADC_Start_DMA+0x1f8>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d114      	bne.n	8001598 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	e00b      	b.n	8001598 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	f043 0210 	orr.w	r2, r3, #16
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001598:	7ffb      	ldrb	r3, [r7, #31]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	40012300 	.word	0x40012300
 80015b0:	08001a4d 	.word	0x08001a4d
 80015b4:	08001b07 	.word	0x08001b07
 80015b8:	08001b23 	.word	0x08001b23
 80015bc:	40012000 	.word	0x40012000
 80015c0:	40012100 	.word	0x40012100
 80015c4:	40012200 	.word	0x40012200

080015c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1c>
 8001608:	2302      	movs	r3, #2
 800160a:	e113      	b.n	8001834 <HAL_ADC_ConfigChannel+0x244>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b09      	cmp	r3, #9
 800161a:	d925      	bls.n	8001668 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68d9      	ldr	r1, [r3, #12]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	3b1e      	subs	r3, #30
 8001632:	2207      	movs	r2, #7
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43da      	mvns	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	400a      	ands	r2, r1
 8001640:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68d9      	ldr	r1, [r3, #12]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	4603      	mov	r3, r0
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4403      	add	r3, r0
 800165a:	3b1e      	subs	r3, #30
 800165c:	409a      	lsls	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	e022      	b.n	80016ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6919      	ldr	r1, [r3, #16]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	2207      	movs	r2, #7
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	400a      	ands	r2, r1
 800168a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6919      	ldr	r1, [r3, #16]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4403      	add	r3, r0
 80016a4:	409a      	lsls	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d824      	bhi.n	8001700 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b05      	subs	r3, #5
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	400a      	ands	r2, r1
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b05      	subs	r3, #5
 80016f2:	fa00 f203 	lsl.w	r2, r0, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80016fe:	e04c      	b.n	800179a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d824      	bhi.n	8001752 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	3b23      	subs	r3, #35	@ 0x23
 800171a:	221f      	movs	r2, #31
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43da      	mvns	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	400a      	ands	r2, r1
 8001728:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	3b23      	subs	r3, #35	@ 0x23
 8001744:	fa00 f203 	lsl.w	r2, r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001750:	e023      	b.n	800179a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b41      	subs	r3, #65	@ 0x41
 8001764:	221f      	movs	r2, #31
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	400a      	ands	r2, r1
 8001772:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b41      	subs	r3, #65	@ 0x41
 800178e:	fa00 f203 	lsl.w	r2, r0, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179a:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <HAL_ADC_ConfigChannel+0x250>)
 800179c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a28      	ldr	r2, [pc, #160]	@ (8001844 <HAL_ADC_ConfigChannel+0x254>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d10f      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1d8>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d10b      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001844 <HAL_ADC_ConfigChannel+0x254>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12b      	bne.n	800182a <HAL_ADC_ConfigChannel+0x23a>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <HAL_ADC_ConfigChannel+0x258>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d003      	beq.n	80017e4 <HAL_ADC_ConfigChannel+0x1f4>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b11      	cmp	r3, #17
 80017e2:	d122      	bne.n	800182a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a11      	ldr	r2, [pc, #68]	@ (8001848 <HAL_ADC_ConfigChannel+0x258>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d111      	bne.n	800182a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_ADC_ConfigChannel+0x25c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <HAL_ADC_ConfigChannel+0x260>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	0c9a      	lsrs	r2, r3, #18
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800181c:	e002      	b.n	8001824 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3b01      	subs	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f9      	bne.n	800181e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40012300 	.word	0x40012300
 8001844:	40012000 	.word	0x40012000
 8001848:	10000012 	.word	0x10000012
 800184c:	20000000 	.word	0x20000000
 8001850:	431bde83 	.word	0x431bde83

08001854 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800185c:	4b79      	ldr	r3, [pc, #484]	@ (8001a44 <ADC_Init+0x1f0>)
 800185e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	021a      	lsls	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6899      	ldr	r1, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	4a58      	ldr	r2, [pc, #352]	@ (8001a48 <ADC_Init+0x1f4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e00f      	b.n	8001952 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001950:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0202 	bic.w	r2, r2, #2
 8001960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e1b      	ldrb	r3, [r3, #24]
 800196c:	005a      	lsls	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01b      	beq.n	80019b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800198e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800199e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	3b01      	subs	r3, #1
 80019ac:	035a      	lsls	r2, r3, #13
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e007      	b.n	80019c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051a      	lsls	r2, r3, #20
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a0a:	025a      	lsls	r2, r3, #9
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6899      	ldr	r1, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	029a      	lsls	r2, r3, #10
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40012300 	.word	0x40012300
 8001a48:	0f000001 	.word	0x0f000001

08001a4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d13c      	bne.n	8001ae0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d12b      	bne.n	8001ad8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d127      	bne.n	8001ad8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d119      	bne.n	8001ad8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0220 	bic.w	r2, r2, #32
 8001ab2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff f945 	bl	8000d68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ade:	e00e      	b.n	8001afe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7ff fd75 	bl	80015dc <HAL_ADC_ErrorCallback>
}
 8001af2:	e004      	b.n	8001afe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b12:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff fd57 	bl	80015c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2240      	movs	r2, #64	@ 0x40
 8001b34:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f043 0204 	orr.w	r2, r3, #4
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff fd4a 	bl	80015dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	@ (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff29 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff3e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff31 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fa9a 	bl	80012b8 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e099      	b.n	8001ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db0:	e00f      	b.n	8001dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db2:	f7ff fa81 	bl	80012b8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d908      	bls.n	8001dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e078      	b.n	8001ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e8      	bne.n	8001db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4b38      	ldr	r3, [pc, #224]	@ (8001ecc <HAL_DMA_Init+0x158>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	4313      	orrs	r3, r2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f023 0307 	bic.w	r3, r3, #7
 8001e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d117      	bne.n	8001e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00e      	beq.n	8001e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fa6f 	bl	800235c <DMA_CheckFifoParam>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e92:	2301      	movs	r3, #1
 8001e94:	e016      	b.n	8001ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fa26 	bl	80022f0 <DMA_CalcBaseAndBitshift>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eac:	223f      	movs	r2, #63	@ 0x3f
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	f010803f 	.word	0xf010803f

08001ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_DMA_Start_IT+0x26>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e040      	b.n	8001f78 <HAL_DMA_Start_IT+0xa8>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d12f      	bne.n	8001f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f9b8 	bl	8002294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	223f      	movs	r2, #63	@ 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0216 	orr.w	r2, r2, #22
 8001f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0208 	orr.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e005      	b.n	8001f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f8c:	4b8e      	ldr	r3, [pc, #568]	@ (80021c8 <HAL_DMA_IRQHandler+0x248>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a8e      	ldr	r2, [pc, #568]	@ (80021cc <HAL_DMA_IRQHandler+0x24c>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	2208      	movs	r2, #8
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01a      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0204 	bic.w	r2, r2, #4
 8001fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2208      	movs	r2, #8
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	2204      	movs	r2, #4
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	2204      	movs	r2, #4
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002050:	f043 0204 	orr.w	r2, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	2210      	movs	r2, #16
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d043      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03c      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207a:	2210      	movs	r2, #16
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
 80020ae:	e01f      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
 80020c0:	e016      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0208 	bic.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	2220      	movs	r2, #32
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 808f 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8087 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	2220      	movs	r2, #32
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b05      	cmp	r3, #5
 8002128:	d136      	bne.n	8002198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0216 	bic.w	r2, r2, #22
 8002138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_DMA_IRQHandler+0x1da>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	223f      	movs	r2, #63	@ 0x3f
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218a:	2b00      	cmp	r3, #0
 800218c:	d07e      	beq.n	800228c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
        }
        return;
 8002196:	e079      	b.n	800228c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01d      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	e02c      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
 80021c6:	bf00      	nop
 80021c8:	20000000 	.word	0x20000000
 80021cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d023      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e01e      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0210 	bic.w	r2, r2, #16
 80021fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	2b00      	cmp	r3, #0
 8002226:	d032      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2205      	movs	r2, #5
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3301      	adds	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	d307      	bcc.n	8002268 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f2      	bne.n	800224c <HAL_DMA_IRQHandler+0x2cc>
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002268:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
 800228a:	e000      	b.n	800228e <HAL_DMA_IRQHandler+0x30e>
        return;
 800228c:	bf00      	nop
    }
  }
}
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b40      	cmp	r3, #64	@ 0x40
 80022c0:	d108      	bne.n	80022d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022d2:	e007      	b.n	80022e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3b10      	subs	r3, #16
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <DMA_CalcBaseAndBitshift+0x64>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800230a:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <DMA_CalcBaseAndBitshift+0x68>)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d909      	bls.n	8002332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	1d1a      	adds	r2, r3, #4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002330:	e007      	b.n	8002342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	aaaaaaab 	.word	0xaaaaaaab
 8002358:	080059c8 	.word	0x080059c8

0800235c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11f      	bne.n	80023b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d856      	bhi.n	800242a <DMA_CheckFifoParam+0xce>
 800237c:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <DMA_CheckFifoParam+0x28>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002395 	.word	0x08002395
 8002388:	080023a7 	.word	0x080023a7
 800238c:	08002395 	.word	0x08002395
 8002390:	0800242b 	.word	0x0800242b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d046      	beq.n	800242e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a4:	e043      	b.n	800242e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ae:	d140      	bne.n	8002432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e03d      	b.n	8002432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023be:	d121      	bne.n	8002404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d837      	bhi.n	8002436 <DMA_CheckFifoParam+0xda>
 80023c6:	a201      	add	r2, pc, #4	@ (adr r2, 80023cc <DMA_CheckFifoParam+0x70>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023e3 	.word	0x080023e3
 80023d4:	080023dd 	.word	0x080023dd
 80023d8:	080023f5 	.word	0x080023f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      break;
 80023e0:	e030      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d025      	beq.n	800243a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f2:	e022      	b.n	800243a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023fc:	d11f      	bne.n	800243e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002402:	e01c      	b.n	800243e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d903      	bls.n	8002412 <DMA_CheckFifoParam+0xb6>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002410:	e018      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      break;
 8002416:	e015      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e00b      	b.n	8002442 <DMA_CheckFifoParam+0xe6>
      break;
 800242a:	bf00      	nop
 800242c:	e00a      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e008      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
 8002434:	e006      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e004      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;   
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
    }
  } 
  
  return status; 
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	@ 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e165      	b.n	800273c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8154 	bne.w	8002736 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d005      	beq.n	80024a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b03      	cmp	r3, #3
 8002512:	d017      	beq.n	8002544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d123      	bne.n	8002598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80ae 	beq.w	8002736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b5d      	ldr	r3, [pc, #372]	@ (8002754 <HAL_GPIO_Init+0x300>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002754 <HAL_GPIO_Init+0x300>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002754 <HAL_GPIO_Init+0x300>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f6:	4a58      	ldr	r2, [pc, #352]	@ (8002758 <HAL_GPIO_Init+0x304>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4f      	ldr	r2, [pc, #316]	@ (800275c <HAL_GPIO_Init+0x308>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d025      	beq.n	800266e <HAL_GPIO_Init+0x21a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4e      	ldr	r2, [pc, #312]	@ (8002760 <HAL_GPIO_Init+0x30c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <HAL_GPIO_Init+0x216>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4d      	ldr	r2, [pc, #308]	@ (8002764 <HAL_GPIO_Init+0x310>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x212>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4c      	ldr	r2, [pc, #304]	@ (8002768 <HAL_GPIO_Init+0x314>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x20e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4b      	ldr	r2, [pc, #300]	@ (800276c <HAL_GPIO_Init+0x318>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x20a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4a      	ldr	r2, [pc, #296]	@ (8002770 <HAL_GPIO_Init+0x31c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x206>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a49      	ldr	r2, [pc, #292]	@ (8002774 <HAL_GPIO_Init+0x320>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x202>
 8002652:	2306      	movs	r3, #6
 8002654:	e00c      	b.n	8002670 <HAL_GPIO_Init+0x21c>
 8002656:	2307      	movs	r3, #7
 8002658:	e00a      	b.n	8002670 <HAL_GPIO_Init+0x21c>
 800265a:	2305      	movs	r3, #5
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x21c>
 800265e:	2304      	movs	r3, #4
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x21c>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x21c>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x21c>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x21c>
 800266e:	2300      	movs	r3, #0
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002680:	4935      	ldr	r1, [pc, #212]	@ (8002758 <HAL_GPIO_Init+0x304>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268e:	4b3a      	ldr	r3, [pc, #232]	@ (8002778 <HAL_GPIO_Init+0x324>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b2:	4a31      	ldr	r2, [pc, #196]	@ (8002778 <HAL_GPIO_Init+0x324>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002778 <HAL_GPIO_Init+0x324>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026dc:	4a26      	ldr	r2, [pc, #152]	@ (8002778 <HAL_GPIO_Init+0x324>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e2:	4b25      	ldr	r3, [pc, #148]	@ (8002778 <HAL_GPIO_Init+0x324>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002706:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <HAL_GPIO_Init+0x324>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800270c:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <HAL_GPIO_Init+0x324>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002730:	4a11      	ldr	r2, [pc, #68]	@ (8002778 <HAL_GPIO_Init+0x324>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f67f ae96 	bls.w	8002470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	@ 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002798:	e003      	b.n	80027a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	041a      	lsls	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_PWREx_EnableOverDrive+0x90>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002840 <HAL_PWREx_EnableOverDrive+0x90>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_PWREx_EnableOverDrive+0x90>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_PWREx_EnableOverDrive+0x94>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027dc:	f7fe fd6c 	bl	80012b8 <HAL_GetTick>
 80027e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027e2:	e009      	b.n	80027f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027e4:	f7fe fd68 	bl	80012b8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027f2:	d901      	bls.n	80027f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e01f      	b.n	8002838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <HAL_PWREx_EnableOverDrive+0x98>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002804:	d1ee      	bne.n	80027e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800280c:	f7fe fd54 	bl	80012b8 <HAL_GetTick>
 8002810:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002812:	e009      	b.n	8002828 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002814:	f7fe fd50 	bl	80012b8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002822:	d901      	bls.n	8002828 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e007      	b.n	8002838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_PWREx_EnableOverDrive+0x98>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002834:	d1ee      	bne.n	8002814 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	420e0040 	.word	0x420e0040
 8002848:	40007000 	.word	0x40007000
 800284c:	420e0044 	.word	0x420e0044

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0cc      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b68      	ldr	r3, [pc, #416]	@ (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d90c      	bls.n	800288c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b65      	ldr	r3, [pc, #404]	@ (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b63      	ldr	r3, [pc, #396]	@ (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0b8      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a4:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a58      	ldr	r2, [pc, #352]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028bc:	4b53      	ldr	r3, [pc, #332]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a52      	ldr	r2, [pc, #328]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b50      	ldr	r3, [pc, #320]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	494d      	ldr	r1, [pc, #308]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d044      	beq.n	8002970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d119      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d003      	beq.n	800290e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290a:	2b03      	cmp	r3, #3
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e067      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b37      	ldr	r3, [pc, #220]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4934      	ldr	r1, [pc, #208]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7fe fcba 	bl	80012b8 <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe fcb6 	bl	80012b8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e04f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d20c      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b22      	ldr	r3, [pc, #136]	@ (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e032      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a4:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4916      	ldr	r1, [pc, #88]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	490e      	ldr	r1, [pc, #56]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029d6:	f000 f855 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80029da:	4602      	mov	r2, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	490a      	ldr	r1, [pc, #40]	@ (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	5ccb      	ldrb	r3, [r1, r3]
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a09      	ldr	r2, [pc, #36]	@ (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fc1a 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	080059b0 	.word	0x080059b0
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a20:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000000 	.word	0x20000000

08002a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a38:	f7ff fff0 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	0a9b      	lsrs	r3, r3, #10
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	4903      	ldr	r1, [pc, #12]	@ (8002a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	080059c0 	.word	0x080059c0

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a60:	f7ff ffdc 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0b5b      	lsrs	r3, r3, #13
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4903      	ldr	r1, [pc, #12]	@ (8002a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	080059c0 	.word	0x080059c0

08002a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a88:	b0ae      	sub	sp, #184	@ 0xb8
 8002a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aaa:	4bcb      	ldr	r3, [pc, #812]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	f200 8206 	bhi.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x440>
 8002ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002af5 	.word	0x08002af5
 8002ac4:	08002ec5 	.word	0x08002ec5
 8002ac8:	08002ec5 	.word	0x08002ec5
 8002acc:	08002ec5 	.word	0x08002ec5
 8002ad0:	08002afd 	.word	0x08002afd
 8002ad4:	08002ec5 	.word	0x08002ec5
 8002ad8:	08002ec5 	.word	0x08002ec5
 8002adc:	08002ec5 	.word	0x08002ec5
 8002ae0:	08002b05 	.word	0x08002b05
 8002ae4:	08002ec5 	.word	0x08002ec5
 8002ae8:	08002ec5 	.word	0x08002ec5
 8002aec:	08002ec5 	.word	0x08002ec5
 8002af0:	08002cf5 	.word	0x08002cf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4bb9      	ldr	r3, [pc, #740]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x358>)
 8002af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afa:	e1e7      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afc:	4bb8      	ldr	r3, [pc, #736]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b02:	e1e3      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4bb4      	ldr	r3, [pc, #720]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b10:	4bb1      	ldr	r3, [pc, #708]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d071      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1c:	4bae      	ldr	r3, [pc, #696]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b42:	4622      	mov	r2, r4
 8002b44:	462b      	mov	r3, r5
 8002b46:	f04f 0000 	mov.w	r0, #0
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	0159      	lsls	r1, r3, #5
 8002b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b54:	0150      	lsls	r0, r2, #5
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	1a51      	subs	r1, r2, r1
 8002b5e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b60:	4629      	mov	r1, r5
 8002b62:	eb63 0301 	sbc.w	r3, r3, r1
 8002b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b74:	4649      	mov	r1, r9
 8002b76:	018b      	lsls	r3, r1, #6
 8002b78:	4641      	mov	r1, r8
 8002b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7e:	4641      	mov	r1, r8
 8002b80:	018a      	lsls	r2, r1, #6
 8002b82:	4641      	mov	r1, r8
 8002b84:	1a51      	subs	r1, r2, r1
 8002b86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b88:	4649      	mov	r1, r9
 8002b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	00cb      	lsls	r3, r1, #3
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	00ca      	lsls	r2, r1, #3
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	460a      	mov	r2, r1
 8002bba:	eb42 0303 	adc.w	r3, r2, r3
 8002bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bcc:	4629      	mov	r1, r5
 8002bce:	024b      	lsls	r3, r1, #9
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	024a      	lsls	r2, r1, #9
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bf0:	f7fd fb5e 	bl	80002b0 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bfe:	e067      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c00:	4b75      	ldr	r3, [pc, #468]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c22:	4622      	mov	r2, r4
 8002c24:	462b      	mov	r3, r5
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	1a51      	subs	r1, r2, r1
 8002c3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c40:	4629      	mov	r1, r5
 8002c42:	eb63 0301 	sbc.w	r3, r3, r1
 8002c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c54:	4649      	mov	r1, r9
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	4641      	mov	r1, r8
 8002c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5e:	4641      	mov	r1, r8
 8002c60:	018a      	lsls	r2, r1, #6
 8002c62:	4641      	mov	r1, r8
 8002c64:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c68:	4649      	mov	r1, r9
 8002c6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c82:	4692      	mov	sl, r2
 8002c84:	469b      	mov	fp, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	eb1a 0303 	adds.w	r3, sl, r3
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	462b      	mov	r3, r5
 8002c90:	eb4b 0303 	adc.w	r3, fp, r3
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb8:	2200      	movs	r2, #0
 8002cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cbc:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cc2:	f7fd faf5 	bl	80002b0 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cd0:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cf2:	e0eb      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d00:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d06b      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0c:	4b32      	ldr	r3, [pc, #200]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	2200      	movs	r2, #0
 8002d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d20:	2300      	movs	r3, #0
 8002d22:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d28:	4622      	mov	r2, r4
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	f04f 0000 	mov.w	r0, #0
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	0159      	lsls	r1, r3, #5
 8002d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3a:	0150      	lsls	r0, r2, #5
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4621      	mov	r1, r4
 8002d42:	1a51      	subs	r1, r2, r1
 8002d44:	61b9      	str	r1, [r7, #24]
 8002d46:	4629      	mov	r1, r5
 8002d48:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d5a:	4659      	mov	r1, fp
 8002d5c:	018b      	lsls	r3, r1, #6
 8002d5e:	4651      	mov	r1, sl
 8002d60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d64:	4651      	mov	r1, sl
 8002d66:	018a      	lsls	r2, r1, #6
 8002d68:	4651      	mov	r1, sl
 8002d6a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6e:	4659      	mov	r1, fp
 8002d70:	eb63 0901 	sbc.w	r9, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d88:	4690      	mov	r8, r2
 8002d8a:	4699      	mov	r9, r3
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	eb18 0303 	adds.w	r3, r8, r3
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	462b      	mov	r3, r5
 8002d96:	eb49 0303 	adc.w	r3, r9, r3
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002da8:	4629      	mov	r1, r5
 8002daa:	024b      	lsls	r3, r1, #9
 8002dac:	4621      	mov	r1, r4
 8002dae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db2:	4621      	mov	r1, r4
 8002db4:	024a      	lsls	r2, r1, #9
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dc2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dc8:	f7fd fa72 	bl	80002b0 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dd6:	e065      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x420>
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de4:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x458>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	2200      	movs	r2, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	4611      	mov	r1, r2
 8002df0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002df6:	2300      	movs	r3, #0
 8002df8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002dfe:	4642      	mov	r2, r8
 8002e00:	464b      	mov	r3, r9
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f04f 0100 	mov.w	r1, #0
 8002e0a:	0159      	lsls	r1, r3, #5
 8002e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e10:	0150      	lsls	r0, r2, #5
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4641      	mov	r1, r8
 8002e18:	1a51      	subs	r1, r2, r1
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e30:	4659      	mov	r1, fp
 8002e32:	018b      	lsls	r3, r1, #6
 8002e34:	4651      	mov	r1, sl
 8002e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	018a      	lsls	r2, r1, #6
 8002e3e:	4651      	mov	r1, sl
 8002e40:	1a54      	subs	r4, r2, r1
 8002e42:	4659      	mov	r1, fp
 8002e44:	eb63 0501 	sbc.w	r5, r3, r1
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	00eb      	lsls	r3, r5, #3
 8002e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e56:	00e2      	lsls	r2, r4, #3
 8002e58:	4614      	mov	r4, r2
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	18e3      	adds	r3, r4, r3
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	464b      	mov	r3, r9
 8002e64:	eb45 0303 	adc.w	r3, r5, r3
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e76:	4629      	mov	r1, r5
 8002e78:	028b      	lsls	r3, r1, #10
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e80:	4621      	mov	r1, r4
 8002e82:	028a      	lsls	r2, r1, #10
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e96:	f7fd fa0b 	bl	80002b0 <__aeabi_uldivmod>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x458>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0f1b      	lsrs	r3, r3, #28
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ec2:	e003      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	37b8      	adds	r7, #184	@ 0xb8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	00f42400 	.word	0x00f42400

08002ee4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e28d      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8083 	beq.w	800300a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f04:	4b94      	ldr	r3, [pc, #592]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d019      	beq.n	8002f44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f10:	4b91      	ldr	r3, [pc, #580]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f28:	d00c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	d112      	bne.n	8002f5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f36:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f42:	d10b      	bne.n	8002f5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	4b84      	ldr	r3, [pc, #528]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d05b      	beq.n	8003008 <HAL_RCC_OscConfig+0x124>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d157      	bne.n	8003008 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e25a      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x90>
 8002f66:	4b7c      	ldr	r3, [pc, #496]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a7b      	ldr	r2, [pc, #492]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e01d      	b.n	8002fb0 <HAL_RCC_OscConfig+0xcc>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0xb4>
 8002f7e:	4b76      	ldr	r3, [pc, #472]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a75      	ldr	r2, [pc, #468]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b73      	ldr	r3, [pc, #460]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a72      	ldr	r2, [pc, #456]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xcc>
 8002f98:	4b6f      	ldr	r3, [pc, #444]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f97e 	bl	80012b8 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f97a 	bl	80012b8 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	@ 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e21f      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b61      	ldr	r3, [pc, #388]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xdc>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f96a 	bl	80012b8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe f966 	bl	80012b8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e20b      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	4b57      	ldr	r3, [pc, #348]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x104>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06f      	beq.n	80030f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003016:	4b50      	ldr	r3, [pc, #320]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b00      	cmp	r3, #0
 8003020:	d017      	beq.n	8003052 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003022:	4b4d      	ldr	r3, [pc, #308]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
        || \
 800302a:	2b08      	cmp	r3, #8
 800302c:	d105      	bne.n	800303a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800302e:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b44      	ldr	r3, [pc, #272]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x186>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1d3      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4937      	ldr	r1, [pc, #220]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	e03a      	b.n	80030f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_OscConfig+0x278>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe f913 	bl	80012b8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003096:	f7fe f90f 	bl	80012b8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1b4      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ca:	4b24      	ldr	r3, [pc, #144]	@ (800315c <HAL_RCC_OscConfig+0x278>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe f8f2 	bl	80012b8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d8:	f7fe f8ee 	bl	80012b8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e193      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d036      	beq.n	8003170 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <HAL_RCC_OscConfig+0x27c>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe f8d2 	bl	80012b8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7fe f8ce 	bl	80012b8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e173      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 800312c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x234>
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_RCC_OscConfig+0x27c>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fe f8bb 	bl	80012b8 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	e00e      	b.n	8003164 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003146:	f7fe f8b7 	bl	80012b8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d907      	bls.n	8003164 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e15c      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
 8003158:	40023800 	.word	0x40023800
 800315c:	42470000 	.word	0x42470000
 8003160:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	4b8a      	ldr	r3, [pc, #552]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ea      	bne.n	8003146 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8097 	beq.w	80032ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b83      	ldr	r3, [pc, #524]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	4b7f      	ldr	r3, [pc, #508]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	4a7e      	ldr	r2, [pc, #504]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
 800319e:	4b7c      	ldr	r3, [pc, #496]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b79      	ldr	r3, [pc, #484]	@ (8003394 <HAL_RCC_OscConfig+0x4b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b76      	ldr	r3, [pc, #472]	@ (8003394 <HAL_RCC_OscConfig+0x4b0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a75      	ldr	r2, [pc, #468]	@ (8003394 <HAL_RCC_OscConfig+0x4b0>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe f877 	bl	80012b8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fe f873 	bl	80012b8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e118      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003394 <HAL_RCC_OscConfig+0x4b0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x31e>
 80031f4:	4b66      	ldr	r3, [pc, #408]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f8:	4a65      	ldr	r2, [pc, #404]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003200:	e01c      	b.n	800323c <HAL_RCC_OscConfig+0x358>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x340>
 800320a:	4b61      	ldr	r3, [pc, #388]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a60      	ldr	r2, [pc, #384]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
 8003216:	4b5e      	ldr	r3, [pc, #376]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	4a5d      	ldr	r2, [pc, #372]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	@ 0x70
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0x358>
 8003224:	4b5a      	ldr	r3, [pc, #360]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	4a59      	ldr	r2, [pc, #356]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003230:	4b57      	ldr	r3, [pc, #348]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	4a56      	ldr	r2, [pc, #344]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	f023 0304 	bic.w	r3, r3, #4
 800323a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d015      	beq.n	8003270 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe f838 	bl	80012b8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fe f834 	bl	80012b8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0d7      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003262:	4b4b      	ldr	r3, [pc, #300]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ee      	beq.n	800324c <HAL_RCC_OscConfig+0x368>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7fe f822 	bl	80012b8 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fe f81e 	bl	80012b8 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0c1      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328e:	4b40      	ldr	r3, [pc, #256]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1ee      	bne.n	8003278 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 80032a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80ad 	beq.w	8003410 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b6:	4b36      	ldr	r3, [pc, #216]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d060      	beq.n	8003384 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d145      	bne.n	8003356 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b33      	ldr	r3, [pc, #204]	@ (8003398 <HAL_RCC_OscConfig+0x4b4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fd fff2 	bl	80012b8 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fd ffee 	bl	80012b8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e093      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	4b29      	ldr	r3, [pc, #164]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	019b      	lsls	r3, r3, #6
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	491b      	ldr	r1, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <HAL_RCC_OscConfig+0x4b4>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fd ffc3 	bl	80012b8 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd ffbf 	bl	80012b8 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e064      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003348:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x452>
 8003354:	e05c      	b.n	8003410 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <HAL_RCC_OscConfig+0x4b4>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd ffac 	bl	80012b8 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fd ffa8 	bl	80012b8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04d      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <HAL_RCC_OscConfig+0x4ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x480>
 8003382:	e045      	b.n	8003410 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d107      	bne.n	800339c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e040      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
 8003390:	40023800 	.word	0x40023800
 8003394:	40007000 	.word	0x40007000
 8003398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800339c:	4b1f      	ldr	r3, [pc, #124]	@ (800341c <HAL_RCC_OscConfig+0x538>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d030      	beq.n	800340c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d129      	bne.n	800340c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d122      	bne.n	800340c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d119      	bne.n	800340c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d10f      	bne.n	800340c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800

08003420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e041      	b.n	80034b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fd44 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 fc10 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e041      	b.n	8003554 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f839 	bl	800355c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f000 fbc1 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_TIM_PWM_Start+0x24>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e022      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b04      	cmp	r3, #4
 8003598:	d109      	bne.n	80035ae <HAL_TIM_PWM_Start+0x3e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e015      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d109      	bne.n	80035c8 <HAL_TIM_PWM_Start+0x58>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e008      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e07c      	b.n	80036dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x82>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f0:	e013      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003600:	e00b      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003610:	e003      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 ffda 	bl	80045dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2d      	ldr	r2, [pc, #180]	@ (80036e4 <HAL_TIM_PWM_Start+0x174>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_PWM_Start+0xcc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2c      	ldr	r2, [pc, #176]	@ (80036e8 <HAL_TIM_PWM_Start+0x178>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_TIM_PWM_Start+0xd0>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_TIM_PWM_Start+0xd2>
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003654:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <HAL_TIM_PWM_Start+0x174>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003668:	d01d      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <HAL_TIM_PWM_Start+0x17c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1d      	ldr	r2, [pc, #116]	@ (80036f0 <HAL_TIM_PWM_Start+0x180>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1c      	ldr	r2, [pc, #112]	@ (80036f4 <HAL_TIM_PWM_Start+0x184>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a16      	ldr	r2, [pc, #88]	@ (80036e8 <HAL_TIM_PWM_Start+0x178>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_TIM_PWM_Start+0x188>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x136>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a16      	ldr	r2, [pc, #88]	@ (80036fc <HAL_TIM_PWM_Start+0x18c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d010      	beq.n	80036da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	e007      	b.n	80036da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40001800 	.word	0x40001800

08003700 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f839 	bl	800379e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 faa0 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e088      	b.n	80038e2 <HAL_TIM_IC_ConfigChannel+0x130>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11b      	bne.n	8003816 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037ee:	f000 fd31 	bl	8004254 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 020c 	bic.w	r2, r2, #12
 8003800:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6999      	ldr	r1, [r3, #24]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]
 8003814:	e060      	b.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d11c      	bne.n	8003856 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800382c:	f000 fdb5 	bl	800439a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800383e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6999      	ldr	r1, [r3, #24]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	619a      	str	r2, [r3, #24]
 8003854:	e040      	b.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800386c:	f000 fe02 	bl	8004474 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 020c 	bic.w	r2, r2, #12
 800387e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69d9      	ldr	r1, [r3, #28]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	61da      	str	r2, [r3, #28]
 8003892:	e021      	b.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d11c      	bne.n	80038d4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80038aa:	f000 fe1f 	bl	80044ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	61da      	str	r2, [r3, #28]
 80038d2:	e001      	b.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003906:	2302      	movs	r3, #2
 8003908:	e0ae      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	f200 809f 	bhi.w	8003a58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800391a:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003955 	.word	0x08003955
 8003924:	08003a59 	.word	0x08003a59
 8003928:	08003a59 	.word	0x08003a59
 800392c:	08003a59 	.word	0x08003a59
 8003930:	08003995 	.word	0x08003995
 8003934:	08003a59 	.word	0x08003a59
 8003938:	08003a59 	.word	0x08003a59
 800393c:	08003a59 	.word	0x08003a59
 8003940:	080039d7 	.word	0x080039d7
 8003944:	08003a59 	.word	0x08003a59
 8003948:	08003a59 	.word	0x08003a59
 800394c:	08003a59 	.word	0x08003a59
 8003950:	08003a17 	.word	0x08003a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fa38 	bl	8003dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0208 	orr.w	r2, r2, #8
 800396e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0204 	bic.w	r2, r2, #4
 800397e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	619a      	str	r2, [r3, #24]
      break;
 8003992:	e064      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fa88 	bl	8003eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6999      	ldr	r1, [r3, #24]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	021a      	lsls	r2, r3, #8
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	619a      	str	r2, [r3, #24]
      break;
 80039d4:	e043      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fadd 	bl	8003f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0208 	orr.w	r2, r2, #8
 80039f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0204 	bic.w	r2, r2, #4
 8003a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	61da      	str	r2, [r3, #28]
      break;
 8003a14:	e023      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fb31 	bl	8004084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69d9      	ldr	r1, [r3, #28]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	61da      	str	r2, [r3, #28]
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIM_ConfigClockSource+0x1c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0b4      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x186>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac4:	d03e      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0xd4>
 8003ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aca:	f200 8087 	bhi.w	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	f000 8086 	beq.w	8003be2 <HAL_TIM_ConfigClockSource+0x172>
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ada:	d87f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b70      	cmp	r3, #112	@ 0x70
 8003ade:	d01a      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xa6>
 8003ae0:	2b70      	cmp	r3, #112	@ 0x70
 8003ae2:	d87b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b60      	cmp	r3, #96	@ 0x60
 8003ae6:	d050      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x11a>
 8003ae8:	2b60      	cmp	r3, #96	@ 0x60
 8003aea:	d877      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b50      	cmp	r3, #80	@ 0x50
 8003aee:	d03c      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0xfa>
 8003af0:	2b50      	cmp	r3, #80	@ 0x50
 8003af2:	d873      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d058      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x13a>
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	d86f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b30      	cmp	r3, #48	@ 0x30
 8003afe:	d064      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b30      	cmp	r3, #48	@ 0x30
 8003b02:	d86b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d060      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d867      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d05c      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d05a      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	e062      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	f000 fd39 	bl	800459c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
      break;
 8003b42:	e04f      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b54:	f000 fd22 	bl	800459c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b66:	609a      	str	r2, [r3, #8]
      break;
 8003b68:	e03c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 fbe0 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2150      	movs	r1, #80	@ 0x50
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fcef 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e02c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 fc3c 	bl	8004414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2160      	movs	r1, #96	@ 0x60
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fcdf 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e01c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 fbc0 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fccf 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e00c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f000 fcc6 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003bda:	e003      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e000      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e031      	b.n	8003c7a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa81 	bl	8004130 <TIM_SlaveTimer_SetConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e018      	b.n	8003c7a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c56:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c66:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a43      	ldr	r2, [pc, #268]	@ (8003da4 <TIM_Base_SetConfig+0x120>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca2:	d00f      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a40      	ldr	r2, [pc, #256]	@ (8003da8 <TIM_Base_SetConfig+0x124>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3f      	ldr	r2, [pc, #252]	@ (8003dac <TIM_Base_SetConfig+0x128>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d007      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8003db0 <TIM_Base_SetConfig+0x12c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8003db4 <TIM_Base_SetConfig+0x130>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d108      	bne.n	8003cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a32      	ldr	r2, [pc, #200]	@ (8003da4 <TIM_Base_SetConfig+0x120>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d02b      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce4:	d027      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8003da8 <TIM_Base_SetConfig+0x124>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d023      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8003dac <TIM_Base_SetConfig+0x128>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01f      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8003db0 <TIM_Base_SetConfig+0x12c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01b      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <TIM_Base_SetConfig+0x130>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d017      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2b      	ldr	r2, [pc, #172]	@ (8003db8 <TIM_Base_SetConfig+0x134>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <TIM_Base_SetConfig+0x138>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00f      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a29      	ldr	r2, [pc, #164]	@ (8003dc0 <TIM_Base_SetConfig+0x13c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a28      	ldr	r2, [pc, #160]	@ (8003dc4 <TIM_Base_SetConfig+0x140>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a27      	ldr	r2, [pc, #156]	@ (8003dc8 <TIM_Base_SetConfig+0x144>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <TIM_Base_SetConfig+0x148>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d108      	bne.n	8003d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a0e      	ldr	r2, [pc, #56]	@ (8003da4 <TIM_Base_SetConfig+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_Base_SetConfig+0xf2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a10      	ldr	r2, [pc, #64]	@ (8003db4 <TIM_Base_SetConfig+0x130>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d103      	bne.n	8003d7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f043 0204 	orr.w	r2, r3, #4
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40001800 	.word	0x40001800
 8003dc8:	40001c00 	.word	0x40001c00
 8003dcc:	40002000 	.word	0x40002000

08003dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f023 0201 	bic.w	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 0302 	bic.w	r3, r3, #2
 8003e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <TIM_OC1_SetConfig+0xd8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC1_SetConfig+0x64>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003eac <TIM_OC1_SetConfig+0xdc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10c      	bne.n	8003e4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0308 	bic.w	r3, r3, #8
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 0304 	bic.w	r3, r3, #4
 8003e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <TIM_OC1_SetConfig+0xd8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC1_SetConfig+0x8e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a14      	ldr	r2, [pc, #80]	@ (8003eac <TIM_OC1_SetConfig+0xdc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d111      	bne.n	8003e82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	621a      	str	r2, [r3, #32]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40010400 	.word	0x40010400

08003eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0210 	bic.w	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0320 	bic.w	r3, r3, #32
 8003efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	@ (8003f94 <TIM_OC2_SetConfig+0xe4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_OC2_SetConfig+0x68>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a21      	ldr	r2, [pc, #132]	@ (8003f98 <TIM_OC2_SetConfig+0xe8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d10d      	bne.n	8003f34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a17      	ldr	r2, [pc, #92]	@ (8003f94 <TIM_OC2_SetConfig+0xe4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_OC2_SetConfig+0x94>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <TIM_OC2_SetConfig+0xe8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d113      	bne.n	8003f6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40010400 	.word	0x40010400

08003f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a21      	ldr	r2, [pc, #132]	@ (800407c <TIM_OC3_SetConfig+0xe0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_OC3_SetConfig+0x66>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a20      	ldr	r2, [pc, #128]	@ (8004080 <TIM_OC3_SetConfig+0xe4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10d      	bne.n	800401e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800401c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a16      	ldr	r2, [pc, #88]	@ (800407c <TIM_OC3_SetConfig+0xe0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC3_SetConfig+0x92>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <TIM_OC3_SetConfig+0xe4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d113      	bne.n	8004056 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40010000 	.word	0x40010000
 8004080:	40010400 	.word	0x40010400

08004084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a12      	ldr	r2, [pc, #72]	@ (8004128 <TIM_OC4_SetConfig+0xa4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_OC4_SetConfig+0x68>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a11      	ldr	r2, [pc, #68]	@ (800412c <TIM_OC4_SetConfig+0xa8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d109      	bne.n	8004100 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40010400 	.word	0x40010400

08004130 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 0307 	bic.w	r3, r3, #7
 800415e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b70      	cmp	r3, #112	@ 0x70
 8004178:	d01a      	beq.n	80041b0 <TIM_SlaveTimer_SetConfig+0x80>
 800417a:	2b70      	cmp	r3, #112	@ 0x70
 800417c:	d860      	bhi.n	8004240 <TIM_SlaveTimer_SetConfig+0x110>
 800417e:	2b60      	cmp	r3, #96	@ 0x60
 8004180:	d054      	beq.n	800422c <TIM_SlaveTimer_SetConfig+0xfc>
 8004182:	2b60      	cmp	r3, #96	@ 0x60
 8004184:	d85c      	bhi.n	8004240 <TIM_SlaveTimer_SetConfig+0x110>
 8004186:	2b50      	cmp	r3, #80	@ 0x50
 8004188:	d046      	beq.n	8004218 <TIM_SlaveTimer_SetConfig+0xe8>
 800418a:	2b50      	cmp	r3, #80	@ 0x50
 800418c:	d858      	bhi.n	8004240 <TIM_SlaveTimer_SetConfig+0x110>
 800418e:	2b40      	cmp	r3, #64	@ 0x40
 8004190:	d019      	beq.n	80041c6 <TIM_SlaveTimer_SetConfig+0x96>
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d854      	bhi.n	8004240 <TIM_SlaveTimer_SetConfig+0x110>
 8004196:	2b30      	cmp	r3, #48	@ 0x30
 8004198:	d055      	beq.n	8004246 <TIM_SlaveTimer_SetConfig+0x116>
 800419a:	2b30      	cmp	r3, #48	@ 0x30
 800419c:	d850      	bhi.n	8004240 <TIM_SlaveTimer_SetConfig+0x110>
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d051      	beq.n	8004246 <TIM_SlaveTimer_SetConfig+0x116>
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d84c      	bhi.n	8004240 <TIM_SlaveTimer_SetConfig+0x110>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d04d      	beq.n	8004246 <TIM_SlaveTimer_SetConfig+0x116>
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d04b      	beq.n	8004246 <TIM_SlaveTimer_SetConfig+0x116>
 80041ae:	e047      	b.n	8004240 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80041c0:	f000 f9ec 	bl	800459c <TIM_ETR_SetConfig>
      break;
 80041c4:	e040      	b.n	8004248 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d101      	bne.n	80041d2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e03b      	b.n	800424a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041f8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
      break;
 8004216:	e017      	b.n	8004248 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004224:	461a      	mov	r2, r3
 8004226:	f000 f889 	bl	800433c <TIM_TI1_ConfigInputStage>
      break;
 800422a:	e00d      	b.n	8004248 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004238:	461a      	mov	r2, r3
 800423a:	f000 f8eb 	bl	8004414 <TIM_TI2_ConfigInputStage>
      break;
 800423e:	e003      	b.n	8004248 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e000      	b.n	8004248 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004246:	bf00      	nop
  }

  return status;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f023 0201 	bic.w	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a28      	ldr	r2, [pc, #160]	@ (8004320 <TIM_TI1_SetConfig+0xcc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01b      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d017      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a25      	ldr	r2, [pc, #148]	@ (8004324 <TIM_TI1_SetConfig+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a24      	ldr	r2, [pc, #144]	@ (8004328 <TIM_TI1_SetConfig+0xd4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00f      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a23      	ldr	r2, [pc, #140]	@ (800432c <TIM_TI1_SetConfig+0xd8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00b      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a22      	ldr	r2, [pc, #136]	@ (8004330 <TIM_TI1_SetConfig+0xdc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a21      	ldr	r2, [pc, #132]	@ (8004334 <TIM_TI1_SetConfig+0xe0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a20      	ldr	r2, [pc, #128]	@ (8004338 <TIM_TI1_SetConfig+0xe4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <TIM_TI1_SetConfig+0x6a>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <TIM_TI1_SetConfig+0x6c>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e003      	b.n	80042de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f023 030a 	bic.w	r3, r3, #10
 80042f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f003 030a 	and.w	r3, r3, #10
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40010400 	.word	0x40010400
 8004334:	40014000 	.word	0x40014000
 8004338:	40001800 	.word	0x40001800

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800439a:	b480      	push	{r7}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f023 0210 	bic.w	r2, r3, #16
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	b29b      	uxth	r3, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0210 	bic.w	r2, r3, #16
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800443e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	031b      	lsls	r3, r3, #12
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004450:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f023 0303 	bic.w	r3, r3, #3
 80044a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004518:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800452a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	031b      	lsls	r3, r3, #12
 8004530:	b29b      	uxth	r3, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800453e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	031b      	lsls	r3, r3, #12
 8004544:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	f043 0307 	orr.w	r3, r3, #7
 8004588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	021a      	lsls	r2, r3, #8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	431a      	orrs	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2201      	movs	r2, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	401a      	ands	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800463c:	2302      	movs	r3, #2
 800463e:	e05a      	b.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a21      	ldr	r2, [pc, #132]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468c:	d01d      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1d      	ldr	r2, [pc, #116]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1b      	ldr	r2, [pc, #108]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a18      	ldr	r2, [pc, #96]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a17      	ldr	r2, [pc, #92]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a15      	ldr	r2, [pc, #84]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40010400 	.word	0x40010400
 8004718:	40014000 	.word	0x40014000
 800471c:	40001800 	.word	0x40001800

08004720 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004738:	2302      	movs	r3, #2
 800473a:	e03d      	b.n	80047b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e042      	b.n	800485c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc fc0a 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	@ 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f973 	bl	8004af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800481c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800482c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800483c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	@ 0x28
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b20      	cmp	r3, #32
 8004882:	d175      	bne.n	8004970 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Transmit+0x2c>
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e06e      	b.n	8004972 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2221      	movs	r2, #33	@ 0x21
 800489e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a2:	f7fc fd09 	bl	80012b8 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048bc:	d108      	bne.n	80048d0 <HAL_UART_Transmit+0x6c>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e003      	b.n	80048d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d8:	e02e      	b.n	8004938 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2180      	movs	r1, #128	@ 0x80
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f848 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e03a      	b.n	8004972 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004910:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	3302      	adds	r3, #2
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	e007      	b.n	800492a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	3301      	adds	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1cb      	bne.n	80048da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	2140      	movs	r1, #64	@ 0x40
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f814 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e006      	b.n	8004972 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	e03b      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d037      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004994:	f7fc fc90 	bl	80012b8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	6a3a      	ldr	r2, [r7, #32]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <UART_WaitOnFlagUntilTimeout+0x30>
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e03a      	b.n	8004a24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d023      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b80      	cmp	r3, #128	@ 0x80
 80049c0:	d020      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b40      	cmp	r3, #64	@ 0x40
 80049c6:	d01d      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d116      	bne.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f81d 	bl	8004a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2208      	movs	r2, #8
 80049f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e00f      	b.n	8004a24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d0b4      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b095      	sub	sp, #84	@ 0x54
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a54:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3314      	adds	r3, #20
 8004a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3314      	adds	r3, #20
 8004a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d119      	bne.n	8004ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 0310 	bic.w	r3, r3, #16
 8004aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac4:	61ba      	str	r2, [r7, #24]
 8004ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ae6:	bf00      	nop
 8004ae8:	3754      	adds	r7, #84	@ 0x54
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af8:	b0c0      	sub	sp, #256	@ 0x100
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	68d9      	ldr	r1, [r3, #12]
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	ea40 0301 	orr.w	r3, r0, r1
 8004b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b4c:	f021 010c 	bic.w	r1, r1, #12
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	6999      	ldr	r1, [r3, #24]
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	ea40 0301 	orr.w	r3, r0, r1
 8004b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b8f      	ldr	r3, [pc, #572]	@ (8004dc0 <UART_SetConfig+0x2cc>)
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d005      	beq.n	8004b94 <UART_SetConfig+0xa0>
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8004dc4 <UART_SetConfig+0x2d0>)
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d104      	bne.n	8004b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b94:	f7fd ff62 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8004b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b9c:	e003      	b.n	8004ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b9e:	f7fd ff49 	bl	8002a34 <HAL_RCC_GetPCLK1Freq>
 8004ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb0:	f040 810c 	bne.w	8004dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	462b      	mov	r3, r5
 8004bca:	1891      	adds	r1, r2, r2
 8004bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bce:	415b      	adcs	r3, r3
 8004bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	eb12 0801 	adds.w	r8, r2, r1
 8004bdc:	4629      	mov	r1, r5
 8004bde:	eb43 0901 	adc.w	r9, r3, r1
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bf6:	4690      	mov	r8, r2
 8004bf8:	4699      	mov	r9, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	eb18 0303 	adds.w	r3, r8, r3
 8004c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c04:	462b      	mov	r3, r5
 8004c06:	eb49 0303 	adc.w	r3, r9, r3
 8004c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c22:	460b      	mov	r3, r1
 8004c24:	18db      	adds	r3, r3, r3
 8004c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c28:	4613      	mov	r3, r2
 8004c2a:	eb42 0303 	adc.w	r3, r2, r3
 8004c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c38:	f7fb fb3a 	bl	80002b0 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4b61      	ldr	r3, [pc, #388]	@ (8004dc8 <UART_SetConfig+0x2d4>)
 8004c42:	fba3 2302 	umull	r2, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	011c      	lsls	r4, r3, #4
 8004c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c64:	415b      	adcs	r3, r3
 8004c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c72:	4649      	mov	r1, r9
 8004c74:	eb43 0b01 	adc.w	fp, r3, r1
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c8c:	4692      	mov	sl, r2
 8004c8e:	469b      	mov	fp, r3
 8004c90:	4643      	mov	r3, r8
 8004c92:	eb1a 0303 	adds.w	r3, sl, r3
 8004c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	18db      	adds	r3, r3, r3
 8004cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	eb42 0303 	adc.w	r3, r2, r3
 8004cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cce:	f7fb faef 	bl	80002b0 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <UART_SetConfig+0x2d4>)
 8004cda:	fba3 2301 	umull	r2, r3, r3, r1
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2264      	movs	r2, #100	@ 0x64
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	1acb      	subs	r3, r1, r3
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cee:	4b36      	ldr	r3, [pc, #216]	@ (8004dc8 <UART_SetConfig+0x2d4>)
 8004cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cfc:	441c      	add	r4, r3
 8004cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	1891      	adds	r1, r2, r2
 8004d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d18:	415b      	adcs	r3, r3
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d20:	4641      	mov	r1, r8
 8004d22:	1851      	adds	r1, r2, r1
 8004d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d26:	4649      	mov	r1, r9
 8004d28:	414b      	adcs	r3, r1
 8004d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d38:	4659      	mov	r1, fp
 8004d3a:	00cb      	lsls	r3, r1, #3
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d42:	4651      	mov	r1, sl
 8004d44:	00ca      	lsls	r2, r1, #3
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	189b      	adds	r3, r3, r2
 8004d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d54:	464b      	mov	r3, r9
 8004d56:	460a      	mov	r2, r1
 8004d58:	eb42 0303 	adc.w	r3, r2, r3
 8004d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d74:	460b      	mov	r3, r1
 8004d76:	18db      	adds	r3, r3, r3
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	eb42 0303 	adc.w	r3, r2, r3
 8004d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d8a:	f7fb fa91 	bl	80002b0 <__aeabi_uldivmod>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc8 <UART_SetConfig+0x2d4>)
 8004d94:	fba3 1302 	umull	r1, r3, r3, r2
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	2164      	movs	r1, #100	@ 0x64
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	3332      	adds	r3, #50	@ 0x32
 8004da6:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <UART_SetConfig+0x2d4>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	f003 0207 	and.w	r2, r3, #7
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4422      	add	r2, r4
 8004dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dbc:	e106      	b.n	8004fcc <UART_SetConfig+0x4d8>
 8004dbe:	bf00      	nop
 8004dc0:	40011000 	.word	0x40011000
 8004dc4:	40011400 	.word	0x40011400
 8004dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dde:	4642      	mov	r2, r8
 8004de0:	464b      	mov	r3, r9
 8004de2:	1891      	adds	r1, r2, r2
 8004de4:	6239      	str	r1, [r7, #32]
 8004de6:	415b      	adcs	r3, r3
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dee:	4641      	mov	r1, r8
 8004df0:	1854      	adds	r4, r2, r1
 8004df2:	4649      	mov	r1, r9
 8004df4:	eb43 0501 	adc.w	r5, r3, r1
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	00eb      	lsls	r3, r5, #3
 8004e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e06:	00e2      	lsls	r2, r4, #3
 8004e08:	4614      	mov	r4, r2
 8004e0a:	461d      	mov	r5, r3
 8004e0c:	4643      	mov	r3, r8
 8004e0e:	18e3      	adds	r3, r4, r3
 8004e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e14:	464b      	mov	r3, r9
 8004e16:	eb45 0303 	adc.w	r3, r5, r3
 8004e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	008b      	lsls	r3, r1, #2
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e44:	4621      	mov	r1, r4
 8004e46:	008a      	lsls	r2, r1, #2
 8004e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e4c:	f7fb fa30 	bl	80002b0 <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4b60      	ldr	r3, [pc, #384]	@ (8004fd8 <UART_SetConfig+0x4e4>)
 8004e56:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	011c      	lsls	r4, r3, #4
 8004e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e70:	4642      	mov	r2, r8
 8004e72:	464b      	mov	r3, r9
 8004e74:	1891      	adds	r1, r2, r2
 8004e76:	61b9      	str	r1, [r7, #24]
 8004e78:	415b      	adcs	r3, r3
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e80:	4641      	mov	r1, r8
 8004e82:	1851      	adds	r1, r2, r1
 8004e84:	6139      	str	r1, [r7, #16]
 8004e86:	4649      	mov	r1, r9
 8004e88:	414b      	adcs	r3, r1
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e98:	4659      	mov	r1, fp
 8004e9a:	00cb      	lsls	r3, r1, #3
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea2:	4651      	mov	r1, sl
 8004ea4:	00ca      	lsls	r2, r1, #3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4642      	mov	r2, r8
 8004eae:	189b      	adds	r3, r3, r2
 8004eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	460a      	mov	r2, r1
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ed8:	4649      	mov	r1, r9
 8004eda:	008b      	lsls	r3, r1, #2
 8004edc:	4641      	mov	r1, r8
 8004ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	008a      	lsls	r2, r1, #2
 8004ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004eea:	f7fb f9e1 	bl	80002b0 <__aeabi_uldivmod>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4b38      	ldr	r3, [pc, #224]	@ (8004fd8 <UART_SetConfig+0x4e4>)
 8004ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	2264      	movs	r2, #100	@ 0x64
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	1acb      	subs	r3, r1, r3
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	3332      	adds	r3, #50	@ 0x32
 8004f08:	4a33      	ldr	r2, [pc, #204]	@ (8004fd8 <UART_SetConfig+0x4e4>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f14:	441c      	add	r4, r3
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f34:	4641      	mov	r1, r8
 8004f36:	1851      	adds	r1, r2, r1
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	414b      	adcs	r3, r1
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	00cb      	lsls	r3, r1, #3
 8004f50:	4651      	mov	r1, sl
 8004f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f56:	4651      	mov	r1, sl
 8004f58:	00ca      	lsls	r2, r1, #3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4642      	mov	r2, r8
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f66:	464b      	mov	r3, r9
 8004f68:	460a      	mov	r2, r1
 8004f6a:	eb42 0303 	adc.w	r3, r2, r3
 8004f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f88:	4649      	mov	r1, r9
 8004f8a:	008b      	lsls	r3, r1, #2
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f92:	4641      	mov	r1, r8
 8004f94:	008a      	lsls	r2, r1, #2
 8004f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f9a:	f7fb f989 	bl	80002b0 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd8 <UART_SetConfig+0x4e4>)
 8004fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	2164      	movs	r1, #100	@ 0x64
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	3332      	adds	r3, #50	@ 0x32
 8004fb6:	4a08      	ldr	r2, [pc, #32]	@ (8004fd8 <UART_SetConfig+0x4e4>)
 8004fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	f003 020f 	and.w	r2, r3, #15
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4422      	add	r2, r4
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd8:	51eb851f 	.word	0x51eb851f

08004fdc <sniprintf>:
 8004fdc:	b40c      	push	{r2, r3}
 8004fde:	b530      	push	{r4, r5, lr}
 8004fe0:	4b17      	ldr	r3, [pc, #92]	@ (8005040 <sniprintf+0x64>)
 8004fe2:	1e0c      	subs	r4, r1, #0
 8004fe4:	681d      	ldr	r5, [r3, #0]
 8004fe6:	b09d      	sub	sp, #116	@ 0x74
 8004fe8:	da08      	bge.n	8004ffc <sniprintf+0x20>
 8004fea:	238b      	movs	r3, #139	@ 0x8b
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff2:	b01d      	add	sp, #116	@ 0x74
 8004ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff8:	b002      	add	sp, #8
 8004ffa:	4770      	bx	lr
 8004ffc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005000:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005004:	bf14      	ite	ne
 8005006:	f104 33ff 	addne.w	r3, r4, #4294967295
 800500a:	4623      	moveq	r3, r4
 800500c:	9304      	str	r3, [sp, #16]
 800500e:	9307      	str	r3, [sp, #28]
 8005010:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005014:	9002      	str	r0, [sp, #8]
 8005016:	9006      	str	r0, [sp, #24]
 8005018:	f8ad 3016 	strh.w	r3, [sp, #22]
 800501c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800501e:	ab21      	add	r3, sp, #132	@ 0x84
 8005020:	a902      	add	r1, sp, #8
 8005022:	4628      	mov	r0, r5
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	f000 f995 	bl	8005354 <_svfiprintf_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	bfbc      	itt	lt
 800502e:	238b      	movlt	r3, #139	@ 0x8b
 8005030:	602b      	strlt	r3, [r5, #0]
 8005032:	2c00      	cmp	r4, #0
 8005034:	d0dd      	beq.n	8004ff2 <sniprintf+0x16>
 8005036:	9b02      	ldr	r3, [sp, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	e7d9      	b.n	8004ff2 <sniprintf+0x16>
 800503e:	bf00      	nop
 8005040:	2000000c 	.word	0x2000000c

08005044 <memset>:
 8005044:	4402      	add	r2, r0
 8005046:	4603      	mov	r3, r0
 8005048:	4293      	cmp	r3, r2
 800504a:	d100      	bne.n	800504e <memset+0xa>
 800504c:	4770      	bx	lr
 800504e:	f803 1b01 	strb.w	r1, [r3], #1
 8005052:	e7f9      	b.n	8005048 <memset+0x4>

08005054 <__errno>:
 8005054:	4b01      	ldr	r3, [pc, #4]	@ (800505c <__errno+0x8>)
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	2000000c 	.word	0x2000000c

08005060 <__libc_init_array>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4d0d      	ldr	r5, [pc, #52]	@ (8005098 <__libc_init_array+0x38>)
 8005064:	4c0d      	ldr	r4, [pc, #52]	@ (800509c <__libc_init_array+0x3c>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	2600      	movs	r6, #0
 800506c:	42a6      	cmp	r6, r4
 800506e:	d109      	bne.n	8005084 <__libc_init_array+0x24>
 8005070:	4d0b      	ldr	r5, [pc, #44]	@ (80050a0 <__libc_init_array+0x40>)
 8005072:	4c0c      	ldr	r4, [pc, #48]	@ (80050a4 <__libc_init_array+0x44>)
 8005074:	f000 fc66 	bl	8005944 <_init>
 8005078:	1b64      	subs	r4, r4, r5
 800507a:	10a4      	asrs	r4, r4, #2
 800507c:	2600      	movs	r6, #0
 800507e:	42a6      	cmp	r6, r4
 8005080:	d105      	bne.n	800508e <__libc_init_array+0x2e>
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	f855 3b04 	ldr.w	r3, [r5], #4
 8005088:	4798      	blx	r3
 800508a:	3601      	adds	r6, #1
 800508c:	e7ee      	b.n	800506c <__libc_init_array+0xc>
 800508e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005092:	4798      	blx	r3
 8005094:	3601      	adds	r6, #1
 8005096:	e7f2      	b.n	800507e <__libc_init_array+0x1e>
 8005098:	08005a0c 	.word	0x08005a0c
 800509c:	08005a0c 	.word	0x08005a0c
 80050a0:	08005a0c 	.word	0x08005a0c
 80050a4:	08005a10 	.word	0x08005a10

080050a8 <__retarget_lock_acquire_recursive>:
 80050a8:	4770      	bx	lr

080050aa <__retarget_lock_release_recursive>:
 80050aa:	4770      	bx	lr

080050ac <_free_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4605      	mov	r5, r0
 80050b0:	2900      	cmp	r1, #0
 80050b2:	d041      	beq.n	8005138 <_free_r+0x8c>
 80050b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b8:	1f0c      	subs	r4, r1, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bfb8      	it	lt
 80050be:	18e4      	addlt	r4, r4, r3
 80050c0:	f000 f8e0 	bl	8005284 <__malloc_lock>
 80050c4:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <_free_r+0x90>)
 80050c6:	6813      	ldr	r3, [r2, #0]
 80050c8:	b933      	cbnz	r3, 80050d8 <_free_r+0x2c>
 80050ca:	6063      	str	r3, [r4, #4]
 80050cc:	6014      	str	r4, [r2, #0]
 80050ce:	4628      	mov	r0, r5
 80050d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050d4:	f000 b8dc 	b.w	8005290 <__malloc_unlock>
 80050d8:	42a3      	cmp	r3, r4
 80050da:	d908      	bls.n	80050ee <_free_r+0x42>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	1821      	adds	r1, r4, r0
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf01      	itttt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	1809      	addeq	r1, r1, r0
 80050ea:	6021      	streq	r1, [r4, #0]
 80050ec:	e7ed      	b.n	80050ca <_free_r+0x1e>
 80050ee:	461a      	mov	r2, r3
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b10b      	cbz	r3, 80050f8 <_free_r+0x4c>
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	d9fa      	bls.n	80050ee <_free_r+0x42>
 80050f8:	6811      	ldr	r1, [r2, #0]
 80050fa:	1850      	adds	r0, r2, r1
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d10b      	bne.n	8005118 <_free_r+0x6c>
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	4401      	add	r1, r0
 8005104:	1850      	adds	r0, r2, r1
 8005106:	4283      	cmp	r3, r0
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	d1e0      	bne.n	80050ce <_free_r+0x22>
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	6053      	str	r3, [r2, #4]
 8005112:	4408      	add	r0, r1
 8005114:	6010      	str	r0, [r2, #0]
 8005116:	e7da      	b.n	80050ce <_free_r+0x22>
 8005118:	d902      	bls.n	8005120 <_free_r+0x74>
 800511a:	230c      	movs	r3, #12
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	e7d6      	b.n	80050ce <_free_r+0x22>
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	1821      	adds	r1, r4, r0
 8005124:	428b      	cmp	r3, r1
 8005126:	bf04      	itt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	bf04      	itt	eq
 8005130:	1809      	addeq	r1, r1, r0
 8005132:	6021      	streq	r1, [r4, #0]
 8005134:	6054      	str	r4, [r2, #4]
 8005136:	e7ca      	b.n	80050ce <_free_r+0x22>
 8005138:	bd38      	pop	{r3, r4, r5, pc}
 800513a:	bf00      	nop
 800513c:	20003654 	.word	0x20003654

08005140 <sbrk_aligned>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4e0f      	ldr	r6, [pc, #60]	@ (8005180 <sbrk_aligned+0x40>)
 8005144:	460c      	mov	r4, r1
 8005146:	6831      	ldr	r1, [r6, #0]
 8005148:	4605      	mov	r5, r0
 800514a:	b911      	cbnz	r1, 8005152 <sbrk_aligned+0x12>
 800514c:	f000 fba6 	bl	800589c <_sbrk_r>
 8005150:	6030      	str	r0, [r6, #0]
 8005152:	4621      	mov	r1, r4
 8005154:	4628      	mov	r0, r5
 8005156:	f000 fba1 	bl	800589c <_sbrk_r>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	d103      	bne.n	8005166 <sbrk_aligned+0x26>
 800515e:	f04f 34ff 	mov.w	r4, #4294967295
 8005162:	4620      	mov	r0, r4
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	1cc4      	adds	r4, r0, #3
 8005168:	f024 0403 	bic.w	r4, r4, #3
 800516c:	42a0      	cmp	r0, r4
 800516e:	d0f8      	beq.n	8005162 <sbrk_aligned+0x22>
 8005170:	1a21      	subs	r1, r4, r0
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fb92 	bl	800589c <_sbrk_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d1f2      	bne.n	8005162 <sbrk_aligned+0x22>
 800517c:	e7ef      	b.n	800515e <sbrk_aligned+0x1e>
 800517e:	bf00      	nop
 8005180:	20003650 	.word	0x20003650

08005184 <_malloc_r>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	1ccd      	adds	r5, r1, #3
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	3508      	adds	r5, #8
 8005190:	2d0c      	cmp	r5, #12
 8005192:	bf38      	it	cc
 8005194:	250c      	movcc	r5, #12
 8005196:	2d00      	cmp	r5, #0
 8005198:	4606      	mov	r6, r0
 800519a:	db01      	blt.n	80051a0 <_malloc_r+0x1c>
 800519c:	42a9      	cmp	r1, r5
 800519e:	d904      	bls.n	80051aa <_malloc_r+0x26>
 80051a0:	230c      	movs	r3, #12
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	2000      	movs	r0, #0
 80051a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005280 <_malloc_r+0xfc>
 80051ae:	f000 f869 	bl	8005284 <__malloc_lock>
 80051b2:	f8d8 3000 	ldr.w	r3, [r8]
 80051b6:	461c      	mov	r4, r3
 80051b8:	bb44      	cbnz	r4, 800520c <_malloc_r+0x88>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ffbf 	bl	8005140 <sbrk_aligned>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	4604      	mov	r4, r0
 80051c6:	d158      	bne.n	800527a <_malloc_r+0xf6>
 80051c8:	f8d8 4000 	ldr.w	r4, [r8]
 80051cc:	4627      	mov	r7, r4
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	d143      	bne.n	800525a <_malloc_r+0xd6>
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d04b      	beq.n	800526e <_malloc_r+0xea>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	4639      	mov	r1, r7
 80051da:	4630      	mov	r0, r6
 80051dc:	eb04 0903 	add.w	r9, r4, r3
 80051e0:	f000 fb5c 	bl	800589c <_sbrk_r>
 80051e4:	4581      	cmp	r9, r0
 80051e6:	d142      	bne.n	800526e <_malloc_r+0xea>
 80051e8:	6821      	ldr	r1, [r4, #0]
 80051ea:	1a6d      	subs	r5, r5, r1
 80051ec:	4629      	mov	r1, r5
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7ff ffa6 	bl	8005140 <sbrk_aligned>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d03a      	beq.n	800526e <_malloc_r+0xea>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	442b      	add	r3, r5
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	bb62      	cbnz	r2, 8005260 <_malloc_r+0xdc>
 8005206:	f8c8 7000 	str.w	r7, [r8]
 800520a:	e00f      	b.n	800522c <_malloc_r+0xa8>
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	1b52      	subs	r2, r2, r5
 8005210:	d420      	bmi.n	8005254 <_malloc_r+0xd0>
 8005212:	2a0b      	cmp	r2, #11
 8005214:	d917      	bls.n	8005246 <_malloc_r+0xc2>
 8005216:	1961      	adds	r1, r4, r5
 8005218:	42a3      	cmp	r3, r4
 800521a:	6025      	str	r5, [r4, #0]
 800521c:	bf18      	it	ne
 800521e:	6059      	strne	r1, [r3, #4]
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	bf08      	it	eq
 8005224:	f8c8 1000 	streq.w	r1, [r8]
 8005228:	5162      	str	r2, [r4, r5]
 800522a:	604b      	str	r3, [r1, #4]
 800522c:	4630      	mov	r0, r6
 800522e:	f000 f82f 	bl	8005290 <__malloc_unlock>
 8005232:	f104 000b 	add.w	r0, r4, #11
 8005236:	1d23      	adds	r3, r4, #4
 8005238:	f020 0007 	bic.w	r0, r0, #7
 800523c:	1ac2      	subs	r2, r0, r3
 800523e:	bf1c      	itt	ne
 8005240:	1a1b      	subne	r3, r3, r0
 8005242:	50a3      	strne	r3, [r4, r2]
 8005244:	e7af      	b.n	80051a6 <_malloc_r+0x22>
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	42a3      	cmp	r3, r4
 800524a:	bf0c      	ite	eq
 800524c:	f8c8 2000 	streq.w	r2, [r8]
 8005250:	605a      	strne	r2, [r3, #4]
 8005252:	e7eb      	b.n	800522c <_malloc_r+0xa8>
 8005254:	4623      	mov	r3, r4
 8005256:	6864      	ldr	r4, [r4, #4]
 8005258:	e7ae      	b.n	80051b8 <_malloc_r+0x34>
 800525a:	463c      	mov	r4, r7
 800525c:	687f      	ldr	r7, [r7, #4]
 800525e:	e7b6      	b.n	80051ce <_malloc_r+0x4a>
 8005260:	461a      	mov	r2, r3
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	d1fb      	bne.n	8005260 <_malloc_r+0xdc>
 8005268:	2300      	movs	r3, #0
 800526a:	6053      	str	r3, [r2, #4]
 800526c:	e7de      	b.n	800522c <_malloc_r+0xa8>
 800526e:	230c      	movs	r3, #12
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	4630      	mov	r0, r6
 8005274:	f000 f80c 	bl	8005290 <__malloc_unlock>
 8005278:	e794      	b.n	80051a4 <_malloc_r+0x20>
 800527a:	6005      	str	r5, [r0, #0]
 800527c:	e7d6      	b.n	800522c <_malloc_r+0xa8>
 800527e:	bf00      	nop
 8005280:	20003654 	.word	0x20003654

08005284 <__malloc_lock>:
 8005284:	4801      	ldr	r0, [pc, #4]	@ (800528c <__malloc_lock+0x8>)
 8005286:	f7ff bf0f 	b.w	80050a8 <__retarget_lock_acquire_recursive>
 800528a:	bf00      	nop
 800528c:	2000364c 	.word	0x2000364c

08005290 <__malloc_unlock>:
 8005290:	4801      	ldr	r0, [pc, #4]	@ (8005298 <__malloc_unlock+0x8>)
 8005292:	f7ff bf0a 	b.w	80050aa <__retarget_lock_release_recursive>
 8005296:	bf00      	nop
 8005298:	2000364c 	.word	0x2000364c

0800529c <__ssputs_r>:
 800529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	688e      	ldr	r6, [r1, #8]
 80052a2:	461f      	mov	r7, r3
 80052a4:	42be      	cmp	r6, r7
 80052a6:	680b      	ldr	r3, [r1, #0]
 80052a8:	4682      	mov	sl, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	4690      	mov	r8, r2
 80052ae:	d82d      	bhi.n	800530c <__ssputs_r+0x70>
 80052b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80052b8:	d026      	beq.n	8005308 <__ssputs_r+0x6c>
 80052ba:	6965      	ldr	r5, [r4, #20]
 80052bc:	6909      	ldr	r1, [r1, #16]
 80052be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052c2:	eba3 0901 	sub.w	r9, r3, r1
 80052c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052ca:	1c7b      	adds	r3, r7, #1
 80052cc:	444b      	add	r3, r9
 80052ce:	106d      	asrs	r5, r5, #1
 80052d0:	429d      	cmp	r5, r3
 80052d2:	bf38      	it	cc
 80052d4:	461d      	movcc	r5, r3
 80052d6:	0553      	lsls	r3, r2, #21
 80052d8:	d527      	bpl.n	800532a <__ssputs_r+0x8e>
 80052da:	4629      	mov	r1, r5
 80052dc:	f7ff ff52 	bl	8005184 <_malloc_r>
 80052e0:	4606      	mov	r6, r0
 80052e2:	b360      	cbz	r0, 800533e <__ssputs_r+0xa2>
 80052e4:	6921      	ldr	r1, [r4, #16]
 80052e6:	464a      	mov	r2, r9
 80052e8:	f000 fae8 	bl	80058bc <memcpy>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80052f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	6126      	str	r6, [r4, #16]
 80052fa:	6165      	str	r5, [r4, #20]
 80052fc:	444e      	add	r6, r9
 80052fe:	eba5 0509 	sub.w	r5, r5, r9
 8005302:	6026      	str	r6, [r4, #0]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	463e      	mov	r6, r7
 8005308:	42be      	cmp	r6, r7
 800530a:	d900      	bls.n	800530e <__ssputs_r+0x72>
 800530c:	463e      	mov	r6, r7
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	4632      	mov	r2, r6
 8005312:	4641      	mov	r1, r8
 8005314:	f000 faa8 	bl	8005868 <memmove>
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	1b9b      	subs	r3, r3, r6
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	4433      	add	r3, r6
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	2000      	movs	r0, #0
 8005326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532a:	462a      	mov	r2, r5
 800532c:	f000 fad4 	bl	80058d8 <_realloc_r>
 8005330:	4606      	mov	r6, r0
 8005332:	2800      	cmp	r0, #0
 8005334:	d1e0      	bne.n	80052f8 <__ssputs_r+0x5c>
 8005336:	6921      	ldr	r1, [r4, #16]
 8005338:	4650      	mov	r0, sl
 800533a:	f7ff feb7 	bl	80050ac <_free_r>
 800533e:	230c      	movs	r3, #12
 8005340:	f8ca 3000 	str.w	r3, [sl]
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800534a:	81a3      	strh	r3, [r4, #12]
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	e7e9      	b.n	8005326 <__ssputs_r+0x8a>
	...

08005354 <_svfiprintf_r>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4698      	mov	r8, r3
 800535a:	898b      	ldrh	r3, [r1, #12]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	b09d      	sub	sp, #116	@ 0x74
 8005360:	4607      	mov	r7, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4614      	mov	r4, r2
 8005366:	d510      	bpl.n	800538a <_svfiprintf_r+0x36>
 8005368:	690b      	ldr	r3, [r1, #16]
 800536a:	b973      	cbnz	r3, 800538a <_svfiprintf_r+0x36>
 800536c:	2140      	movs	r1, #64	@ 0x40
 800536e:	f7ff ff09 	bl	8005184 <_malloc_r>
 8005372:	6028      	str	r0, [r5, #0]
 8005374:	6128      	str	r0, [r5, #16]
 8005376:	b930      	cbnz	r0, 8005386 <_svfiprintf_r+0x32>
 8005378:	230c      	movs	r3, #12
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	b01d      	add	sp, #116	@ 0x74
 8005382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005386:	2340      	movs	r3, #64	@ 0x40
 8005388:	616b      	str	r3, [r5, #20]
 800538a:	2300      	movs	r3, #0
 800538c:	9309      	str	r3, [sp, #36]	@ 0x24
 800538e:	2320      	movs	r3, #32
 8005390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005394:	f8cd 800c 	str.w	r8, [sp, #12]
 8005398:	2330      	movs	r3, #48	@ 0x30
 800539a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005538 <_svfiprintf_r+0x1e4>
 800539e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053a2:	f04f 0901 	mov.w	r9, #1
 80053a6:	4623      	mov	r3, r4
 80053a8:	469a      	mov	sl, r3
 80053aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ae:	b10a      	cbz	r2, 80053b4 <_svfiprintf_r+0x60>
 80053b0:	2a25      	cmp	r2, #37	@ 0x25
 80053b2:	d1f9      	bne.n	80053a8 <_svfiprintf_r+0x54>
 80053b4:	ebba 0b04 	subs.w	fp, sl, r4
 80053b8:	d00b      	beq.n	80053d2 <_svfiprintf_r+0x7e>
 80053ba:	465b      	mov	r3, fp
 80053bc:	4622      	mov	r2, r4
 80053be:	4629      	mov	r1, r5
 80053c0:	4638      	mov	r0, r7
 80053c2:	f7ff ff6b 	bl	800529c <__ssputs_r>
 80053c6:	3001      	adds	r0, #1
 80053c8:	f000 80a7 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ce:	445a      	add	r2, fp
 80053d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053d2:	f89a 3000 	ldrb.w	r3, [sl]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 809f 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053dc:	2300      	movs	r3, #0
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e6:	f10a 0a01 	add.w	sl, sl, #1
 80053ea:	9304      	str	r3, [sp, #16]
 80053ec:	9307      	str	r3, [sp, #28]
 80053ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80053f4:	4654      	mov	r4, sl
 80053f6:	2205      	movs	r2, #5
 80053f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fc:	484e      	ldr	r0, [pc, #312]	@ (8005538 <_svfiprintf_r+0x1e4>)
 80053fe:	f7fa ff07 	bl	8000210 <memchr>
 8005402:	9a04      	ldr	r2, [sp, #16]
 8005404:	b9d8      	cbnz	r0, 800543e <_svfiprintf_r+0xea>
 8005406:	06d0      	lsls	r0, r2, #27
 8005408:	bf44      	itt	mi
 800540a:	2320      	movmi	r3, #32
 800540c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005410:	0711      	lsls	r1, r2, #28
 8005412:	bf44      	itt	mi
 8005414:	232b      	movmi	r3, #43	@ 0x2b
 8005416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800541a:	f89a 3000 	ldrb.w	r3, [sl]
 800541e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005420:	d015      	beq.n	800544e <_svfiprintf_r+0xfa>
 8005422:	9a07      	ldr	r2, [sp, #28]
 8005424:	4654      	mov	r4, sl
 8005426:	2000      	movs	r0, #0
 8005428:	f04f 0c0a 	mov.w	ip, #10
 800542c:	4621      	mov	r1, r4
 800542e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005432:	3b30      	subs	r3, #48	@ 0x30
 8005434:	2b09      	cmp	r3, #9
 8005436:	d94b      	bls.n	80054d0 <_svfiprintf_r+0x17c>
 8005438:	b1b0      	cbz	r0, 8005468 <_svfiprintf_r+0x114>
 800543a:	9207      	str	r2, [sp, #28]
 800543c:	e014      	b.n	8005468 <_svfiprintf_r+0x114>
 800543e:	eba0 0308 	sub.w	r3, r0, r8
 8005442:	fa09 f303 	lsl.w	r3, r9, r3
 8005446:	4313      	orrs	r3, r2
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	46a2      	mov	sl, r4
 800544c:	e7d2      	b.n	80053f4 <_svfiprintf_r+0xa0>
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	1d19      	adds	r1, r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	9103      	str	r1, [sp, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfbb      	ittet	lt
 800545a:	425b      	neglt	r3, r3
 800545c:	f042 0202 	orrlt.w	r2, r2, #2
 8005460:	9307      	strge	r3, [sp, #28]
 8005462:	9307      	strlt	r3, [sp, #28]
 8005464:	bfb8      	it	lt
 8005466:	9204      	strlt	r2, [sp, #16]
 8005468:	7823      	ldrb	r3, [r4, #0]
 800546a:	2b2e      	cmp	r3, #46	@ 0x2e
 800546c:	d10a      	bne.n	8005484 <_svfiprintf_r+0x130>
 800546e:	7863      	ldrb	r3, [r4, #1]
 8005470:	2b2a      	cmp	r3, #42	@ 0x2a
 8005472:	d132      	bne.n	80054da <_svfiprintf_r+0x186>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	9203      	str	r2, [sp, #12]
 800547c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005480:	3402      	adds	r4, #2
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005548 <_svfiprintf_r+0x1f4>
 8005488:	7821      	ldrb	r1, [r4, #0]
 800548a:	2203      	movs	r2, #3
 800548c:	4650      	mov	r0, sl
 800548e:	f7fa febf 	bl	8000210 <memchr>
 8005492:	b138      	cbz	r0, 80054a4 <_svfiprintf_r+0x150>
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	eba0 000a 	sub.w	r0, r0, sl
 800549a:	2240      	movs	r2, #64	@ 0x40
 800549c:	4082      	lsls	r2, r0
 800549e:	4313      	orrs	r3, r2
 80054a0:	3401      	adds	r4, #1
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	4824      	ldr	r0, [pc, #144]	@ (800553c <_svfiprintf_r+0x1e8>)
 80054aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054ae:	2206      	movs	r2, #6
 80054b0:	f7fa feae 	bl	8000210 <memchr>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d036      	beq.n	8005526 <_svfiprintf_r+0x1d2>
 80054b8:	4b21      	ldr	r3, [pc, #132]	@ (8005540 <_svfiprintf_r+0x1ec>)
 80054ba:	bb1b      	cbnz	r3, 8005504 <_svfiprintf_r+0x1b0>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	3308      	adds	r3, #8
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ca:	4433      	add	r3, r6
 80054cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ce:	e76a      	b.n	80053a6 <_svfiprintf_r+0x52>
 80054d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d4:	460c      	mov	r4, r1
 80054d6:	2001      	movs	r0, #1
 80054d8:	e7a8      	b.n	800542c <_svfiprintf_r+0xd8>
 80054da:	2300      	movs	r3, #0
 80054dc:	3401      	adds	r4, #1
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0c0a 	mov.w	ip, #10
 80054e6:	4620      	mov	r0, r4
 80054e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ec:	3a30      	subs	r2, #48	@ 0x30
 80054ee:	2a09      	cmp	r2, #9
 80054f0:	d903      	bls.n	80054fa <_svfiprintf_r+0x1a6>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c6      	beq.n	8005484 <_svfiprintf_r+0x130>
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	e7c4      	b.n	8005484 <_svfiprintf_r+0x130>
 80054fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80054fe:	4604      	mov	r4, r0
 8005500:	2301      	movs	r3, #1
 8005502:	e7f0      	b.n	80054e6 <_svfiprintf_r+0x192>
 8005504:	ab03      	add	r3, sp, #12
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	462a      	mov	r2, r5
 800550a:	4b0e      	ldr	r3, [pc, #56]	@ (8005544 <_svfiprintf_r+0x1f0>)
 800550c:	a904      	add	r1, sp, #16
 800550e:	4638      	mov	r0, r7
 8005510:	f3af 8000 	nop.w
 8005514:	1c42      	adds	r2, r0, #1
 8005516:	4606      	mov	r6, r0
 8005518:	d1d6      	bne.n	80054c8 <_svfiprintf_r+0x174>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	065b      	lsls	r3, r3, #25
 800551e:	f53f af2d 	bmi.w	800537c <_svfiprintf_r+0x28>
 8005522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005524:	e72c      	b.n	8005380 <_svfiprintf_r+0x2c>
 8005526:	ab03      	add	r3, sp, #12
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	462a      	mov	r2, r5
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <_svfiprintf_r+0x1f0>)
 800552e:	a904      	add	r1, sp, #16
 8005530:	4638      	mov	r0, r7
 8005532:	f000 f879 	bl	8005628 <_printf_i>
 8005536:	e7ed      	b.n	8005514 <_svfiprintf_r+0x1c0>
 8005538:	080059d0 	.word	0x080059d0
 800553c:	080059da 	.word	0x080059da
 8005540:	00000000 	.word	0x00000000
 8005544:	0800529d 	.word	0x0800529d
 8005548:	080059d6 	.word	0x080059d6

0800554c <_printf_common>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	4616      	mov	r6, r2
 8005552:	4698      	mov	r8, r3
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800555c:	4293      	cmp	r3, r2
 800555e:	bfb8      	it	lt
 8005560:	4613      	movlt	r3, r2
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005568:	4607      	mov	r7, r0
 800556a:	460c      	mov	r4, r1
 800556c:	b10a      	cbz	r2, 8005572 <_printf_common+0x26>
 800556e:	3301      	adds	r3, #1
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	0699      	lsls	r1, r3, #26
 8005576:	bf42      	ittt	mi
 8005578:	6833      	ldrmi	r3, [r6, #0]
 800557a:	3302      	addmi	r3, #2
 800557c:	6033      	strmi	r3, [r6, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	f015 0506 	ands.w	r5, r5, #6
 8005584:	d106      	bne.n	8005594 <_printf_common+0x48>
 8005586:	f104 0a19 	add.w	sl, r4, #25
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc26      	bgt.n	80055e2 <_printf_common+0x96>
 8005594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	3b00      	subs	r3, #0
 800559c:	bf18      	it	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d42b      	bmi.n	80055fc <_printf_common+0xb0>
 80055a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055a8:	4641      	mov	r1, r8
 80055aa:	4638      	mov	r0, r7
 80055ac:	47c8      	blx	r9
 80055ae:	3001      	adds	r0, #1
 80055b0:	d01e      	beq.n	80055f0 <_printf_common+0xa4>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	f003 0306 	and.w	r3, r3, #6
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	bf02      	ittt	eq
 80055be:	68e5      	ldreq	r5, [r4, #12]
 80055c0:	6833      	ldreq	r3, [r6, #0]
 80055c2:	1aed      	subeq	r5, r5, r3
 80055c4:	68a3      	ldr	r3, [r4, #8]
 80055c6:	bf0c      	ite	eq
 80055c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055cc:	2500      	movne	r5, #0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bfc4      	itt	gt
 80055d2:	1a9b      	subgt	r3, r3, r2
 80055d4:	18ed      	addgt	r5, r5, r3
 80055d6:	2600      	movs	r6, #0
 80055d8:	341a      	adds	r4, #26
 80055da:	42b5      	cmp	r5, r6
 80055dc:	d11a      	bne.n	8005614 <_printf_common+0xc8>
 80055de:	2000      	movs	r0, #0
 80055e0:	e008      	b.n	80055f4 <_printf_common+0xa8>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4652      	mov	r2, sl
 80055e6:	4641      	mov	r1, r8
 80055e8:	4638      	mov	r0, r7
 80055ea:	47c8      	blx	r9
 80055ec:	3001      	adds	r0, #1
 80055ee:	d103      	bne.n	80055f8 <_printf_common+0xac>
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f8:	3501      	adds	r5, #1
 80055fa:	e7c6      	b.n	800558a <_printf_common+0x3e>
 80055fc:	18e1      	adds	r1, r4, r3
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	2030      	movs	r0, #48	@ 0x30
 8005602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005606:	4422      	add	r2, r4
 8005608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800560c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005610:	3302      	adds	r3, #2
 8005612:	e7c7      	b.n	80055a4 <_printf_common+0x58>
 8005614:	2301      	movs	r3, #1
 8005616:	4622      	mov	r2, r4
 8005618:	4641      	mov	r1, r8
 800561a:	4638      	mov	r0, r7
 800561c:	47c8      	blx	r9
 800561e:	3001      	adds	r0, #1
 8005620:	d0e6      	beq.n	80055f0 <_printf_common+0xa4>
 8005622:	3601      	adds	r6, #1
 8005624:	e7d9      	b.n	80055da <_printf_common+0x8e>
	...

08005628 <_printf_i>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	7e0f      	ldrb	r7, [r1, #24]
 800562e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005630:	2f78      	cmp	r7, #120	@ 0x78
 8005632:	4691      	mov	r9, r2
 8005634:	4680      	mov	r8, r0
 8005636:	460c      	mov	r4, r1
 8005638:	469a      	mov	sl, r3
 800563a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800563e:	d807      	bhi.n	8005650 <_printf_i+0x28>
 8005640:	2f62      	cmp	r7, #98	@ 0x62
 8005642:	d80a      	bhi.n	800565a <_printf_i+0x32>
 8005644:	2f00      	cmp	r7, #0
 8005646:	f000 80d2 	beq.w	80057ee <_printf_i+0x1c6>
 800564a:	2f58      	cmp	r7, #88	@ 0x58
 800564c:	f000 80b9 	beq.w	80057c2 <_printf_i+0x19a>
 8005650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005658:	e03a      	b.n	80056d0 <_printf_i+0xa8>
 800565a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800565e:	2b15      	cmp	r3, #21
 8005660:	d8f6      	bhi.n	8005650 <_printf_i+0x28>
 8005662:	a101      	add	r1, pc, #4	@ (adr r1, 8005668 <_printf_i+0x40>)
 8005664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056d5 	.word	0x080056d5
 8005670:	08005651 	.word	0x08005651
 8005674:	08005651 	.word	0x08005651
 8005678:	08005651 	.word	0x08005651
 800567c:	08005651 	.word	0x08005651
 8005680:	080056d5 	.word	0x080056d5
 8005684:	08005651 	.word	0x08005651
 8005688:	08005651 	.word	0x08005651
 800568c:	08005651 	.word	0x08005651
 8005690:	08005651 	.word	0x08005651
 8005694:	080057d5 	.word	0x080057d5
 8005698:	080056ff 	.word	0x080056ff
 800569c:	0800578f 	.word	0x0800578f
 80056a0:	08005651 	.word	0x08005651
 80056a4:	08005651 	.word	0x08005651
 80056a8:	080057f7 	.word	0x080057f7
 80056ac:	08005651 	.word	0x08005651
 80056b0:	080056ff 	.word	0x080056ff
 80056b4:	08005651 	.word	0x08005651
 80056b8:	08005651 	.word	0x08005651
 80056bc:	08005797 	.word	0x08005797
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6032      	str	r2, [r6, #0]
 80056c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056d0:	2301      	movs	r3, #1
 80056d2:	e09d      	b.n	8005810 <_printf_i+0x1e8>
 80056d4:	6833      	ldr	r3, [r6, #0]
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	6031      	str	r1, [r6, #0]
 80056dc:	0606      	lsls	r6, r0, #24
 80056de:	d501      	bpl.n	80056e4 <_printf_i+0xbc>
 80056e0:	681d      	ldr	r5, [r3, #0]
 80056e2:	e003      	b.n	80056ec <_printf_i+0xc4>
 80056e4:	0645      	lsls	r5, r0, #25
 80056e6:	d5fb      	bpl.n	80056e0 <_printf_i+0xb8>
 80056e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	da03      	bge.n	80056f8 <_printf_i+0xd0>
 80056f0:	232d      	movs	r3, #45	@ 0x2d
 80056f2:	426d      	negs	r5, r5
 80056f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f8:	4859      	ldr	r0, [pc, #356]	@ (8005860 <_printf_i+0x238>)
 80056fa:	230a      	movs	r3, #10
 80056fc:	e011      	b.n	8005722 <_printf_i+0xfa>
 80056fe:	6821      	ldr	r1, [r4, #0]
 8005700:	6833      	ldr	r3, [r6, #0]
 8005702:	0608      	lsls	r0, r1, #24
 8005704:	f853 5b04 	ldr.w	r5, [r3], #4
 8005708:	d402      	bmi.n	8005710 <_printf_i+0xe8>
 800570a:	0649      	lsls	r1, r1, #25
 800570c:	bf48      	it	mi
 800570e:	b2ad      	uxthmi	r5, r5
 8005710:	2f6f      	cmp	r7, #111	@ 0x6f
 8005712:	4853      	ldr	r0, [pc, #332]	@ (8005860 <_printf_i+0x238>)
 8005714:	6033      	str	r3, [r6, #0]
 8005716:	bf14      	ite	ne
 8005718:	230a      	movne	r3, #10
 800571a:	2308      	moveq	r3, #8
 800571c:	2100      	movs	r1, #0
 800571e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005722:	6866      	ldr	r6, [r4, #4]
 8005724:	60a6      	str	r6, [r4, #8]
 8005726:	2e00      	cmp	r6, #0
 8005728:	bfa2      	ittt	ge
 800572a:	6821      	ldrge	r1, [r4, #0]
 800572c:	f021 0104 	bicge.w	r1, r1, #4
 8005730:	6021      	strge	r1, [r4, #0]
 8005732:	b90d      	cbnz	r5, 8005738 <_printf_i+0x110>
 8005734:	2e00      	cmp	r6, #0
 8005736:	d04b      	beq.n	80057d0 <_printf_i+0x1a8>
 8005738:	4616      	mov	r6, r2
 800573a:	fbb5 f1f3 	udiv	r1, r5, r3
 800573e:	fb03 5711 	mls	r7, r3, r1, r5
 8005742:	5dc7      	ldrb	r7, [r0, r7]
 8005744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005748:	462f      	mov	r7, r5
 800574a:	42bb      	cmp	r3, r7
 800574c:	460d      	mov	r5, r1
 800574e:	d9f4      	bls.n	800573a <_printf_i+0x112>
 8005750:	2b08      	cmp	r3, #8
 8005752:	d10b      	bne.n	800576c <_printf_i+0x144>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	07df      	lsls	r7, r3, #31
 8005758:	d508      	bpl.n	800576c <_printf_i+0x144>
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	6861      	ldr	r1, [r4, #4]
 800575e:	4299      	cmp	r1, r3
 8005760:	bfde      	ittt	le
 8005762:	2330      	movle	r3, #48	@ 0x30
 8005764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800576c:	1b92      	subs	r2, r2, r6
 800576e:	6122      	str	r2, [r4, #16]
 8005770:	f8cd a000 	str.w	sl, [sp]
 8005774:	464b      	mov	r3, r9
 8005776:	aa03      	add	r2, sp, #12
 8005778:	4621      	mov	r1, r4
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff fee6 	bl	800554c <_printf_common>
 8005780:	3001      	adds	r0, #1
 8005782:	d14a      	bne.n	800581a <_printf_i+0x1f2>
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	b004      	add	sp, #16
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f043 0320 	orr.w	r3, r3, #32
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	4833      	ldr	r0, [pc, #204]	@ (8005864 <_printf_i+0x23c>)
 8005798:	2778      	movs	r7, #120	@ 0x78
 800579a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	6831      	ldr	r1, [r6, #0]
 80057a2:	061f      	lsls	r7, r3, #24
 80057a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80057a8:	d402      	bmi.n	80057b0 <_printf_i+0x188>
 80057aa:	065f      	lsls	r7, r3, #25
 80057ac:	bf48      	it	mi
 80057ae:	b2ad      	uxthmi	r5, r5
 80057b0:	6031      	str	r1, [r6, #0]
 80057b2:	07d9      	lsls	r1, r3, #31
 80057b4:	bf44      	itt	mi
 80057b6:	f043 0320 	orrmi.w	r3, r3, #32
 80057ba:	6023      	strmi	r3, [r4, #0]
 80057bc:	b11d      	cbz	r5, 80057c6 <_printf_i+0x19e>
 80057be:	2310      	movs	r3, #16
 80057c0:	e7ac      	b.n	800571c <_printf_i+0xf4>
 80057c2:	4827      	ldr	r0, [pc, #156]	@ (8005860 <_printf_i+0x238>)
 80057c4:	e7e9      	b.n	800579a <_printf_i+0x172>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	f023 0320 	bic.w	r3, r3, #32
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	e7f6      	b.n	80057be <_printf_i+0x196>
 80057d0:	4616      	mov	r6, r2
 80057d2:	e7bd      	b.n	8005750 <_printf_i+0x128>
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	6825      	ldr	r5, [r4, #0]
 80057d8:	6961      	ldr	r1, [r4, #20]
 80057da:	1d18      	adds	r0, r3, #4
 80057dc:	6030      	str	r0, [r6, #0]
 80057de:	062e      	lsls	r6, r5, #24
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0x1c0>
 80057e4:	6019      	str	r1, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0x1c6>
 80057e8:	0668      	lsls	r0, r5, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0x1bc>
 80057ec:	8019      	strh	r1, [r3, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	4616      	mov	r6, r2
 80057f4:	e7bc      	b.n	8005770 <_printf_i+0x148>
 80057f6:	6833      	ldr	r3, [r6, #0]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	6032      	str	r2, [r6, #0]
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	2100      	movs	r1, #0
 8005802:	4630      	mov	r0, r6
 8005804:	f7fa fd04 	bl	8000210 <memchr>
 8005808:	b108      	cbz	r0, 800580e <_printf_i+0x1e6>
 800580a:	1b80      	subs	r0, r0, r6
 800580c:	6060      	str	r0, [r4, #4]
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	2300      	movs	r3, #0
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005818:	e7aa      	b.n	8005770 <_printf_i+0x148>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	4632      	mov	r2, r6
 800581e:	4649      	mov	r1, r9
 8005820:	4640      	mov	r0, r8
 8005822:	47d0      	blx	sl
 8005824:	3001      	adds	r0, #1
 8005826:	d0ad      	beq.n	8005784 <_printf_i+0x15c>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	d413      	bmi.n	8005856 <_printf_i+0x22e>
 800582e:	68e0      	ldr	r0, [r4, #12]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	4298      	cmp	r0, r3
 8005834:	bfb8      	it	lt
 8005836:	4618      	movlt	r0, r3
 8005838:	e7a6      	b.n	8005788 <_printf_i+0x160>
 800583a:	2301      	movs	r3, #1
 800583c:	4632      	mov	r2, r6
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d09d      	beq.n	8005784 <_printf_i+0x15c>
 8005848:	3501      	adds	r5, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	42ab      	cmp	r3, r5
 8005852:	dcf2      	bgt.n	800583a <_printf_i+0x212>
 8005854:	e7eb      	b.n	800582e <_printf_i+0x206>
 8005856:	2500      	movs	r5, #0
 8005858:	f104 0619 	add.w	r6, r4, #25
 800585c:	e7f5      	b.n	800584a <_printf_i+0x222>
 800585e:	bf00      	nop
 8005860:	080059e1 	.word	0x080059e1
 8005864:	080059f2 	.word	0x080059f2

08005868 <memmove>:
 8005868:	4288      	cmp	r0, r1
 800586a:	b510      	push	{r4, lr}
 800586c:	eb01 0402 	add.w	r4, r1, r2
 8005870:	d902      	bls.n	8005878 <memmove+0x10>
 8005872:	4284      	cmp	r4, r0
 8005874:	4623      	mov	r3, r4
 8005876:	d807      	bhi.n	8005888 <memmove+0x20>
 8005878:	1e43      	subs	r3, r0, #1
 800587a:	42a1      	cmp	r1, r4
 800587c:	d008      	beq.n	8005890 <memmove+0x28>
 800587e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005886:	e7f8      	b.n	800587a <memmove+0x12>
 8005888:	4402      	add	r2, r0
 800588a:	4601      	mov	r1, r0
 800588c:	428a      	cmp	r2, r1
 800588e:	d100      	bne.n	8005892 <memmove+0x2a>
 8005890:	bd10      	pop	{r4, pc}
 8005892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800589a:	e7f7      	b.n	800588c <memmove+0x24>

0800589c <_sbrk_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	@ (80058b8 <_sbrk_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f7fb fc2e 	bl	8001108 <_sbrk>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_sbrk_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_sbrk_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	20003648 	.word	0x20003648

080058bc <memcpy>:
 80058bc:	440a      	add	r2, r1
 80058be:	4291      	cmp	r1, r2
 80058c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c4:	d100      	bne.n	80058c8 <memcpy+0xc>
 80058c6:	4770      	bx	lr
 80058c8:	b510      	push	{r4, lr}
 80058ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d2:	4291      	cmp	r1, r2
 80058d4:	d1f9      	bne.n	80058ca <memcpy+0xe>
 80058d6:	bd10      	pop	{r4, pc}

080058d8 <_realloc_r>:
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4680      	mov	r8, r0
 80058de:	4615      	mov	r5, r2
 80058e0:	460c      	mov	r4, r1
 80058e2:	b921      	cbnz	r1, 80058ee <_realloc_r+0x16>
 80058e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	4611      	mov	r1, r2
 80058ea:	f7ff bc4b 	b.w	8005184 <_malloc_r>
 80058ee:	b92a      	cbnz	r2, 80058fc <_realloc_r+0x24>
 80058f0:	f7ff fbdc 	bl	80050ac <_free_r>
 80058f4:	2400      	movs	r4, #0
 80058f6:	4620      	mov	r0, r4
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058fc:	f000 f81a 	bl	8005934 <_malloc_usable_size_r>
 8005900:	4285      	cmp	r5, r0
 8005902:	4606      	mov	r6, r0
 8005904:	d802      	bhi.n	800590c <_realloc_r+0x34>
 8005906:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800590a:	d8f4      	bhi.n	80058f6 <_realloc_r+0x1e>
 800590c:	4629      	mov	r1, r5
 800590e:	4640      	mov	r0, r8
 8005910:	f7ff fc38 	bl	8005184 <_malloc_r>
 8005914:	4607      	mov	r7, r0
 8005916:	2800      	cmp	r0, #0
 8005918:	d0ec      	beq.n	80058f4 <_realloc_r+0x1c>
 800591a:	42b5      	cmp	r5, r6
 800591c:	462a      	mov	r2, r5
 800591e:	4621      	mov	r1, r4
 8005920:	bf28      	it	cs
 8005922:	4632      	movcs	r2, r6
 8005924:	f7ff ffca 	bl	80058bc <memcpy>
 8005928:	4621      	mov	r1, r4
 800592a:	4640      	mov	r0, r8
 800592c:	f7ff fbbe 	bl	80050ac <_free_r>
 8005930:	463c      	mov	r4, r7
 8005932:	e7e0      	b.n	80058f6 <_realloc_r+0x1e>

08005934 <_malloc_usable_size_r>:
 8005934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005938:	1f18      	subs	r0, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	bfbc      	itt	lt
 800593e:	580b      	ldrlt	r3, [r1, r0]
 8005940:	18c0      	addlt	r0, r0, r3
 8005942:	4770      	bx	lr

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
