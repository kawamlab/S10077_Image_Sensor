
S10077_Image_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080058c4  080058c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059bc  080059bc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c4  080059c4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c8  080059c8  000069c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080059cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003200  2000005c  08005a28  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000325c  08005a28  0000725c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1d7  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002304  00000000  00000000  00016263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00018568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1e  00000000  00000000  00019398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236d5  00000000  00000000  00019eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b38  00000000  00000000  0003d58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddc80  00000000  00000000  0004f0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cd43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  0012cd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00130e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080058ac 	.word	0x080058ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080058ac 	.word	0x080058ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <print_image_data>:
/* USER CODE BEGIN 0 */
/**
  * @brief  UART経由でスペクトルデータを送信
  * @retval None
  */
void print_image_data(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
    static char buf[10000];
    int n = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]

    // フレームヘッ�???????????????�???????????????
    n += snprintf(buf + n, sizeof(buf) - n, "BEGIN,");
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a22      	ldr	r2, [pc, #136]	@ (8000648 <print_image_data+0x98>)
 80005be:	1898      	adds	r0, r3, r2
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 80005c6:	3310      	adds	r3, #16
 80005c8:	4a20      	ldr	r2, [pc, #128]	@ (800064c <print_image_data+0x9c>)
 80005ca:	4619      	mov	r1, r3
 80005cc:	f004 fcba 	bl	8004f44 <sniprintf>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	607b      	str	r3, [r7, #4]

    // 288個のデータ�??
    for (int i = 0; i < 1024; ++i) {
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	e014      	b.n	8000608 <print_image_data+0x58>
    	// �???????????????後の値の後にもカンマを追加し、末尾でまとめてENDを追�???????????????
        n += snprintf(buf + n, sizeof(buf) - n, "%u,", adc_buffer[i]);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a19      	ldr	r2, [pc, #100]	@ (8000648 <print_image_data+0x98>)
 80005e2:	1898      	adds	r0, r3, r2
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f5c3 511c 	rsb	r1, r3, #9984	@ 0x2700
 80005ea:	3110      	adds	r1, #16
 80005ec:	4a18      	ldr	r2, [pc, #96]	@ (8000650 <print_image_data+0xa0>)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <print_image_data+0xa4>)
 80005f6:	f004 fca5 	bl	8004f44 <sniprintf>
 80005fa:	4602      	mov	r2, r0
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 1024; ++i) {
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800060e:	dbe6      	blt.n	80005de <print_image_data+0x2e>
    }

    // フレームフッター（Pythonのreadlineのために、必ず\r\nを付ける�???????????????
    n += snprintf(buf + n, sizeof(buf) - n, "END\r\n");
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <print_image_data+0x98>)
 8000614:	1898      	adds	r0, r3, r2
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 800061c:	3310      	adds	r3, #16
 800061e:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <print_image_data+0xa8>)
 8000620:	4619      	mov	r1, r3
 8000622:	f004 fc8f 	bl	8004f44 <sniprintf>
 8000626:	4602      	mov	r2, r0
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	607b      	str	r3, [r7, #4]

    // �???????????????括で送信
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, n, HAL_MAX_DELAY);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	4904      	ldr	r1, [pc, #16]	@ (8000648 <print_image_data+0x98>)
 8000638:	4808      	ldr	r0, [pc, #32]	@ (800065c <print_image_data+0xac>)
 800063a:	f004 f8c7 	bl	80047cc <HAL_UART_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200009fc 	.word	0x200009fc
 800064c:	080058c4 	.word	0x080058c4
 8000650:	200001f8 	.word	0x200001f8
 8000654:	080058cc 	.word	0x080058cc
 8000658:	080058d0 	.word	0x080058d0
 800065c:	200001b0 	.word	0x200001b0

08000660 <HAL_ADC_ConvCpltCallback>:
  * @note   DMAモードでは�?�この関数は指定された数のデータ転�?�がすべて完了した後に一度だけ呼び出される�??
  * @param  hadc: ADCハンドル
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	// 対象のADC1であるかを確�???????????????
  if(hadc->Instance == ADC1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x24>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d102      	bne.n	8000678 <HAL_ADC_ConvCpltCallback+0x18>
  {
	  // ハードウェアが自動的�???????????????288回のサンプリングと転送を完了したので、メインループに通知するためのフラグを設定す�???????????????
    data_ready_flag = true;
 8000672:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <HAL_ADC_ConvCpltCallback+0x28>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
  }
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40012000 	.word	0x40012000
 8000688:	200009f8 	.word	0x200009f8

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b092      	sub	sp, #72	@ 0x48
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fd5f 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f883 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fabb 	bl	8000c14 <MX_GPIO_Init>
  MX_DMA_Init();
 800069e:	f000 fa99 	bl	8000bd4 <MX_DMA_Init>
  MX_ADC1_Init();
 80006a2:	f000 f8ef 	bl	8000884 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006a6:	f000 f93f 	bl	8000928 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006aa:	f000 f9dd 	bl	8000a68 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80006ae:	f000 fa67 	bl	8000b80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // 1. CLKクロック信号
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 80006b2:	2100      	movs	r1, #0
 80006b4:	4830      	ldr	r0, [pc, #192]	@ (8000778 <main+0xec>)
 80006b6:	f002 ff0f 	bl	80034d8 <HAL_TIM_PWM_Start>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <main+0x38>
          Error_Handler();
 80006c0:	f000 fb18 	bl	8000cf4 <Error_Handler>
      }
  // 2. TRG信号の監視を開始
//  if (HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) {
//          Error_Handler();
//      }
  HAL_UART_Transmit(&huart2, (uint8_t*)"S10077 Image sensor Ready.\n", 49, HAL_MAX_DELAY);
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	2231      	movs	r2, #49	@ 0x31
 80006ca:	492c      	ldr	r1, [pc, #176]	@ (800077c <main+0xf0>)
 80006cc:	482c      	ldr	r0, [pc, #176]	@ (8000780 <main+0xf4>)
 80006ce:	f004 f87d 	bl	80047cc <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// 3. スペクトル収集サイクルを1回トリガーす�???????????????
	HAL_GPIO_WritePin(ST_GPIO_Port, ST_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006d8:	482a      	ldr	r0, [pc, #168]	@ (8000784 <main+0xf8>)
 80006da:	f002 f803 	bl	80026e4 <HAL_GPIO_WritePin>
	HAL_Delay(10); // 積分時間�???????????????10msに設定（必要に応じて調整可能�???????????????
 80006de:	200a      	movs	r0, #10
 80006e0:	f000 fdaa 	bl	8001238 <HAL_Delay>
	HAL_GPIO_WritePin(ST_GPIO_Port, ST_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ea:	4826      	ldr	r0, [pc, #152]	@ (8000784 <main+0xf8>)
 80006ec:	f001 fffa 	bl	80026e4 <HAL_GPIO_WritePin>
	// 4. ADCとDMAを起動�?�ハードウェアは自動的にTIM3から転�?�されるTRG信号�???????????????288回待機す�???????????????
    // --- 调试代码开始 ---
    HAL_UART_Transmit(&huart2, (uint8_t*)"[DEBUG] ST pulse sent. Starting ADC/DMA...\n", 42, 100);
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	222a      	movs	r2, #42	@ 0x2a
 80006f4:	4924      	ldr	r1, [pc, #144]	@ (8000788 <main+0xfc>)
 80006f6:	4822      	ldr	r0, [pc, #136]	@ (8000780 <main+0xf4>)
 80006f8:	f004 f868 	bl	80047cc <HAL_UART_Transmit>
    // --- 调试代码结束 ---
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, NUM_PIXELS) != HAL_OK) {
 80006fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000700:	4922      	ldr	r1, [pc, #136]	@ (800078c <main+0x100>)
 8000702:	4823      	ldr	r0, [pc, #140]	@ (8000790 <main+0x104>)
 8000704:	f000 fe00 	bl	8001308 <HAL_ADC_Start_DMA>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <main+0x86>
		Error_Handler();
 800070e:	f000 faf1 	bl	8000cf4 <Error_Handler>
	}

	// 5. 収集完了を待機�?�この間、CPUは完全にアイドル状態
    // --- 调试代码开始 ---
    HAL_UART_Transmit(&huart2, (uint8_t*)"[DEBUG] Waiting for data...\n", 28, 100);
 8000712:	2364      	movs	r3, #100	@ 0x64
 8000714:	221c      	movs	r2, #28
 8000716:	491f      	ldr	r1, [pc, #124]	@ (8000794 <main+0x108>)
 8000718:	4819      	ldr	r0, [pc, #100]	@ (8000780 <main+0xf4>)
 800071a:	f004 f857 	bl	80047cc <HAL_UART_Transmit>
    wait_start_time = HAL_GetTick(); // 记录进入while循环前的时间
 800071e:	f000 fd7f 	bl	8001220 <HAL_GetTick>
 8000722:	6478      	str	r0, [r7, #68]	@ 0x44
    // --- 调试代码结束 ---

	while (!data_ready_flag) {}
 8000724:	bf00      	nop
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <main+0x10c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f7      	bne.n	8000726 <main+0x9a>
    // --- 调试代码开始 ---
    uint32_t wait_duration = HAL_GetTick() - wait_start_time; // 计算等待花费的时间
 8000736:	f000 fd73 	bl	8001220 <HAL_GetTick>
 800073a:	4602      	mov	r2, r0
 800073c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
    snprintf(debug_msg, sizeof(debug_msg), "[DEBUG] Data ready! Waited for %lu ms.\n", wait_duration);
 8000742:	4638      	mov	r0, r7
 8000744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <main+0x110>)
 8000748:	2140      	movs	r1, #64	@ 0x40
 800074a:	f004 fbfb 	bl	8004f44 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 800074e:	463b      	mov	r3, r7
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd5d 	bl	8000210 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	4639      	mov	r1, r7
 800075c:	2364      	movs	r3, #100	@ 0x64
 800075e:	4808      	ldr	r0, [pc, #32]	@ (8000780 <main+0xf4>)
 8000760:	f004 f834 	bl	80047cc <HAL_UART_Transmit>
    // --- 调试代码结束 ---
	data_ready_flag = false; // 次の収集のためにフラグをリセット
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <main+0x10c>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]

	// 6. 収集完了後�?�データを処理して�?�信
    print_image_data();
 800076a:	f7ff ff21 	bl	80005b0 <print_image_data>
    HAL_Delay(10);
 800076e:	200a      	movs	r0, #10
 8000770:	f000 fd62 	bl	8001238 <HAL_Delay>
  {
 8000774:	e7ad      	b.n	80006d2 <main+0x46>
 8000776:	bf00      	nop
 8000778:	20000120 	.word	0x20000120
 800077c:	080058d8 	.word	0x080058d8
 8000780:	200001b0 	.word	0x200001b0
 8000784:	40020400 	.word	0x40020400
 8000788:	080058f4 	.word	0x080058f4
 800078c:	200001f8 	.word	0x200001f8
 8000790:	20000078 	.word	0x20000078
 8000794:	08005920 	.word	0x08005920
 8000798:	200009f8 	.word	0x200009f8
 800079c:	08005940 	.word	0x08005940

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	@ 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fbfc 	bl	8004fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <SystemClock_Config+0xdc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	4a2b      	ldr	r2, [pc, #172]	@ (800087c <SystemClock_Config+0xdc>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d4:	4b29      	ldr	r3, [pc, #164]	@ (800087c <SystemClock_Config+0xdc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <SystemClock_Config+0xe0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a25      	ldr	r2, [pc, #148]	@ (8000880 <SystemClock_Config+0xe0>)
 80007ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <SystemClock_Config+0xe0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000800:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000804:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800080e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000814:	23b4      	movs	r3, #180	@ 0xb4
 8000816:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fb0f 	bl	8002e4c <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000834:	f000 fa5e 	bl	8000cf4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000838:	f001 ff6e 	bl	8002718 <HAL_PWREx_EnableOverDrive>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000842:	f000 fa57 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000852:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2105      	movs	r1, #5
 8000864:	4618      	mov	r0, r3
 8000866:	f001 ffa7 	bl	80027b8 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000870:	f000 fa40 	bl	8000cf4 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	@ 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_ADC1_Init+0x9c>)
 8000898:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <MX_ADC1_Init+0xa0>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089c:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_ADC1_Init+0x9c>)
 800089e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80008c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_ADC1_Init+0x9c>)
 80008ea:	f000 fcc9 	bl	8001280 <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80008f4:	f000 f9fe 	bl	8000cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000900:	2303      	movs	r3, #3
 8000902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_ADC1_Init+0x9c>)
 800090a:	f000 fe25 	bl	8001558 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000914:	f000 f9ee 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000078 	.word	0x20000078
 8000924:	40012000 	.word	0x40012000

08000928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b096      	sub	sp, #88	@ 0x58
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fb23 	bl	8004fac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000966:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000968:	4a3e      	ldr	r2, [pc, #248]	@ (8000a64 <MX_TIM1_Init+0x13c>)
 800096a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800096c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a60 <MX_TIM1_Init+0x138>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 180-1;
 8000978:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <MX_TIM1_Init+0x138>)
 800097a:	22b3      	movs	r2, #179	@ 0xb3
 800097c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000984:	4b36      	ldr	r3, [pc, #216]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <MX_TIM1_Init+0x138>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000990:	4833      	ldr	r0, [pc, #204]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000992:	f002 fcf9 	bl	8003388 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800099c:	f000 f9aa 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009aa:	4619      	mov	r1, r3
 80009ac:	482c      	ldr	r0, [pc, #176]	@ (8000a60 <MX_TIM1_Init+0x138>)
 80009ae:	f003 f813 	bl	80039d8 <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009b8:	f000 f99c 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009bc:	4828      	ldr	r0, [pc, #160]	@ (8000a60 <MX_TIM1_Init+0x138>)
 80009be:	f002 fd32 	bl	8003426 <HAL_TIM_PWM_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009c8:	f000 f994 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009d8:	4619      	mov	r1, r3
 80009da:	4821      	ldr	r0, [pc, #132]	@ (8000a60 <MX_TIM1_Init+0x138>)
 80009dc:	f003 fdd8 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80009e6:	f000 f985 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ea:	2360      	movs	r3, #96	@ 0x60
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 90;
 80009ee:	235a      	movs	r3, #90	@ 0x5a
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f6:	2300      	movs	r3, #0
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4814      	ldr	r0, [pc, #80]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000a10:	f002 ff20 	bl	8003854 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a1a:	f000 f96b 	bl	8000cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000a42:	f003 fe21 	bl	8004688 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a4c:	f000 f952 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a50:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <MX_TIM1_Init+0x138>)
 8000a52:	f000 fa51 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000a56:	bf00      	nop
 8000a58:	3758      	adds	r7, #88	@ 0x58
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000120 	.word	0x20000120
 8000a64:	40010000 	.word	0x40010000

08000a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	@ 0x40
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aa2:	4b35      	ldr	r3, [pc, #212]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000aa4:	4a35      	ldr	r2, [pc, #212]	@ (8000b7c <MX_TIM3_Init+0x114>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b32      	ldr	r3, [pc, #200]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000ab6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac8:	482b      	ldr	r0, [pc, #172]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000aca:	f002 fc5d 	bl	8003388 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ad4:	f000 f90e 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4824      	ldr	r0, [pc, #144]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000ae6:	f002 ff77 	bl	80039d8 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f900 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000af4:	4820      	ldr	r0, [pc, #128]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000af6:	f002 fdb7 	bl	8003668 <HAL_TIM_IC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b00:	f000 f8f8 	bl	8000cf4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b04:	2304      	movs	r3, #4
 8000b06:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b08:	2350      	movs	r3, #80	@ 0x50
 8000b0a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000b1c:	f003 f823 	bl	8003b66 <HAL_TIM_SlaveConfigSynchro>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000b26:	f000 f8e5 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480f      	ldr	r0, [pc, #60]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000b3a:	f003 fd29 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000b44:	f000 f8d6 	bl	8000cf4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <MX_TIM3_Init+0x110>)
 8000b60:	f002 fddb 	bl	800371a <HAL_TIM_IC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000b6a:	f000 f8c3 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	3740      	adds	r7, #64	@ 0x40
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000168 	.word	0x20000168
 8000b7c:	40000400 	.word	0x40000400

08000b80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <MX_USART2_UART_Init+0x50>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USART2_UART_Init+0x4c>)
 8000bb8:	f003 fdb8 	bl	800472c <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc2:	f000 f897 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001b0 	.word	0x200001b0
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_DMA_Init+0x3c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c10 <MX_DMA_Init+0x3c>)
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_DMA_Init+0x3c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2038      	movs	r0, #56	@ 0x38
 8000bfc:	f001 f837 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c00:	2038      	movs	r0, #56	@ 0x38
 8000c02:	f001 f850 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a26      	ldr	r2, [pc, #152]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_GPIO_Init+0xd4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_GPIO_Port, ST_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ca0:	4812      	ldr	r0, [pc, #72]	@ (8000cec <MX_GPIO_Init+0xd8>)
 8000ca2:	f001 fd1f 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST_Pin */
  GPIO_InitStruct.Pin = ST_Pin;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480b      	ldr	r0, [pc, #44]	@ (8000cec <MX_GPIO_Init+0xd8>)
 8000cc0:	f001 fb7c 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EOS_Pin */
  GPIO_InitStruct.Pin = EOS_Pin;
 8000cc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EOS_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_GPIO_Init+0xdc>)
 8000cda:	f001 fb6f 	bl	80023bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	@ 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <Error_Handler+0x8>

08000d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f000 ff8a 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000e28 <HAL_ADC_MspInit+0xd8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d156      	bne.n	8000e20 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <HAL_ADC_MspInit+0xdc>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e2c <HAL_ADC_MspInit+0xdc>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d82:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <HAL_ADC_MspInit+0xdc>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <HAL_ADC_MspInit+0xdc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a25      	ldr	r2, [pc, #148]	@ (8000e2c <HAL_ADC_MspInit+0xdc>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <HAL_ADC_MspInit+0xdc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VIDEO_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dae:	2303      	movs	r3, #3
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VIDEO_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481c      	ldr	r0, [pc, #112]	@ (8000e30 <HAL_ADC_MspInit+0xe0>)
 8000dbe:	f001 fafd 	bl	80023bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <HAL_ADC_MspInit+0xe8>)
 8000dc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000ddc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e04:	480b      	ldr	r0, [pc, #44]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000e06:	f000 ff69 	bl	8001cdc <HAL_DMA_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e10:	f7ff ff70 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000e18:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e1a:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_ADC_MspInit+0xe4>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	200000c0 	.word	0x200000c0
 8000e38:	40026410 	.word	0x40026410

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a23      	ldr	r2, [pc, #140]	@ (8000ee8 <HAL_TIM_Base_MspInit+0xac>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10e      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e7a:	e030      	b.n	8000ede <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xb4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <HAL_TIM_Base_MspInit+0xb0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TRG_Pin;
 8000ebe:	2340      	movs	r3, #64	@ 0x40
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TRG_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <HAL_TIM_Base_MspInit+0xb8>)
 8000eda:	f001 fa6f 	bl	80023bc <HAL_GPIO_Init>
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_TIM_MspPostInit+0x68>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d11e      	bne.n	8000f58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CLK_Pin;
 8000f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_TIM_MspPostInit+0x70>)
 8000f54:	f001 fa32 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40010000 	.word	0x40010000
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_UART_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_UART_MspInit+0x8c>)
 8000fe2:	f001 f9eb 	bl	80023bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <UsageFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 f8d1 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA2_Stream0_IRQHandler+0x10>)
 8001062:	f000 ff41 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000c0 	.word	0x200000c0

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f003 ff8c 	bl	8004fbc <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20020000 	.word	0x20020000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	2000310c 	.word	0x2000310c
 80010d8:	20003260 	.word	0x20003260

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001138 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001104:	f7ff ffea 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	@ (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800112e:	f003 ff4b 	bl	8004fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff faab 	bl	800068c <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001144:	080059cc 	.word	0x080059cc
  ldr r2, =_sbss
 8001148:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800114c:	2000325c 	.word	0x2000325c

08001150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 fd6b 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fdba 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fd83 	bl	8001cc2 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 fd4b 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20003110 	.word	0x20003110

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20003110 	.word	0x20003110

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e033      	b.n	80012fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd56 	bl	8000d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012c6:	f023 0302 	bic.w	r3, r3, #2
 80012ca:	f043 0202 	orr.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fa72 	bl	80017bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ee:	e001      	b.n	80012f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_ADC_Start_DMA+0x22>
 8001326:	2302      	movs	r3, #2
 8001328:	e0eb      	b.n	8001502 <HAL_ADC_Start_DMA+0x1fa>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	d018      	beq.n	8001372 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001350:	4b6e      	ldr	r3, [pc, #440]	@ (800150c <HAL_ADC_Start_DMA+0x204>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a6e      	ldr	r2, [pc, #440]	@ (8001510 <HAL_ADC_Start_DMA+0x208>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9a      	lsrs	r2, r3, #18
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001364:	e002      	b.n	800136c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3b01      	subs	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001380:	d107      	bne.n	8001392 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001390:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	f040 80a3 	bne.w	80014e8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013e0:	d106      	bne.n	80013f0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f023 0206 	bic.w	r2, r3, #6
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80013ee:	e002      	b.n	80013f6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013fe:	4b45      	ldr	r3, [pc, #276]	@ (8001514 <HAL_ADC_Start_DMA+0x20c>)
 8001400:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001406:	4a44      	ldr	r2, [pc, #272]	@ (8001518 <HAL_ADC_Start_DMA+0x210>)
 8001408:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800140e:	4a43      	ldr	r2, [pc, #268]	@ (800151c <HAL_ADC_Start_DMA+0x214>)
 8001410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001416:	4a42      	ldr	r2, [pc, #264]	@ (8001520 <HAL_ADC_Start_DMA+0x218>)
 8001418:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001422:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001432:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001442:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	334c      	adds	r3, #76	@ 0x4c
 800144e:	4619      	mov	r1, r3
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f000 fcf0 	bl	8001e38 <HAL_DMA_Start_IT>
 8001458:	4603      	mov	r3, r0
 800145a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2b00      	cmp	r3, #0
 8001466:	d12a      	bne.n	80014be <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2d      	ldr	r2, [pc, #180]	@ (8001524 <HAL_ADC_Start_DMA+0x21c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d015      	beq.n	800149e <HAL_ADC_Start_DMA+0x196>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2c      	ldr	r2, [pc, #176]	@ (8001528 <HAL_ADC_Start_DMA+0x220>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d105      	bne.n	8001488 <HAL_ADC_Start_DMA+0x180>
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <HAL_ADC_Start_DMA+0x20c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a27      	ldr	r2, [pc, #156]	@ (800152c <HAL_ADC_Start_DMA+0x224>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d136      	bne.n	8001500 <HAL_ADC_Start_DMA+0x1f8>
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <HAL_ADC_Start_DMA+0x20c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b00      	cmp	r3, #0
 800149c:	d130      	bne.n	8001500 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d129      	bne.n	8001500 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e020      	b.n	8001500 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a18      	ldr	r2, [pc, #96]	@ (8001524 <HAL_ADC_Start_DMA+0x21c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d11b      	bne.n	8001500 <HAL_ADC_Start_DMA+0x1f8>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d114      	bne.n	8001500 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	e00b      	b.n	8001500 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	f043 0210 	orr.w	r2, r3, #16
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001500:	7ffb      	ldrb	r3, [r7, #31]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000000 	.word	0x20000000
 8001510:	431bde83 	.word	0x431bde83
 8001514:	40012300 	.word	0x40012300
 8001518:	080019b5 	.word	0x080019b5
 800151c:	08001a6f 	.word	0x08001a6f
 8001520:	08001a8b 	.word	0x08001a8b
 8001524:	40012000 	.word	0x40012000
 8001528:	40012100 	.word	0x40012100
 800152c:	40012200 	.word	0x40012200

08001530 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x1c>
 8001570:	2302      	movs	r3, #2
 8001572:	e113      	b.n	800179c <HAL_ADC_ConfigChannel+0x244>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b09      	cmp	r3, #9
 8001582:	d925      	bls.n	80015d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68d9      	ldr	r1, [r3, #12]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	3b1e      	subs	r3, #30
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68d9      	ldr	r1, [r3, #12]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	4603      	mov	r3, r0
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4403      	add	r3, r0
 80015c2:	3b1e      	subs	r3, #30
 80015c4:	409a      	lsls	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	e022      	b.n	8001616 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	2207      	movs	r2, #7
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	4603      	mov	r3, r0
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4403      	add	r3, r0
 800160c:	409a      	lsls	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b06      	cmp	r3, #6
 800161c:	d824      	bhi.n	8001668 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3b05      	subs	r3, #5
 8001630:	221f      	movs	r2, #31
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	400a      	ands	r2, r1
 800163e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4618      	mov	r0, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	3b05      	subs	r3, #5
 800165a:	fa00 f203 	lsl.w	r2, r0, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
 8001666:	e04c      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d824      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b23      	subs	r3, #35	@ 0x23
 8001682:	221f      	movs	r2, #31
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43da      	mvns	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3b23      	subs	r3, #35	@ 0x23
 80016ac:	fa00 f203 	lsl.w	r2, r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016b8:	e023      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b41      	subs	r3, #65	@ 0x41
 80016cc:	221f      	movs	r2, #31
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	400a      	ands	r2, r1
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b41      	subs	r3, #65	@ 0x41
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001702:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <HAL_ADC_ConfigChannel+0x250>)
 8001704:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a28      	ldr	r2, [pc, #160]	@ (80017ac <HAL_ADC_ConfigChannel+0x254>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d10f      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d8>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b12      	cmp	r3, #18
 8001716:	d10b      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	@ (80017ac <HAL_ADC_ConfigChannel+0x254>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12b      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x23a>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1c      	ldr	r2, [pc, #112]	@ (80017b0 <HAL_ADC_ConfigChannel+0x258>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d003      	beq.n	800174c <HAL_ADC_ConfigChannel+0x1f4>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b11      	cmp	r3, #17
 800174a:	d122      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <HAL_ADC_ConfigChannel+0x258>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d111      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_ADC_ConfigChannel+0x25c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a11      	ldr	r2, [pc, #68]	@ (80017b8 <HAL_ADC_ConfigChannel+0x260>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9a      	lsrs	r2, r3, #18
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001784:	e002      	b.n	800178c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3b01      	subs	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f9      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40012300 	.word	0x40012300
 80017ac:	40012000 	.word	0x40012000
 80017b0:	10000012 	.word	0x10000012
 80017b4:	20000000 	.word	0x20000000
 80017b8:	431bde83 	.word	0x431bde83

080017bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c4:	4b79      	ldr	r3, [pc, #484]	@ (80019ac <ADC_Init+0x1f0>)
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	431a      	orrs	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	021a      	lsls	r2, r3, #8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6899      	ldr	r1, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	4a58      	ldr	r2, [pc, #352]	@ (80019b0 <ADC_Init+0x1f4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d022      	beq.n	800189a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001862:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6899      	ldr	r1, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e00f      	b.n	80018ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0202 	bic.w	r2, r2, #2
 80018c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6899      	ldr	r1, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7e1b      	ldrb	r3, [r3, #24]
 80018d4:	005a      	lsls	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01b      	beq.n	8001920 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001906:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	3b01      	subs	r3, #1
 8001914:	035a      	lsls	r2, r3, #13
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	e007      	b.n	8001930 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800192e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800193e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	3b01      	subs	r3, #1
 800194c:	051a      	lsls	r2, r3, #20
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6899      	ldr	r1, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001972:	025a      	lsls	r2, r3, #9
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800198a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	029a      	lsls	r2, r3, #10
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40012300 	.word	0x40012300
 80019b0:	0f000001 	.word	0x0f000001

080019b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d13c      	bne.n	8001a48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d12b      	bne.n	8001a40 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d127      	bne.n	8001a40 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d119      	bne.n	8001a40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0220 	bic.w	r2, r2, #32
 8001a1a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7fe fe0d 	bl	8000660 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a46:	e00e      	b.n	8001a66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff fd75 	bl	8001544 <HAL_ADC_ErrorCallback>
}
 8001a5a:	e004      	b.n	8001a66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff fd57 	bl	8001530 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a96:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2240      	movs	r2, #64	@ 0x40
 8001a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f043 0204 	orr.w	r2, r3, #4
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fd4a 	bl	8001544 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	@ (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	@ (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff29 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff3e 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff31 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fa9a 	bl	8001220 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e099      	b.n	8001e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d18:	e00f      	b.n	8001d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1a:	f7ff fa81 	bl	8001220 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d908      	bls.n	8001d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e078      	b.n	8001e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e8      	bne.n	8001d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <HAL_DMA_Init+0x158>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d107      	bne.n	8001da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f023 0307 	bic.w	r3, r3, #7
 8001dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d117      	bne.n	8001dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00e      	beq.n	8001dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fa6f 	bl	80022c4 <DMA_CheckFifoParam>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e016      	b.n	8001e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fa26 	bl	8002258 <DMA_CalcBaseAndBitshift>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e14:	223f      	movs	r2, #63	@ 0x3f
 8001e16:	409a      	lsls	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	f010803f 	.word	0xf010803f

08001e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_DMA_Start_IT+0x26>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e040      	b.n	8001ee0 <HAL_DMA_Start_IT+0xa8>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d12f      	bne.n	8001ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f9b8 	bl	80021fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	223f      	movs	r2, #63	@ 0x3f
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0216 	orr.w	r2, r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e005      	b.n	8001ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
 8001edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef4:	4b8e      	ldr	r3, [pc, #568]	@ (8002130 <HAL_DMA_IRQHandler+0x248>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a8e      	ldr	r2, [pc, #568]	@ (8002134 <HAL_DMA_IRQHandler+0x24c>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f12:	2208      	movs	r2, #8
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f40:	2208      	movs	r2, #8
 8001f42:	409a      	lsls	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	2201      	movs	r2, #1
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8e:	2204      	movs	r2, #4
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d012      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	2204      	movs	r2, #4
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d043      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03c      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d024      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	e01f      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e016      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0208 	bic.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	2220      	movs	r2, #32
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 808f 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8087 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	2220      	movs	r2, #32
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d136      	bne.n	8002100 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0216 	bic.w	r2, r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x1da>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0208 	bic.w	r2, r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	223f      	movs	r2, #63	@ 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07e      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
        }
        return;
 80020fe:	e079      	b.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01d      	beq.n	800214a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e02c      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000
 8002134:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e01e      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10f      	bne.n	8002178 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0210 	bic.w	r2, r2, #16
 8002166:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	2b00      	cmp	r3, #0
 800218e:	d032      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2205      	movs	r2, #5
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d307      	bcc.n	80021d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f2      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x2cc>
 80021ce:	e000      	b.n	80021d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021f4:	bf00      	nop
    }
  }
}
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002218:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b40      	cmp	r3, #64	@ 0x40
 8002228:	d108      	bne.n	800223c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800223a:	e007      	b.n	800224c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3b10      	subs	r3, #16
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <DMA_CalcBaseAndBitshift+0x64>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d909      	bls.n	800229a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	@ 0x58
 8002298:	e007      	b.n	80022aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	aaaaaaab 	.word	0xaaaaaaab
 80022c0:	08005980 	.word	0x08005980

080022c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11f      	bne.n	800231e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d856      	bhi.n	8002392 <DMA_CheckFifoParam+0xce>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <DMA_CheckFifoParam+0x28>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	0800230f 	.word	0x0800230f
 80022f4:	080022fd 	.word	0x080022fd
 80022f8:	08002393 	.word	0x08002393
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d046      	beq.n	8002396 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e043      	b.n	8002396 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002316:	d140      	bne.n	800239a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231c:	e03d      	b.n	800239a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002326:	d121      	bne.n	800236c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d837      	bhi.n	800239e <DMA_CheckFifoParam+0xda>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <DMA_CheckFifoParam+0x70>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	0800234b 	.word	0x0800234b
 800233c:	08002345 	.word	0x08002345
 8002340:	0800235d 	.word	0x0800235d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      break;
 8002348:	e030      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d025      	beq.n	80023a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235a:	e022      	b.n	80023a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002364:	d11f      	bne.n	80023a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800236a:	e01c      	b.n	80023a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d903      	bls.n	800237a <DMA_CheckFifoParam+0xb6>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d003      	beq.n	8002380 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002378:	e018      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
      break;
 800237e:	e015      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e00b      	b.n	80023aa <DMA_CheckFifoParam+0xe6>
      break;
 8002392:	bf00      	nop
 8002394:	e00a      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e008      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e006      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e004      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e002      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;   
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
    }
  } 
  
  return status; 
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e165      	b.n	80026a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8154 	bne.w	800269e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d005      	beq.n	800240e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2b02      	cmp	r3, #2
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d017      	beq.n	80024ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80ae 	beq.w	800269e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b5d      	ldr	r3, [pc, #372]	@ (80026bc <HAL_GPIO_Init+0x300>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	4a5c      	ldr	r2, [pc, #368]	@ (80026bc <HAL_GPIO_Init+0x300>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
 8002552:	4b5a      	ldr	r3, [pc, #360]	@ (80026bc <HAL_GPIO_Init+0x300>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4f      	ldr	r2, [pc, #316]	@ (80026c4 <HAL_GPIO_Init+0x308>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d025      	beq.n	80025d6 <HAL_GPIO_Init+0x21a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	@ (80026c8 <HAL_GPIO_Init+0x30c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <HAL_GPIO_Init+0x216>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	@ (80026cc <HAL_GPIO_Init+0x310>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x212>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	@ (80026d0 <HAL_GPIO_Init+0x314>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	@ (80026d4 <HAL_GPIO_Init+0x318>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x20a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4a      	ldr	r2, [pc, #296]	@ (80026d8 <HAL_GPIO_Init+0x31c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x206>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a49      	ldr	r2, [pc, #292]	@ (80026dc <HAL_GPIO_Init+0x320>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x202>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00c      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025be:	2307      	movs	r3, #7
 80025c0:	e00a      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025d6:	2300      	movs	r3, #0
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f002 0203 	and.w	r2, r2, #3
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	4093      	lsls	r3, r2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e8:	4935      	ldr	r1, [pc, #212]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f6:	4b3a      	ldr	r3, [pc, #232]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261a:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002620:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002644:	4a26      	ldr	r2, [pc, #152]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264a:	4b25      	ldr	r3, [pc, #148]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266e:	4a1c      	ldr	r2, [pc, #112]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002698:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	f67f ae96 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	@ 0x40
 8002732:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800273e:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_PWREx_EnableOverDrive+0x94>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7fe fd6c 	bl	8001220 <HAL_GetTick>
 8002748:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800274a:	e009      	b.n	8002760 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800274c:	f7fe fd68 	bl	8001220 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800275a:	d901      	bls.n	8002760 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e01f      	b.n	80027a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002760:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d1ee      	bne.n	800274c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002774:	f7fe fd54 	bl	8001220 <HAL_GetTick>
 8002778:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800277a:	e009      	b.n	8002790 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800277c:	f7fe fd50 	bl	8001220 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800278a:	d901      	bls.n	8002790 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e007      	b.n	80027a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002790:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800279c:	d1ee      	bne.n	800277c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	420e0040 	.word	0x420e0040
 80027b0:	40007000 	.word	0x40007000
 80027b4:	420e0044 	.word	0x420e0044

080027b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0cc      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d90c      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d044      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b3f      	ldr	r3, [pc, #252]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e067      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b37      	ldr	r3, [pc, #220]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4934      	ldr	r1, [pc, #208]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fcba 	bl	8001220 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7fe fcb6 	bl	8001220 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e04f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d20c      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f855 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fc1a 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08005968 	.word	0x08005968
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a0:	f7ff fff0 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4903      	ldr	r1, [pc, #12]	@ (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08005978 	.word	0x08005978

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c8:	f7ff ffdc 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0b5b      	lsrs	r3, r3, #13
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08005978 	.word	0x08005978

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b0ae      	sub	sp, #184	@ 0xb8
 80029f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a12:	4bcb      	ldr	r3, [pc, #812]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	f200 8206 	bhi.w	8002e2c <HAL_RCC_GetSysClockFreq+0x440>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a5d 	.word	0x08002a5d
 8002a2c:	08002e2d 	.word	0x08002e2d
 8002a30:	08002e2d 	.word	0x08002e2d
 8002a34:	08002e2d 	.word	0x08002e2d
 8002a38:	08002a65 	.word	0x08002a65
 8002a3c:	08002e2d 	.word	0x08002e2d
 8002a40:	08002e2d 	.word	0x08002e2d
 8002a44:	08002e2d 	.word	0x08002e2d
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002e2d 	.word	0x08002e2d
 8002a50:	08002e2d 	.word	0x08002e2d
 8002a54:	08002e2d 	.word	0x08002e2d
 8002a58:	08002c5d 	.word	0x08002c5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a5c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a62:	e1e7      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a64:	4bb8      	ldr	r3, [pc, #736]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a6a:	e1e3      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a6c:	4bb4      	ldr	r3, [pc, #720]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a78:	4bb1      	ldr	r3, [pc, #708]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d071      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4bae      	ldr	r3, [pc, #696]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a90:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002aaa:	4622      	mov	r2, r4
 8002aac:	462b      	mov	r3, r5
 8002aae:	f04f 0000 	mov.w	r0, #0
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	0159      	lsls	r1, r3, #5
 8002ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abc:	0150      	lsls	r0, r2, #5
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	1a51      	subs	r1, r2, r1
 8002ac6:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ac8:	4629      	mov	r1, r5
 8002aca:	eb63 0301 	sbc.w	r3, r3, r1
 8002ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002adc:	4649      	mov	r1, r9
 8002ade:	018b      	lsls	r3, r1, #6
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	018a      	lsls	r2, r1, #6
 8002aea:	4641      	mov	r1, r8
 8002aec:	1a51      	subs	r1, r2, r1
 8002aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002af0:	4649      	mov	r1, r9
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b04:	4649      	mov	r1, r9
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4641      	mov	r1, r8
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4641      	mov	r1, r8
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4622      	mov	r2, r4
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b1e:	462b      	mov	r3, r5
 8002b20:	460a      	mov	r2, r1
 8002b22:	eb42 0303 	adc.w	r3, r2, r3
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b34:	4629      	mov	r1, r5
 8002b36:	024b      	lsls	r3, r1, #9
 8002b38:	4621      	mov	r1, r4
 8002b3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b3e:	4621      	mov	r1, r4
 8002b40:	024a      	lsls	r2, r1, #9
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b58:	f7fd fbb2 	bl	80002c0 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b66:	e067      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b68:	4b75      	ldr	r3, [pc, #468]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b82:	2300      	movs	r3, #0
 8002b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9c:	0150      	lsls	r0, r2, #5
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	1a51      	subs	r1, r2, r1
 8002ba6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ba8:	4629      	mov	r1, r5
 8002baa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	4641      	mov	r1, r8
 8002bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	018a      	lsls	r2, r1, #6
 8002bca:	4641      	mov	r1, r8
 8002bcc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002be6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bea:	4692      	mov	sl, r2
 8002bec:	469b      	mov	fp, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	eb1a 0303 	adds.w	r3, sl, r3
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	462b      	mov	r3, r5
 8002bf8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	028b      	lsls	r3, r1, #10
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c14:	4621      	mov	r1, r4
 8002c16:	028a      	lsls	r2, r1, #10
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c20:	2200      	movs	r2, #0
 8002c22:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c24:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c2a:	f7fd fb49 	bl	80002c0 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c38:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c5a:	e0eb      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c68:	4b35      	ldr	r3, [pc, #212]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d06b      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c86:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c88:	2300      	movs	r3, #0
 8002c8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c90:	4622      	mov	r2, r4
 8002c92:	462b      	mov	r3, r5
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	0159      	lsls	r1, r3, #5
 8002c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca2:	0150      	lsls	r0, r2, #5
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4621      	mov	r1, r4
 8002caa:	1a51      	subs	r1, r2, r1
 8002cac:	61b9      	str	r1, [r7, #24]
 8002cae:	4629      	mov	r1, r5
 8002cb0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cc2:	4659      	mov	r1, fp
 8002cc4:	018b      	lsls	r3, r1, #6
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ccc:	4651      	mov	r1, sl
 8002cce:	018a      	lsls	r2, r1, #6
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd6:	4659      	mov	r1, fp
 8002cd8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf0:	4690      	mov	r8, r2
 8002cf2:	4699      	mov	r9, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	eb18 0303 	adds.w	r3, r8, r3
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	eb49 0303 	adc.w	r3, r9, r3
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d10:	4629      	mov	r1, r5
 8002d12:	024b      	lsls	r3, r1, #9
 8002d14:	4621      	mov	r1, r4
 8002d16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	024a      	lsls	r2, r1, #9
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d26:	2200      	movs	r2, #0
 8002d28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d30:	f7fd fac6 	bl	80002c0 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d3e:	e065      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x420>
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	2200      	movs	r2, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	4611      	mov	r1, r2
 8002d58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d5e:	2300      	movs	r3, #0
 8002d60:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d66:	4642      	mov	r2, r8
 8002d68:	464b      	mov	r3, r9
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	0159      	lsls	r1, r3, #5
 8002d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d78:	0150      	lsls	r0, r2, #5
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4641      	mov	r1, r8
 8002d80:	1a51      	subs	r1, r2, r1
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	4649      	mov	r1, r9
 8002d86:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d98:	4659      	mov	r1, fp
 8002d9a:	018b      	lsls	r3, r1, #6
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da2:	4651      	mov	r1, sl
 8002da4:	018a      	lsls	r2, r1, #6
 8002da6:	4651      	mov	r1, sl
 8002da8:	1a54      	subs	r4, r2, r1
 8002daa:	4659      	mov	r1, fp
 8002dac:	eb63 0501 	sbc.w	r5, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	00eb      	lsls	r3, r5, #3
 8002dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dbe:	00e2      	lsls	r2, r4, #3
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	461d      	mov	r5, r3
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	18e3      	adds	r3, r4, r3
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	464b      	mov	r3, r9
 8002dcc:	eb45 0303 	adc.w	r3, r5, r3
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dde:	4629      	mov	r1, r5
 8002de0:	028b      	lsls	r3, r1, #10
 8002de2:	4621      	mov	r1, r4
 8002de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de8:	4621      	mov	r1, r4
 8002dea:	028a      	lsls	r2, r1, #10
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002df4:	2200      	movs	r2, #0
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002df8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002dfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dfe:	f7fd fa5f 	bl	80002c0 <__aeabi_uldivmod>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4613      	mov	r3, r2
 8002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0f1b      	lsrs	r3, r3, #28
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e2a:	e003      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	37b8      	adds	r7, #184	@ 0xb8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400

08002e4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e28d      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8083 	beq.w	8002f72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e6c:	4b94      	ldr	r3, [pc, #592]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d019      	beq.n	8002eac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e78:	4b91      	ldr	r3, [pc, #580]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e84:	4b8e      	ldr	r3, [pc, #568]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e90:	d00c      	beq.n	8002eac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e92:	4b8b      	ldr	r3, [pc, #556]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d112      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9e:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	4b84      	ldr	r3, [pc, #528]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d05b      	beq.n	8002f70 <HAL_RCC_OscConfig+0x124>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d157      	bne.n	8002f70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e25a      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x90>
 8002ece:	4b7c      	ldr	r3, [pc, #496]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a7b      	ldr	r2, [pc, #492]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e01d      	b.n	8002f18 <HAL_RCC_OscConfig+0xcc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0xb4>
 8002ee6:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b73      	ldr	r3, [pc, #460]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a72      	ldr	r2, [pc, #456]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0xcc>
 8002f00:	4b6f      	ldr	r3, [pc, #444]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6e      	ldr	r2, [pc, #440]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6b      	ldr	r2, [pc, #428]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe f97e 	bl	8001220 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fe f97a 	bl	8001220 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	@ 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e21f      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b61      	ldr	r3, [pc, #388]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0xdc>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f96a 	bl	8001220 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe f966 	bl	8001220 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e20b      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	4b57      	ldr	r3, [pc, #348]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x104>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06f      	beq.n	800305e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f7e:	4b50      	ldr	r3, [pc, #320]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d017      	beq.n	8002fba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f96:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b47      	ldr	r3, [pc, #284]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b44      	ldr	r3, [pc, #272]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x186>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1d3      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4937      	ldr	r1, [pc, #220]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <HAL_RCC_OscConfig+0x278>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe f913 	bl	8001220 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe f90f 	bl	8001220 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1b4      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b28      	ldr	r3, [pc, #160]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4925      	ldr	r1, [pc, #148]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCC_OscConfig+0x278>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe f8f2 	bl	8001220 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fe f8ee 	bl	8001220 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e193      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <HAL_RCC_OscConfig+0x27c>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fe f8d2 	bl	8001220 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe f8ce 	bl	8001220 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e173      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x234>
 800309e:	e01b      	b.n	80030d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_OscConfig+0x27c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fe f8bb 	bl	8001220 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e00e      	b.n	80030cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fe f8b7 	bl	8001220 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d907      	bls.n	80030cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e15c      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b8a      	ldr	r3, [pc, #552]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ea      	bne.n	80030ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8097 	beq.w	8003214 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b83      	ldr	r3, [pc, #524]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b7f      	ldr	r3, [pc, #508]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	4a7e      	ldr	r2, [pc, #504]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	@ 0x40
 8003106:	4b7c      	ldr	r3, [pc, #496]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b79      	ldr	r3, [pc, #484]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b76      	ldr	r3, [pc, #472]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a75      	ldr	r2, [pc, #468]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe f877 	bl	8001220 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe f873 	bl	8001220 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e118      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b6c      	ldr	r3, [pc, #432]	@ (80032fc <HAL_RCC_OscConfig+0x4b0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x31e>
 800315c:	4b66      	ldr	r3, [pc, #408]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003160:	4a65      	ldr	r2, [pc, #404]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	@ 0x70
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x358>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x340>
 8003172:	4b61      	ldr	r3, [pc, #388]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a60      	ldr	r2, [pc, #384]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
 800317e:	4b5e      	ldr	r3, [pc, #376]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a5d      	ldr	r2, [pc, #372]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x358>
 800318c:	4b5a      	ldr	r3, [pc, #360]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	4a59      	ldr	r2, [pc, #356]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	@ 0x70
 8003198:	4b57      	ldr	r3, [pc, #348]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319c:	4a56      	ldr	r2, [pc, #344]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe f838 	bl	8001220 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe f834 	bl	8001220 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0d7      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCC_OscConfig+0x368>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe f822 	bl	8001220 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe f81e 	bl	8001220 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0c1      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	4a3a      	ldr	r2, [pc, #232]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80ad 	beq.w	8003378 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321e:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d060      	beq.n	80032ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d145      	bne.n	80032be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b33      	ldr	r3, [pc, #204]	@ (8003300 <HAL_RCC_OscConfig+0x4b4>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fd fff2 	bl	8001220 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd ffee 	bl	8001220 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e093      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b29      	ldr	r3, [pc, #164]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	491b      	ldr	r1, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <HAL_RCC_OscConfig+0x4b4>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fd ffc3 	bl	8001220 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fd ffbf 	bl	8001220 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e064      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x452>
 80032bc:	e05c      	b.n	8003378 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_RCC_OscConfig+0x4b4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd ffac 	bl	8001220 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd ffa8 	bl	8001220 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e04d      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x480>
 80032ea:	e045      	b.n	8003378 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e040      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000
 8003300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003304:	4b1f      	ldr	r3, [pc, #124]	@ (8003384 <HAL_RCC_OscConfig+0x538>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d030      	beq.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d129      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d122      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800333a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	3b01      	subs	r3, #1
 800334e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d10f      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e041      	b.n	800341e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fd44 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f000 fc10 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e041      	b.n	80034bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f839 	bl	80034c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3304      	adds	r3, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f000 fbc1 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_TIM_PWM_Start+0x24>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e022      	b.n	8003542 <HAL_TIM_PWM_Start+0x6a>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d109      	bne.n	8003516 <HAL_TIM_PWM_Start+0x3e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e015      	b.n	8003542 <HAL_TIM_PWM_Start+0x6a>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d109      	bne.n	8003530 <HAL_TIM_PWM_Start+0x58>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e008      	b.n	8003542 <HAL_TIM_PWM_Start+0x6a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07c      	b.n	8003644 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <HAL_TIM_PWM_Start+0x82>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003558:	e013      	b.n	8003582 <HAL_TIM_PWM_Start+0xaa>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b04      	cmp	r3, #4
 800355e:	d104      	bne.n	800356a <HAL_TIM_PWM_Start+0x92>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003568:	e00b      	b.n	8003582 <HAL_TIM_PWM_Start+0xaa>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0xa2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003578:	e003      	b.n	8003582 <HAL_TIM_PWM_Start+0xaa>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2201      	movs	r2, #1
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 ffda 	bl	8004544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2d      	ldr	r2, [pc, #180]	@ (800364c <HAL_TIM_PWM_Start+0x174>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_PWM_Start+0xcc>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2c      	ldr	r2, [pc, #176]	@ (8003650 <HAL_TIM_PWM_Start+0x178>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_PWM_Start+0xd0>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_TIM_PWM_Start+0xd2>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a22      	ldr	r2, [pc, #136]	@ (800364c <HAL_TIM_PWM_Start+0x174>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_TIM_PWM_Start+0x136>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d0:	d01d      	beq.n	800360e <HAL_TIM_PWM_Start+0x136>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003654 <HAL_TIM_PWM_Start+0x17c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_TIM_PWM_Start+0x136>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003658 <HAL_TIM_PWM_Start+0x180>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_TIM_PWM_Start+0x136>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <HAL_TIM_PWM_Start+0x184>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_TIM_PWM_Start+0x136>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a16      	ldr	r2, [pc, #88]	@ (8003650 <HAL_TIM_PWM_Start+0x178>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_TIM_PWM_Start+0x136>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <HAL_TIM_PWM_Start+0x188>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_TIM_PWM_Start+0x136>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <HAL_TIM_PWM_Start+0x18c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d111      	bne.n	8003632 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d010      	beq.n	8003642 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	e007      	b.n	8003642 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40010000 	.word	0x40010000
 8003650:	40010400 	.word	0x40010400
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40014000 	.word	0x40014000
 8003664:	40001800 	.word	0x40001800

08003668 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e041      	b.n	80036fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f839 	bl	8003706 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 faa0 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003734:	2302      	movs	r3, #2
 8003736:	e088      	b.n	800384a <HAL_TIM_IC_ConfigChannel+0x130>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11b      	bne.n	800377e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003756:	f000 fd31 	bl	80041bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 020c 	bic.w	r2, r2, #12
 8003768:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6999      	ldr	r1, [r3, #24]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	619a      	str	r2, [r3, #24]
 800377c:	e060      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11c      	bne.n	80037be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003794:	f000 fdb5 	bl	8004302 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6999      	ldr	r1, [r3, #24]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	619a      	str	r2, [r3, #24]
 80037bc:	e040      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037d4:	f000 fe02 	bl	80043dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 020c 	bic.w	r2, r2, #12
 80037e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69d9      	ldr	r1, [r3, #28]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
 80037fa:	e021      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d11c      	bne.n	800383c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003812:	f000 fe1f 	bl	8004454 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003824:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	021a      	lsls	r2, r3, #8
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
 800383a:	e001      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800386e:	2302      	movs	r3, #2
 8003870:	e0ae      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	f200 809f 	bhi.w	80039c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003882:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080039c1 	.word	0x080039c1
 8003890:	080039c1 	.word	0x080039c1
 8003894:	080039c1 	.word	0x080039c1
 8003898:	080038fd 	.word	0x080038fd
 800389c:	080039c1 	.word	0x080039c1
 80038a0:	080039c1 	.word	0x080039c1
 80038a4:	080039c1 	.word	0x080039c1
 80038a8:	0800393f 	.word	0x0800393f
 80038ac:	080039c1 	.word	0x080039c1
 80038b0:	080039c1 	.word	0x080039c1
 80038b4:	080039c1 	.word	0x080039c1
 80038b8:	0800397f 	.word	0x0800397f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fa38 	bl	8003d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0204 	bic.w	r2, r2, #4
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	619a      	str	r2, [r3, #24]
      break;
 80038fa:	e064      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa88 	bl	8003e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	619a      	str	r2, [r3, #24]
      break;
 800393c:	e043      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fadd 	bl	8003f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0208 	orr.w	r2, r2, #8
 8003958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	61da      	str	r2, [r3, #28]
      break;
 800397c:	e023      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fb31 	bl	8003fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	021a      	lsls	r2, r3, #8
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	61da      	str	r2, [r3, #28]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
      break;
 80039c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIM_ConfigClockSource+0x1c>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0b4      	b.n	8003b5e <HAL_TIM_ConfigClockSource+0x186>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2c:	d03e      	beq.n	8003aac <HAL_TIM_ConfigClockSource+0xd4>
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a32:	f200 8087 	bhi.w	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a3a:	f000 8086 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x172>
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a42:	d87f      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b70      	cmp	r3, #112	@ 0x70
 8003a46:	d01a      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0xa6>
 8003a48:	2b70      	cmp	r3, #112	@ 0x70
 8003a4a:	d87b      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b60      	cmp	r3, #96	@ 0x60
 8003a4e:	d050      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a50:	2b60      	cmp	r3, #96	@ 0x60
 8003a52:	d877      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b50      	cmp	r3, #80	@ 0x50
 8003a56:	d03c      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a58:	2b50      	cmp	r3, #80	@ 0x50
 8003a5a:	d873      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b40      	cmp	r3, #64	@ 0x40
 8003a5e:	d058      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x13a>
 8003a60:	2b40      	cmp	r3, #64	@ 0x40
 8003a62:	d86f      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b30      	cmp	r3, #48	@ 0x30
 8003a66:	d064      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	2b30      	cmp	r3, #48	@ 0x30
 8003a6a:	d86b      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d060      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d867      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d05c      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d05a      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a7c:	e062      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a8e:	f000 fd39 	bl	8004504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003aa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	609a      	str	r2, [r3, #8]
      break;
 8003aaa:	e04f      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003abc:	f000 fd22 	bl	8004504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ace:	609a      	str	r2, [r3, #8]
      break;
 8003ad0:	e03c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f000 fbe0 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2150      	movs	r1, #80	@ 0x50
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fcef 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003af0:	e02c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fc3c 	bl	800437c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2160      	movs	r1, #96	@ 0x60
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fcdf 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003b10:	e01c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f000 fbc0 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2140      	movs	r1, #64	@ 0x40
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fccf 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003b30:	e00c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f000 fcc6 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003b42:	e003      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      break;
 8003b48:	e000      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e031      	b.n	8003be2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b8e:	6839      	ldr	r1, [r7, #0]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fa81 	bl	8004098 <TIM_SlaveTimer_SetConfig>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e018      	b.n	8003be2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bce:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a43      	ldr	r2, [pc, #268]	@ (8003d0c <TIM_Base_SetConfig+0x120>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d013      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d00f      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a40      	ldr	r2, [pc, #256]	@ (8003d10 <TIM_Base_SetConfig+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3f      	ldr	r2, [pc, #252]	@ (8003d14 <TIM_Base_SetConfig+0x128>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d18 <TIM_Base_SetConfig+0x12c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a3d      	ldr	r2, [pc, #244]	@ (8003d1c <TIM_Base_SetConfig+0x130>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d108      	bne.n	8003c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a32      	ldr	r2, [pc, #200]	@ (8003d0c <TIM_Base_SetConfig+0x120>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d02b      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4c:	d027      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2f      	ldr	r2, [pc, #188]	@ (8003d10 <TIM_Base_SetConfig+0x124>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d023      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2e      	ldr	r2, [pc, #184]	@ (8003d14 <TIM_Base_SetConfig+0x128>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01f      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2d      	ldr	r2, [pc, #180]	@ (8003d18 <TIM_Base_SetConfig+0x12c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01b      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <TIM_Base_SetConfig+0x130>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d017      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <TIM_Base_SetConfig+0x134>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <TIM_Base_SetConfig+0x138>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00f      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a29      	ldr	r2, [pc, #164]	@ (8003d28 <TIM_Base_SetConfig+0x13c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a28      	ldr	r2, [pc, #160]	@ (8003d2c <TIM_Base_SetConfig+0x140>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a27      	ldr	r2, [pc, #156]	@ (8003d30 <TIM_Base_SetConfig+0x144>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <TIM_Base_SetConfig+0x148>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8003d0c <TIM_Base_SetConfig+0x120>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_Base_SetConfig+0xf2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a10      	ldr	r2, [pc, #64]	@ (8003d1c <TIM_Base_SetConfig+0x130>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d103      	bne.n	8003ce6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f043 0204 	orr.w	r2, r3, #4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40010400 	.word	0x40010400
 8003d20:	40014000 	.word	0x40014000
 8003d24:	40014400 	.word	0x40014400
 8003d28:	40014800 	.word	0x40014800
 8003d2c:	40001800 	.word	0x40001800
 8003d30:	40001c00 	.word	0x40001c00
 8003d34:	40002000 	.word	0x40002000

08003d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f023 0201 	bic.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 0302 	bic.w	r3, r3, #2
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a20      	ldr	r2, [pc, #128]	@ (8003e10 <TIM_OC1_SetConfig+0xd8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC1_SetConfig+0x64>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a1f      	ldr	r2, [pc, #124]	@ (8003e14 <TIM_OC1_SetConfig+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10c      	bne.n	8003db6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0308 	bic.w	r3, r3, #8
 8003da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <TIM_OC1_SetConfig+0xd8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_OC1_SetConfig+0x8e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	@ (8003e14 <TIM_OC1_SetConfig+0xdc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d111      	bne.n	8003dea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010400 	.word	0x40010400

08003e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f023 0210 	bic.w	r2, r3, #16
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0320 	bic.w	r3, r3, #32
 8003e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a22      	ldr	r2, [pc, #136]	@ (8003efc <TIM_OC2_SetConfig+0xe4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_OC2_SetConfig+0x68>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a21      	ldr	r2, [pc, #132]	@ (8003f00 <TIM_OC2_SetConfig+0xe8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10d      	bne.n	8003e9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	@ (8003efc <TIM_OC2_SetConfig+0xe4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0x94>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <TIM_OC2_SetConfig+0xe8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d113      	bne.n	8003ed4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400

08003f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a21      	ldr	r2, [pc, #132]	@ (8003fe4 <TIM_OC3_SetConfig+0xe0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_OC3_SetConfig+0x66>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a20      	ldr	r2, [pc, #128]	@ (8003fe8 <TIM_OC3_SetConfig+0xe4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10d      	bne.n	8003f86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a16      	ldr	r2, [pc, #88]	@ (8003fe4 <TIM_OC3_SetConfig+0xe0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_OC3_SetConfig+0x92>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <TIM_OC3_SetConfig+0xe4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d113      	bne.n	8003fbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010400 	.word	0x40010400

08003fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a12      	ldr	r2, [pc, #72]	@ (8004090 <TIM_OC4_SetConfig+0xa4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_OC4_SetConfig+0x68>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <TIM_OC4_SetConfig+0xa8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d109      	bne.n	8004068 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800405a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40010400 	.word	0x40010400

08004098 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b70      	cmp	r3, #112	@ 0x70
 80040e0:	d01a      	beq.n	8004118 <TIM_SlaveTimer_SetConfig+0x80>
 80040e2:	2b70      	cmp	r3, #112	@ 0x70
 80040e4:	d860      	bhi.n	80041a8 <TIM_SlaveTimer_SetConfig+0x110>
 80040e6:	2b60      	cmp	r3, #96	@ 0x60
 80040e8:	d054      	beq.n	8004194 <TIM_SlaveTimer_SetConfig+0xfc>
 80040ea:	2b60      	cmp	r3, #96	@ 0x60
 80040ec:	d85c      	bhi.n	80041a8 <TIM_SlaveTimer_SetConfig+0x110>
 80040ee:	2b50      	cmp	r3, #80	@ 0x50
 80040f0:	d046      	beq.n	8004180 <TIM_SlaveTimer_SetConfig+0xe8>
 80040f2:	2b50      	cmp	r3, #80	@ 0x50
 80040f4:	d858      	bhi.n	80041a8 <TIM_SlaveTimer_SetConfig+0x110>
 80040f6:	2b40      	cmp	r3, #64	@ 0x40
 80040f8:	d019      	beq.n	800412e <TIM_SlaveTimer_SetConfig+0x96>
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	d854      	bhi.n	80041a8 <TIM_SlaveTimer_SetConfig+0x110>
 80040fe:	2b30      	cmp	r3, #48	@ 0x30
 8004100:	d055      	beq.n	80041ae <TIM_SlaveTimer_SetConfig+0x116>
 8004102:	2b30      	cmp	r3, #48	@ 0x30
 8004104:	d850      	bhi.n	80041a8 <TIM_SlaveTimer_SetConfig+0x110>
 8004106:	2b20      	cmp	r3, #32
 8004108:	d051      	beq.n	80041ae <TIM_SlaveTimer_SetConfig+0x116>
 800410a:	2b20      	cmp	r3, #32
 800410c:	d84c      	bhi.n	80041a8 <TIM_SlaveTimer_SetConfig+0x110>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04d      	beq.n	80041ae <TIM_SlaveTimer_SetConfig+0x116>
 8004112:	2b10      	cmp	r3, #16
 8004114:	d04b      	beq.n	80041ae <TIM_SlaveTimer_SetConfig+0x116>
 8004116:	e047      	b.n	80041a8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004128:	f000 f9ec 	bl	8004504 <TIM_ETR_SetConfig>
      break;
 800412c:	e040      	b.n	80041b0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d101      	bne.n	800413a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e03b      	b.n	80041b2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004160:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
      break;
 800417e:	e017      	b.n	80041b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418c:	461a      	mov	r2, r3
 800418e:	f000 f889 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      break;
 8004192:	e00d      	b.n	80041b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a0:	461a      	mov	r2, r3
 80041a2:	f000 f8eb 	bl	800437c <TIM_TI2_ConfigInputStage>
      break;
 80041a6:	e003      	b.n	80041b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	e000      	b.n	80041b0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80041ae:	bf00      	nop
  }

  return status;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 0201 	bic.w	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a28      	ldr	r2, [pc, #160]	@ (8004288 <TIM_TI1_SetConfig+0xcc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01b      	beq.n	8004222 <TIM_TI1_SetConfig+0x66>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f0:	d017      	beq.n	8004222 <TIM_TI1_SetConfig+0x66>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a25      	ldr	r2, [pc, #148]	@ (800428c <TIM_TI1_SetConfig+0xd0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_TI1_SetConfig+0x66>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a24      	ldr	r2, [pc, #144]	@ (8004290 <TIM_TI1_SetConfig+0xd4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_TI1_SetConfig+0x66>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a23      	ldr	r2, [pc, #140]	@ (8004294 <TIM_TI1_SetConfig+0xd8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_TI1_SetConfig+0x66>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a22      	ldr	r2, [pc, #136]	@ (8004298 <TIM_TI1_SetConfig+0xdc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_TI1_SetConfig+0x66>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a21      	ldr	r2, [pc, #132]	@ (800429c <TIM_TI1_SetConfig+0xe0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_TI1_SetConfig+0x66>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <TIM_TI1_SetConfig+0xe4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <TIM_TI1_SetConfig+0x6a>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <TIM_TI1_SetConfig+0x6c>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e003      	b.n	8004246 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800424c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	b2db      	uxtb	r3, r3
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f023 030a 	bic.w	r3, r3, #10
 8004260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 030a 	and.w	r3, r3, #10
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800
 8004294:	40000c00 	.word	0x40000c00
 8004298:	40010400 	.word	0x40010400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40001800 	.word	0x40001800

080042a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 030a 	bic.w	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0210 	bic.w	r2, r3, #16
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	b29b      	uxth	r3, r3
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004354:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0210 	bic.w	r2, r3, #16
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	031b      	lsls	r3, r3, #12
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f023 0303 	bic.w	r3, r3, #3
 8004408:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004418:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	b2db      	uxtb	r3, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800442c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004480:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004492:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	031b      	lsls	r3, r3, #12
 8004498:	b29b      	uxth	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80044a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	031b      	lsls	r3, r3, #12
 80044ac:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f043 0307 	orr.w	r3, r3, #7
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800451e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	431a      	orrs	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2201      	movs	r2, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	43db      	mvns	r3, r3
 8004566:	401a      	ands	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e05a      	b.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a21      	ldr	r2, [pc, #132]	@ (800466c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f4:	d01d      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1b      	ldr	r2, [pc, #108]	@ (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1a      	ldr	r2, [pc, #104]	@ (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a18      	ldr	r2, [pc, #96]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a17      	ldr	r2, [pc, #92]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a15      	ldr	r2, [pc, #84]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10c      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40010000 	.word	0x40010000
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40010400 	.word	0x40010400
 8004680:	40014000 	.word	0x40014000
 8004684:	40001800 	.word	0x40001800

08004688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e03d      	b.n	8004720 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e042      	b.n	80047c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fc0a 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2224      	movs	r2, #36	@ 0x24
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800476e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f973 	bl	8004a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	@ 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d175      	bne.n	80048d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Transmit+0x2c>
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e06e      	b.n	80048da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2221      	movs	r2, #33	@ 0x21
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480a:	f7fc fd09 	bl	8001220 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	88fa      	ldrh	r2, [r7, #6]
 800481a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004824:	d108      	bne.n	8004838 <HAL_UART_Transmit+0x6c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e003      	b.n	8004840 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004840:	e02e      	b.n	80048a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	@ 0x80
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f848 	bl	80048e2 <UART_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e03a      	b.n	80048da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004878:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3302      	adds	r3, #2
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	e007      	b.n	8004892 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	781a      	ldrb	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3301      	adds	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1cb      	bne.n	8004842 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	2140      	movs	r1, #64	@ 0x40
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f814 	bl	80048e2 <UART_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e000      	b.n	80048da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b086      	sub	sp, #24
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f2:	e03b      	b.n	800496c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d037      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fc:	f7fc fc90 	bl	8001220 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	6a3a      	ldr	r2, [r7, #32]
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <UART_WaitOnFlagUntilTimeout+0x30>
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e03a      	b.n	800498c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d023      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b80      	cmp	r3, #128	@ 0x80
 8004928:	d020      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x8a>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b40      	cmp	r3, #64	@ 0x40
 800492e:	d01d      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d116      	bne.n	800496c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f81d 	bl	8004994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2208      	movs	r2, #8
 800495e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e00f      	b.n	800498c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	429a      	cmp	r2, r3
 8004988:	d0b4      	beq.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b095      	sub	sp, #84	@ 0x54
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e5      	bne.n	80049d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d119      	bne.n	8004a40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f023 0310 	bic.w	r3, r3, #16
 8004a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a2c:	61ba      	str	r2, [r7, #24]
 8004a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6979      	ldr	r1, [r7, #20]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a4e:	bf00      	nop
 8004a50:	3754      	adds	r7, #84	@ 0x54
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a60:	b0c0      	sub	sp, #256	@ 0x100
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	68d9      	ldr	r1, [r3, #12]
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	ea40 0301 	orr.w	r3, r0, r1
 8004a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ab4:	f021 010c 	bic.w	r1, r1, #12
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad6:	6999      	ldr	r1, [r3, #24]
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	ea40 0301 	orr.w	r3, r0, r1
 8004ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b8f      	ldr	r3, [pc, #572]	@ (8004d28 <UART_SetConfig+0x2cc>)
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d005      	beq.n	8004afc <UART_SetConfig+0xa0>
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b8d      	ldr	r3, [pc, #564]	@ (8004d2c <UART_SetConfig+0x2d0>)
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d104      	bne.n	8004b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004afc:	f7fd ff62 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8004b00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b04:	e003      	b.n	8004b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b06:	f7fd ff49 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8004b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b18:	f040 810c 	bne.w	8004d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b2e:	4622      	mov	r2, r4
 8004b30:	462b      	mov	r3, r5
 8004b32:	1891      	adds	r1, r2, r2
 8004b34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b36:	415b      	adcs	r3, r3
 8004b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b3e:	4621      	mov	r1, r4
 8004b40:	eb12 0801 	adds.w	r8, r2, r1
 8004b44:	4629      	mov	r1, r5
 8004b46:	eb43 0901 	adc.w	r9, r3, r1
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b5e:	4690      	mov	r8, r2
 8004b60:	4699      	mov	r9, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	eb18 0303 	adds.w	r3, r8, r3
 8004b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b6c:	462b      	mov	r3, r5
 8004b6e:	eb49 0303 	adc.w	r3, r9, r3
 8004b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	18db      	adds	r3, r3, r3
 8004b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b90:	4613      	mov	r3, r2
 8004b92:	eb42 0303 	adc.w	r3, r2, r3
 8004b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ba0:	f7fb fb8e 	bl	80002c0 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4b61      	ldr	r3, [pc, #388]	@ (8004d30 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	011c      	lsls	r4, r3, #4
 8004bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	1891      	adds	r1, r2, r2
 8004bca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bcc:	415b      	adcs	r3, r3
 8004bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bda:	4649      	mov	r1, r9
 8004bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bf4:	4692      	mov	sl, r2
 8004bf6:	469b      	mov	fp, r3
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8004bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c02:	464b      	mov	r3, r9
 8004c04:	eb4b 0303 	adc.w	r3, fp, r3
 8004c08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c20:	460b      	mov	r3, r1
 8004c22:	18db      	adds	r3, r3, r3
 8004c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c26:	4613      	mov	r3, r2
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c36:	f7fb fb43 	bl	80002c0 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4b3b      	ldr	r3, [pc, #236]	@ (8004d30 <UART_SetConfig+0x2d4>)
 8004c42:	fba3 2301 	umull	r2, r3, r3, r1
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	2264      	movs	r2, #100	@ 0x64
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	1acb      	subs	r3, r1, r3
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c56:	4b36      	ldr	r3, [pc, #216]	@ (8004d30 <UART_SetConfig+0x2d4>)
 8004c58:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c64:	441c      	add	r4, r3
 8004c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	1891      	adds	r1, r2, r2
 8004c7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c80:	415b      	adcs	r3, r3
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c88:	4641      	mov	r1, r8
 8004c8a:	1851      	adds	r1, r2, r1
 8004c8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c8e:	4649      	mov	r1, r9
 8004c90:	414b      	adcs	r3, r1
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	00cb      	lsls	r3, r1, #3
 8004ca4:	4651      	mov	r1, sl
 8004ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004caa:	4651      	mov	r1, sl
 8004cac:	00ca      	lsls	r2, r1, #3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cbc:	464b      	mov	r3, r9
 8004cbe:	460a      	mov	r2, r1
 8004cc0:	eb42 0303 	adc.w	r3, r2, r3
 8004cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004cdc:	460b      	mov	r3, r1
 8004cde:	18db      	adds	r3, r3, r3
 8004ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	eb42 0303 	adc.w	r3, r2, r3
 8004ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004cf2:	f7fb fae5 	bl	80002c0 <__aeabi_uldivmod>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004d30 <UART_SetConfig+0x2d4>)
 8004cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	2164      	movs	r1, #100	@ 0x64
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	3332      	adds	r3, #50	@ 0x32
 8004d0e:	4a08      	ldr	r2, [pc, #32]	@ (8004d30 <UART_SetConfig+0x2d4>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	f003 0207 	and.w	r2, r3, #7
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4422      	add	r2, r4
 8004d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d24:	e106      	b.n	8004f34 <UART_SetConfig+0x4d8>
 8004d26:	bf00      	nop
 8004d28:	40011000 	.word	0x40011000
 8004d2c:	40011400 	.word	0x40011400
 8004d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d46:	4642      	mov	r2, r8
 8004d48:	464b      	mov	r3, r9
 8004d4a:	1891      	adds	r1, r2, r2
 8004d4c:	6239      	str	r1, [r7, #32]
 8004d4e:	415b      	adcs	r3, r3
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d56:	4641      	mov	r1, r8
 8004d58:	1854      	adds	r4, r2, r1
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	eb43 0501 	adc.w	r5, r3, r1
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	00eb      	lsls	r3, r5, #3
 8004d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d6e:	00e2      	lsls	r2, r4, #3
 8004d70:	4614      	mov	r4, r2
 8004d72:	461d      	mov	r5, r3
 8004d74:	4643      	mov	r3, r8
 8004d76:	18e3      	adds	r3, r4, r3
 8004d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	eb45 0303 	adc.w	r3, r5, r3
 8004d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004da2:	4629      	mov	r1, r5
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	4621      	mov	r1, r4
 8004da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dac:	4621      	mov	r1, r4
 8004dae:	008a      	lsls	r2, r1, #2
 8004db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004db4:	f7fb fa84 	bl	80002c0 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4b60      	ldr	r3, [pc, #384]	@ (8004f40 <UART_SetConfig+0x4e4>)
 8004dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	011c      	lsls	r4, r3, #4
 8004dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004dd8:	4642      	mov	r2, r8
 8004dda:	464b      	mov	r3, r9
 8004ddc:	1891      	adds	r1, r2, r2
 8004dde:	61b9      	str	r1, [r7, #24]
 8004de0:	415b      	adcs	r3, r3
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de8:	4641      	mov	r1, r8
 8004dea:	1851      	adds	r1, r2, r1
 8004dec:	6139      	str	r1, [r7, #16]
 8004dee:	4649      	mov	r1, r9
 8004df0:	414b      	adcs	r3, r1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e00:	4659      	mov	r1, fp
 8004e02:	00cb      	lsls	r3, r1, #3
 8004e04:	4651      	mov	r1, sl
 8004e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	00ca      	lsls	r2, r1, #3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	4642      	mov	r2, r8
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	460a      	mov	r2, r1
 8004e20:	eb42 0303 	adc.w	r3, r2, r3
 8004e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e40:	4649      	mov	r1, r9
 8004e42:	008b      	lsls	r3, r1, #2
 8004e44:	4641      	mov	r1, r8
 8004e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e4a:	4641      	mov	r1, r8
 8004e4c:	008a      	lsls	r2, r1, #2
 8004e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e52:	f7fb fa35 	bl	80002c0 <__aeabi_uldivmod>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4b38      	ldr	r3, [pc, #224]	@ (8004f40 <UART_SetConfig+0x4e4>)
 8004e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2264      	movs	r2, #100	@ 0x64
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	1acb      	subs	r3, r1, r3
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	3332      	adds	r3, #50	@ 0x32
 8004e70:	4a33      	ldr	r2, [pc, #204]	@ (8004f40 <UART_SetConfig+0x4e4>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e7c:	441c      	add	r4, r3
 8004e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e82:	2200      	movs	r2, #0
 8004e84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e86:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	1891      	adds	r1, r2, r2
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	415b      	adcs	r3, r3
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	1851      	adds	r1, r2, r1
 8004ea0:	6039      	str	r1, [r7, #0]
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	414b      	adcs	r3, r1
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004eb4:	4659      	mov	r1, fp
 8004eb6:	00cb      	lsls	r3, r1, #3
 8004eb8:	4651      	mov	r1, sl
 8004eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ebe:	4651      	mov	r1, sl
 8004ec0:	00ca      	lsls	r2, r1, #3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4642      	mov	r2, r8
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ece:	464b      	mov	r3, r9
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	eb42 0303 	adc.w	r3, r2, r3
 8004ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ee2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	008b      	lsls	r3, r1, #2
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efa:	4641      	mov	r1, r8
 8004efc:	008a      	lsls	r2, r1, #2
 8004efe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f02:	f7fb f9dd 	bl	80002c0 <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <UART_SetConfig+0x4e4>)
 8004f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	2164      	movs	r1, #100	@ 0x64
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	3332      	adds	r3, #50	@ 0x32
 8004f1e:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <UART_SetConfig+0x4e4>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	f003 020f 	and.w	r2, r3, #15
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4422      	add	r2, r4
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f40:	51eb851f 	.word	0x51eb851f

08004f44 <sniprintf>:
 8004f44:	b40c      	push	{r2, r3}
 8004f46:	b530      	push	{r4, r5, lr}
 8004f48:	4b17      	ldr	r3, [pc, #92]	@ (8004fa8 <sniprintf+0x64>)
 8004f4a:	1e0c      	subs	r4, r1, #0
 8004f4c:	681d      	ldr	r5, [r3, #0]
 8004f4e:	b09d      	sub	sp, #116	@ 0x74
 8004f50:	da08      	bge.n	8004f64 <sniprintf+0x20>
 8004f52:	238b      	movs	r3, #139	@ 0x8b
 8004f54:	602b      	str	r3, [r5, #0]
 8004f56:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5a:	b01d      	add	sp, #116	@ 0x74
 8004f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f60:	b002      	add	sp, #8
 8004f62:	4770      	bx	lr
 8004f64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004f68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f6c:	bf14      	ite	ne
 8004f6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f72:	4623      	moveq	r3, r4
 8004f74:	9304      	str	r3, [sp, #16]
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f7c:	9002      	str	r0, [sp, #8]
 8004f7e:	9006      	str	r0, [sp, #24]
 8004f80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f86:	ab21      	add	r3, sp, #132	@ 0x84
 8004f88:	a902      	add	r1, sp, #8
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	f000 f995 	bl	80052bc <_svfiprintf_r>
 8004f92:	1c43      	adds	r3, r0, #1
 8004f94:	bfbc      	itt	lt
 8004f96:	238b      	movlt	r3, #139	@ 0x8b
 8004f98:	602b      	strlt	r3, [r5, #0]
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	d0dd      	beq.n	8004f5a <sniprintf+0x16>
 8004f9e:	9b02      	ldr	r3, [sp, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e7d9      	b.n	8004f5a <sniprintf+0x16>
 8004fa6:	bf00      	nop
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <memset>:
 8004fac:	4402      	add	r2, r0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <memset+0xa>
 8004fb4:	4770      	bx	lr
 8004fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fba:	e7f9      	b.n	8004fb0 <memset+0x4>

08004fbc <__errno>:
 8004fbc:	4b01      	ldr	r3, [pc, #4]	@ (8004fc4 <__errno+0x8>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	2000000c 	.word	0x2000000c

08004fc8 <__libc_init_array>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	4d0d      	ldr	r5, [pc, #52]	@ (8005000 <__libc_init_array+0x38>)
 8004fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8005004 <__libc_init_array+0x3c>)
 8004fce:	1b64      	subs	r4, r4, r5
 8004fd0:	10a4      	asrs	r4, r4, #2
 8004fd2:	2600      	movs	r6, #0
 8004fd4:	42a6      	cmp	r6, r4
 8004fd6:	d109      	bne.n	8004fec <__libc_init_array+0x24>
 8004fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8005008 <__libc_init_array+0x40>)
 8004fda:	4c0c      	ldr	r4, [pc, #48]	@ (800500c <__libc_init_array+0x44>)
 8004fdc:	f000 fc66 	bl	80058ac <_init>
 8004fe0:	1b64      	subs	r4, r4, r5
 8004fe2:	10a4      	asrs	r4, r4, #2
 8004fe4:	2600      	movs	r6, #0
 8004fe6:	42a6      	cmp	r6, r4
 8004fe8:	d105      	bne.n	8004ff6 <__libc_init_array+0x2e>
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff0:	4798      	blx	r3
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7ee      	b.n	8004fd4 <__libc_init_array+0xc>
 8004ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffa:	4798      	blx	r3
 8004ffc:	3601      	adds	r6, #1
 8004ffe:	e7f2      	b.n	8004fe6 <__libc_init_array+0x1e>
 8005000:	080059c4 	.word	0x080059c4
 8005004:	080059c4 	.word	0x080059c4
 8005008:	080059c4 	.word	0x080059c4
 800500c:	080059c8 	.word	0x080059c8

08005010 <__retarget_lock_acquire_recursive>:
 8005010:	4770      	bx	lr

08005012 <__retarget_lock_release_recursive>:
 8005012:	4770      	bx	lr

08005014 <_free_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	2900      	cmp	r1, #0
 800501a:	d041      	beq.n	80050a0 <_free_r+0x8c>
 800501c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005020:	1f0c      	subs	r4, r1, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfb8      	it	lt
 8005026:	18e4      	addlt	r4, r4, r3
 8005028:	f000 f8e0 	bl	80051ec <__malloc_lock>
 800502c:	4a1d      	ldr	r2, [pc, #116]	@ (80050a4 <_free_r+0x90>)
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	b933      	cbnz	r3, 8005040 <_free_r+0x2c>
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	6014      	str	r4, [r2, #0]
 8005036:	4628      	mov	r0, r5
 8005038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800503c:	f000 b8dc 	b.w	80051f8 <__malloc_unlock>
 8005040:	42a3      	cmp	r3, r4
 8005042:	d908      	bls.n	8005056 <_free_r+0x42>
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	1821      	adds	r1, r4, r0
 8005048:	428b      	cmp	r3, r1
 800504a:	bf01      	itttt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	1809      	addeq	r1, r1, r0
 8005052:	6021      	streq	r1, [r4, #0]
 8005054:	e7ed      	b.n	8005032 <_free_r+0x1e>
 8005056:	461a      	mov	r2, r3
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	b10b      	cbz	r3, 8005060 <_free_r+0x4c>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d9fa      	bls.n	8005056 <_free_r+0x42>
 8005060:	6811      	ldr	r1, [r2, #0]
 8005062:	1850      	adds	r0, r2, r1
 8005064:	42a0      	cmp	r0, r4
 8005066:	d10b      	bne.n	8005080 <_free_r+0x6c>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	4401      	add	r1, r0
 800506c:	1850      	adds	r0, r2, r1
 800506e:	4283      	cmp	r3, r0
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	d1e0      	bne.n	8005036 <_free_r+0x22>
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	6053      	str	r3, [r2, #4]
 800507a:	4408      	add	r0, r1
 800507c:	6010      	str	r0, [r2, #0]
 800507e:	e7da      	b.n	8005036 <_free_r+0x22>
 8005080:	d902      	bls.n	8005088 <_free_r+0x74>
 8005082:	230c      	movs	r3, #12
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	e7d6      	b.n	8005036 <_free_r+0x22>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	1821      	adds	r1, r4, r0
 800508c:	428b      	cmp	r3, r1
 800508e:	bf04      	itt	eq
 8005090:	6819      	ldreq	r1, [r3, #0]
 8005092:	685b      	ldreq	r3, [r3, #4]
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	bf04      	itt	eq
 8005098:	1809      	addeq	r1, r1, r0
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	6054      	str	r4, [r2, #4]
 800509e:	e7ca      	b.n	8005036 <_free_r+0x22>
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	bf00      	nop
 80050a4:	20003258 	.word	0x20003258

080050a8 <sbrk_aligned>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4e0f      	ldr	r6, [pc, #60]	@ (80050e8 <sbrk_aligned+0x40>)
 80050ac:	460c      	mov	r4, r1
 80050ae:	6831      	ldr	r1, [r6, #0]
 80050b0:	4605      	mov	r5, r0
 80050b2:	b911      	cbnz	r1, 80050ba <sbrk_aligned+0x12>
 80050b4:	f000 fba6 	bl	8005804 <_sbrk_r>
 80050b8:	6030      	str	r0, [r6, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 fba1 	bl	8005804 <_sbrk_r>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d103      	bne.n	80050ce <sbrk_aligned+0x26>
 80050c6:	f04f 34ff 	mov.w	r4, #4294967295
 80050ca:	4620      	mov	r0, r4
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
 80050ce:	1cc4      	adds	r4, r0, #3
 80050d0:	f024 0403 	bic.w	r4, r4, #3
 80050d4:	42a0      	cmp	r0, r4
 80050d6:	d0f8      	beq.n	80050ca <sbrk_aligned+0x22>
 80050d8:	1a21      	subs	r1, r4, r0
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 fb92 	bl	8005804 <_sbrk_r>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d1f2      	bne.n	80050ca <sbrk_aligned+0x22>
 80050e4:	e7ef      	b.n	80050c6 <sbrk_aligned+0x1e>
 80050e6:	bf00      	nop
 80050e8:	20003254 	.word	0x20003254

080050ec <_malloc_r>:
 80050ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f0:	1ccd      	adds	r5, r1, #3
 80050f2:	f025 0503 	bic.w	r5, r5, #3
 80050f6:	3508      	adds	r5, #8
 80050f8:	2d0c      	cmp	r5, #12
 80050fa:	bf38      	it	cc
 80050fc:	250c      	movcc	r5, #12
 80050fe:	2d00      	cmp	r5, #0
 8005100:	4606      	mov	r6, r0
 8005102:	db01      	blt.n	8005108 <_malloc_r+0x1c>
 8005104:	42a9      	cmp	r1, r5
 8005106:	d904      	bls.n	8005112 <_malloc_r+0x26>
 8005108:	230c      	movs	r3, #12
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	2000      	movs	r0, #0
 800510e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051e8 <_malloc_r+0xfc>
 8005116:	f000 f869 	bl	80051ec <__malloc_lock>
 800511a:	f8d8 3000 	ldr.w	r3, [r8]
 800511e:	461c      	mov	r4, r3
 8005120:	bb44      	cbnz	r4, 8005174 <_malloc_r+0x88>
 8005122:	4629      	mov	r1, r5
 8005124:	4630      	mov	r0, r6
 8005126:	f7ff ffbf 	bl	80050a8 <sbrk_aligned>
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	4604      	mov	r4, r0
 800512e:	d158      	bne.n	80051e2 <_malloc_r+0xf6>
 8005130:	f8d8 4000 	ldr.w	r4, [r8]
 8005134:	4627      	mov	r7, r4
 8005136:	2f00      	cmp	r7, #0
 8005138:	d143      	bne.n	80051c2 <_malloc_r+0xd6>
 800513a:	2c00      	cmp	r4, #0
 800513c:	d04b      	beq.n	80051d6 <_malloc_r+0xea>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	4639      	mov	r1, r7
 8005142:	4630      	mov	r0, r6
 8005144:	eb04 0903 	add.w	r9, r4, r3
 8005148:	f000 fb5c 	bl	8005804 <_sbrk_r>
 800514c:	4581      	cmp	r9, r0
 800514e:	d142      	bne.n	80051d6 <_malloc_r+0xea>
 8005150:	6821      	ldr	r1, [r4, #0]
 8005152:	1a6d      	subs	r5, r5, r1
 8005154:	4629      	mov	r1, r5
 8005156:	4630      	mov	r0, r6
 8005158:	f7ff ffa6 	bl	80050a8 <sbrk_aligned>
 800515c:	3001      	adds	r0, #1
 800515e:	d03a      	beq.n	80051d6 <_malloc_r+0xea>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	442b      	add	r3, r5
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	f8d8 3000 	ldr.w	r3, [r8]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	bb62      	cbnz	r2, 80051c8 <_malloc_r+0xdc>
 800516e:	f8c8 7000 	str.w	r7, [r8]
 8005172:	e00f      	b.n	8005194 <_malloc_r+0xa8>
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	1b52      	subs	r2, r2, r5
 8005178:	d420      	bmi.n	80051bc <_malloc_r+0xd0>
 800517a:	2a0b      	cmp	r2, #11
 800517c:	d917      	bls.n	80051ae <_malloc_r+0xc2>
 800517e:	1961      	adds	r1, r4, r5
 8005180:	42a3      	cmp	r3, r4
 8005182:	6025      	str	r5, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	6059      	strne	r1, [r3, #4]
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	bf08      	it	eq
 800518c:	f8c8 1000 	streq.w	r1, [r8]
 8005190:	5162      	str	r2, [r4, r5]
 8005192:	604b      	str	r3, [r1, #4]
 8005194:	4630      	mov	r0, r6
 8005196:	f000 f82f 	bl	80051f8 <__malloc_unlock>
 800519a:	f104 000b 	add.w	r0, r4, #11
 800519e:	1d23      	adds	r3, r4, #4
 80051a0:	f020 0007 	bic.w	r0, r0, #7
 80051a4:	1ac2      	subs	r2, r0, r3
 80051a6:	bf1c      	itt	ne
 80051a8:	1a1b      	subne	r3, r3, r0
 80051aa:	50a3      	strne	r3, [r4, r2]
 80051ac:	e7af      	b.n	800510e <_malloc_r+0x22>
 80051ae:	6862      	ldr	r2, [r4, #4]
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	bf0c      	ite	eq
 80051b4:	f8c8 2000 	streq.w	r2, [r8]
 80051b8:	605a      	strne	r2, [r3, #4]
 80051ba:	e7eb      	b.n	8005194 <_malloc_r+0xa8>
 80051bc:	4623      	mov	r3, r4
 80051be:	6864      	ldr	r4, [r4, #4]
 80051c0:	e7ae      	b.n	8005120 <_malloc_r+0x34>
 80051c2:	463c      	mov	r4, r7
 80051c4:	687f      	ldr	r7, [r7, #4]
 80051c6:	e7b6      	b.n	8005136 <_malloc_r+0x4a>
 80051c8:	461a      	mov	r2, r3
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d1fb      	bne.n	80051c8 <_malloc_r+0xdc>
 80051d0:	2300      	movs	r3, #0
 80051d2:	6053      	str	r3, [r2, #4]
 80051d4:	e7de      	b.n	8005194 <_malloc_r+0xa8>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	4630      	mov	r0, r6
 80051dc:	f000 f80c 	bl	80051f8 <__malloc_unlock>
 80051e0:	e794      	b.n	800510c <_malloc_r+0x20>
 80051e2:	6005      	str	r5, [r0, #0]
 80051e4:	e7d6      	b.n	8005194 <_malloc_r+0xa8>
 80051e6:	bf00      	nop
 80051e8:	20003258 	.word	0x20003258

080051ec <__malloc_lock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	@ (80051f4 <__malloc_lock+0x8>)
 80051ee:	f7ff bf0f 	b.w	8005010 <__retarget_lock_acquire_recursive>
 80051f2:	bf00      	nop
 80051f4:	20003250 	.word	0x20003250

080051f8 <__malloc_unlock>:
 80051f8:	4801      	ldr	r0, [pc, #4]	@ (8005200 <__malloc_unlock+0x8>)
 80051fa:	f7ff bf0a 	b.w	8005012 <__retarget_lock_release_recursive>
 80051fe:	bf00      	nop
 8005200:	20003250 	.word	0x20003250

08005204 <__ssputs_r>:
 8005204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	688e      	ldr	r6, [r1, #8]
 800520a:	461f      	mov	r7, r3
 800520c:	42be      	cmp	r6, r7
 800520e:	680b      	ldr	r3, [r1, #0]
 8005210:	4682      	mov	sl, r0
 8005212:	460c      	mov	r4, r1
 8005214:	4690      	mov	r8, r2
 8005216:	d82d      	bhi.n	8005274 <__ssputs_r+0x70>
 8005218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800521c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005220:	d026      	beq.n	8005270 <__ssputs_r+0x6c>
 8005222:	6965      	ldr	r5, [r4, #20]
 8005224:	6909      	ldr	r1, [r1, #16]
 8005226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800522a:	eba3 0901 	sub.w	r9, r3, r1
 800522e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005232:	1c7b      	adds	r3, r7, #1
 8005234:	444b      	add	r3, r9
 8005236:	106d      	asrs	r5, r5, #1
 8005238:	429d      	cmp	r5, r3
 800523a:	bf38      	it	cc
 800523c:	461d      	movcc	r5, r3
 800523e:	0553      	lsls	r3, r2, #21
 8005240:	d527      	bpl.n	8005292 <__ssputs_r+0x8e>
 8005242:	4629      	mov	r1, r5
 8005244:	f7ff ff52 	bl	80050ec <_malloc_r>
 8005248:	4606      	mov	r6, r0
 800524a:	b360      	cbz	r0, 80052a6 <__ssputs_r+0xa2>
 800524c:	6921      	ldr	r1, [r4, #16]
 800524e:	464a      	mov	r2, r9
 8005250:	f000 fae8 	bl	8005824 <memcpy>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800525a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	6126      	str	r6, [r4, #16]
 8005262:	6165      	str	r5, [r4, #20]
 8005264:	444e      	add	r6, r9
 8005266:	eba5 0509 	sub.w	r5, r5, r9
 800526a:	6026      	str	r6, [r4, #0]
 800526c:	60a5      	str	r5, [r4, #8]
 800526e:	463e      	mov	r6, r7
 8005270:	42be      	cmp	r6, r7
 8005272:	d900      	bls.n	8005276 <__ssputs_r+0x72>
 8005274:	463e      	mov	r6, r7
 8005276:	6820      	ldr	r0, [r4, #0]
 8005278:	4632      	mov	r2, r6
 800527a:	4641      	mov	r1, r8
 800527c:	f000 faa8 	bl	80057d0 <memmove>
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	1b9b      	subs	r3, r3, r6
 8005284:	60a3      	str	r3, [r4, #8]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	4433      	add	r3, r6
 800528a:	6023      	str	r3, [r4, #0]
 800528c:	2000      	movs	r0, #0
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	462a      	mov	r2, r5
 8005294:	f000 fad4 	bl	8005840 <_realloc_r>
 8005298:	4606      	mov	r6, r0
 800529a:	2800      	cmp	r0, #0
 800529c:	d1e0      	bne.n	8005260 <__ssputs_r+0x5c>
 800529e:	6921      	ldr	r1, [r4, #16]
 80052a0:	4650      	mov	r0, sl
 80052a2:	f7ff feb7 	bl	8005014 <_free_r>
 80052a6:	230c      	movs	r3, #12
 80052a8:	f8ca 3000 	str.w	r3, [sl]
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	e7e9      	b.n	800528e <__ssputs_r+0x8a>
	...

080052bc <_svfiprintf_r>:
 80052bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c0:	4698      	mov	r8, r3
 80052c2:	898b      	ldrh	r3, [r1, #12]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	b09d      	sub	sp, #116	@ 0x74
 80052c8:	4607      	mov	r7, r0
 80052ca:	460d      	mov	r5, r1
 80052cc:	4614      	mov	r4, r2
 80052ce:	d510      	bpl.n	80052f2 <_svfiprintf_r+0x36>
 80052d0:	690b      	ldr	r3, [r1, #16]
 80052d2:	b973      	cbnz	r3, 80052f2 <_svfiprintf_r+0x36>
 80052d4:	2140      	movs	r1, #64	@ 0x40
 80052d6:	f7ff ff09 	bl	80050ec <_malloc_r>
 80052da:	6028      	str	r0, [r5, #0]
 80052dc:	6128      	str	r0, [r5, #16]
 80052de:	b930      	cbnz	r0, 80052ee <_svfiprintf_r+0x32>
 80052e0:	230c      	movs	r3, #12
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	b01d      	add	sp, #116	@ 0x74
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	2340      	movs	r3, #64	@ 0x40
 80052f0:	616b      	str	r3, [r5, #20]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052f6:	2320      	movs	r3, #32
 80052f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005300:	2330      	movs	r3, #48	@ 0x30
 8005302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054a0 <_svfiprintf_r+0x1e4>
 8005306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800530a:	f04f 0901 	mov.w	r9, #1
 800530e:	4623      	mov	r3, r4
 8005310:	469a      	mov	sl, r3
 8005312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005316:	b10a      	cbz	r2, 800531c <_svfiprintf_r+0x60>
 8005318:	2a25      	cmp	r2, #37	@ 0x25
 800531a:	d1f9      	bne.n	8005310 <_svfiprintf_r+0x54>
 800531c:	ebba 0b04 	subs.w	fp, sl, r4
 8005320:	d00b      	beq.n	800533a <_svfiprintf_r+0x7e>
 8005322:	465b      	mov	r3, fp
 8005324:	4622      	mov	r2, r4
 8005326:	4629      	mov	r1, r5
 8005328:	4638      	mov	r0, r7
 800532a:	f7ff ff6b 	bl	8005204 <__ssputs_r>
 800532e:	3001      	adds	r0, #1
 8005330:	f000 80a7 	beq.w	8005482 <_svfiprintf_r+0x1c6>
 8005334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005336:	445a      	add	r2, fp
 8005338:	9209      	str	r2, [sp, #36]	@ 0x24
 800533a:	f89a 3000 	ldrb.w	r3, [sl]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 809f 	beq.w	8005482 <_svfiprintf_r+0x1c6>
 8005344:	2300      	movs	r3, #0
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800534e:	f10a 0a01 	add.w	sl, sl, #1
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	9307      	str	r3, [sp, #28]
 8005356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800535a:	931a      	str	r3, [sp, #104]	@ 0x68
 800535c:	4654      	mov	r4, sl
 800535e:	2205      	movs	r2, #5
 8005360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005364:	484e      	ldr	r0, [pc, #312]	@ (80054a0 <_svfiprintf_r+0x1e4>)
 8005366:	f7fa ff5b 	bl	8000220 <memchr>
 800536a:	9a04      	ldr	r2, [sp, #16]
 800536c:	b9d8      	cbnz	r0, 80053a6 <_svfiprintf_r+0xea>
 800536e:	06d0      	lsls	r0, r2, #27
 8005370:	bf44      	itt	mi
 8005372:	2320      	movmi	r3, #32
 8005374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005378:	0711      	lsls	r1, r2, #28
 800537a:	bf44      	itt	mi
 800537c:	232b      	movmi	r3, #43	@ 0x2b
 800537e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005382:	f89a 3000 	ldrb.w	r3, [sl]
 8005386:	2b2a      	cmp	r3, #42	@ 0x2a
 8005388:	d015      	beq.n	80053b6 <_svfiprintf_r+0xfa>
 800538a:	9a07      	ldr	r2, [sp, #28]
 800538c:	4654      	mov	r4, sl
 800538e:	2000      	movs	r0, #0
 8005390:	f04f 0c0a 	mov.w	ip, #10
 8005394:	4621      	mov	r1, r4
 8005396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800539a:	3b30      	subs	r3, #48	@ 0x30
 800539c:	2b09      	cmp	r3, #9
 800539e:	d94b      	bls.n	8005438 <_svfiprintf_r+0x17c>
 80053a0:	b1b0      	cbz	r0, 80053d0 <_svfiprintf_r+0x114>
 80053a2:	9207      	str	r2, [sp, #28]
 80053a4:	e014      	b.n	80053d0 <_svfiprintf_r+0x114>
 80053a6:	eba0 0308 	sub.w	r3, r0, r8
 80053aa:	fa09 f303 	lsl.w	r3, r9, r3
 80053ae:	4313      	orrs	r3, r2
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	46a2      	mov	sl, r4
 80053b4:	e7d2      	b.n	800535c <_svfiprintf_r+0xa0>
 80053b6:	9b03      	ldr	r3, [sp, #12]
 80053b8:	1d19      	adds	r1, r3, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	9103      	str	r1, [sp, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bfbb      	ittet	lt
 80053c2:	425b      	neglt	r3, r3
 80053c4:	f042 0202 	orrlt.w	r2, r2, #2
 80053c8:	9307      	strge	r3, [sp, #28]
 80053ca:	9307      	strlt	r3, [sp, #28]
 80053cc:	bfb8      	it	lt
 80053ce:	9204      	strlt	r2, [sp, #16]
 80053d0:	7823      	ldrb	r3, [r4, #0]
 80053d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80053d4:	d10a      	bne.n	80053ec <_svfiprintf_r+0x130>
 80053d6:	7863      	ldrb	r3, [r4, #1]
 80053d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053da:	d132      	bne.n	8005442 <_svfiprintf_r+0x186>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	1d1a      	adds	r2, r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	9203      	str	r2, [sp, #12]
 80053e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053e8:	3402      	adds	r4, #2
 80053ea:	9305      	str	r3, [sp, #20]
 80053ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054b0 <_svfiprintf_r+0x1f4>
 80053f0:	7821      	ldrb	r1, [r4, #0]
 80053f2:	2203      	movs	r2, #3
 80053f4:	4650      	mov	r0, sl
 80053f6:	f7fa ff13 	bl	8000220 <memchr>
 80053fa:	b138      	cbz	r0, 800540c <_svfiprintf_r+0x150>
 80053fc:	9b04      	ldr	r3, [sp, #16]
 80053fe:	eba0 000a 	sub.w	r0, r0, sl
 8005402:	2240      	movs	r2, #64	@ 0x40
 8005404:	4082      	lsls	r2, r0
 8005406:	4313      	orrs	r3, r2
 8005408:	3401      	adds	r4, #1
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005410:	4824      	ldr	r0, [pc, #144]	@ (80054a4 <_svfiprintf_r+0x1e8>)
 8005412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005416:	2206      	movs	r2, #6
 8005418:	f7fa ff02 	bl	8000220 <memchr>
 800541c:	2800      	cmp	r0, #0
 800541e:	d036      	beq.n	800548e <_svfiprintf_r+0x1d2>
 8005420:	4b21      	ldr	r3, [pc, #132]	@ (80054a8 <_svfiprintf_r+0x1ec>)
 8005422:	bb1b      	cbnz	r3, 800546c <_svfiprintf_r+0x1b0>
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	3307      	adds	r3, #7
 8005428:	f023 0307 	bic.w	r3, r3, #7
 800542c:	3308      	adds	r3, #8
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005432:	4433      	add	r3, r6
 8005434:	9309      	str	r3, [sp, #36]	@ 0x24
 8005436:	e76a      	b.n	800530e <_svfiprintf_r+0x52>
 8005438:	fb0c 3202 	mla	r2, ip, r2, r3
 800543c:	460c      	mov	r4, r1
 800543e:	2001      	movs	r0, #1
 8005440:	e7a8      	b.n	8005394 <_svfiprintf_r+0xd8>
 8005442:	2300      	movs	r3, #0
 8005444:	3401      	adds	r4, #1
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	4619      	mov	r1, r3
 800544a:	f04f 0c0a 	mov.w	ip, #10
 800544e:	4620      	mov	r0, r4
 8005450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005454:	3a30      	subs	r2, #48	@ 0x30
 8005456:	2a09      	cmp	r2, #9
 8005458:	d903      	bls.n	8005462 <_svfiprintf_r+0x1a6>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0c6      	beq.n	80053ec <_svfiprintf_r+0x130>
 800545e:	9105      	str	r1, [sp, #20]
 8005460:	e7c4      	b.n	80053ec <_svfiprintf_r+0x130>
 8005462:	fb0c 2101 	mla	r1, ip, r1, r2
 8005466:	4604      	mov	r4, r0
 8005468:	2301      	movs	r3, #1
 800546a:	e7f0      	b.n	800544e <_svfiprintf_r+0x192>
 800546c:	ab03      	add	r3, sp, #12
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	462a      	mov	r2, r5
 8005472:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <_svfiprintf_r+0x1f0>)
 8005474:	a904      	add	r1, sp, #16
 8005476:	4638      	mov	r0, r7
 8005478:	f3af 8000 	nop.w
 800547c:	1c42      	adds	r2, r0, #1
 800547e:	4606      	mov	r6, r0
 8005480:	d1d6      	bne.n	8005430 <_svfiprintf_r+0x174>
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	065b      	lsls	r3, r3, #25
 8005486:	f53f af2d 	bmi.w	80052e4 <_svfiprintf_r+0x28>
 800548a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800548c:	e72c      	b.n	80052e8 <_svfiprintf_r+0x2c>
 800548e:	ab03      	add	r3, sp, #12
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	462a      	mov	r2, r5
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <_svfiprintf_r+0x1f0>)
 8005496:	a904      	add	r1, sp, #16
 8005498:	4638      	mov	r0, r7
 800549a:	f000 f879 	bl	8005590 <_printf_i>
 800549e:	e7ed      	b.n	800547c <_svfiprintf_r+0x1c0>
 80054a0:	08005988 	.word	0x08005988
 80054a4:	08005992 	.word	0x08005992
 80054a8:	00000000 	.word	0x00000000
 80054ac:	08005205 	.word	0x08005205
 80054b0:	0800598e 	.word	0x0800598e

080054b4 <_printf_common>:
 80054b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b8:	4616      	mov	r6, r2
 80054ba:	4698      	mov	r8, r3
 80054bc:	688a      	ldr	r2, [r1, #8]
 80054be:	690b      	ldr	r3, [r1, #16]
 80054c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	bfb8      	it	lt
 80054c8:	4613      	movlt	r3, r2
 80054ca:	6033      	str	r3, [r6, #0]
 80054cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054d0:	4607      	mov	r7, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	b10a      	cbz	r2, 80054da <_printf_common+0x26>
 80054d6:	3301      	adds	r3, #1
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	0699      	lsls	r1, r3, #26
 80054de:	bf42      	ittt	mi
 80054e0:	6833      	ldrmi	r3, [r6, #0]
 80054e2:	3302      	addmi	r3, #2
 80054e4:	6033      	strmi	r3, [r6, #0]
 80054e6:	6825      	ldr	r5, [r4, #0]
 80054e8:	f015 0506 	ands.w	r5, r5, #6
 80054ec:	d106      	bne.n	80054fc <_printf_common+0x48>
 80054ee:	f104 0a19 	add.w	sl, r4, #25
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	6832      	ldr	r2, [r6, #0]
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dc26      	bgt.n	800554a <_printf_common+0x96>
 80054fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	3b00      	subs	r3, #0
 8005504:	bf18      	it	ne
 8005506:	2301      	movne	r3, #1
 8005508:	0692      	lsls	r2, r2, #26
 800550a:	d42b      	bmi.n	8005564 <_printf_common+0xb0>
 800550c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005510:	4641      	mov	r1, r8
 8005512:	4638      	mov	r0, r7
 8005514:	47c8      	blx	r9
 8005516:	3001      	adds	r0, #1
 8005518:	d01e      	beq.n	8005558 <_printf_common+0xa4>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	6922      	ldr	r2, [r4, #16]
 800551e:	f003 0306 	and.w	r3, r3, #6
 8005522:	2b04      	cmp	r3, #4
 8005524:	bf02      	ittt	eq
 8005526:	68e5      	ldreq	r5, [r4, #12]
 8005528:	6833      	ldreq	r3, [r6, #0]
 800552a:	1aed      	subeq	r5, r5, r3
 800552c:	68a3      	ldr	r3, [r4, #8]
 800552e:	bf0c      	ite	eq
 8005530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005534:	2500      	movne	r5, #0
 8005536:	4293      	cmp	r3, r2
 8005538:	bfc4      	itt	gt
 800553a:	1a9b      	subgt	r3, r3, r2
 800553c:	18ed      	addgt	r5, r5, r3
 800553e:	2600      	movs	r6, #0
 8005540:	341a      	adds	r4, #26
 8005542:	42b5      	cmp	r5, r6
 8005544:	d11a      	bne.n	800557c <_printf_common+0xc8>
 8005546:	2000      	movs	r0, #0
 8005548:	e008      	b.n	800555c <_printf_common+0xa8>
 800554a:	2301      	movs	r3, #1
 800554c:	4652      	mov	r2, sl
 800554e:	4641      	mov	r1, r8
 8005550:	4638      	mov	r0, r7
 8005552:	47c8      	blx	r9
 8005554:	3001      	adds	r0, #1
 8005556:	d103      	bne.n	8005560 <_printf_common+0xac>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005560:	3501      	adds	r5, #1
 8005562:	e7c6      	b.n	80054f2 <_printf_common+0x3e>
 8005564:	18e1      	adds	r1, r4, r3
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	2030      	movs	r0, #48	@ 0x30
 800556a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800556e:	4422      	add	r2, r4
 8005570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005578:	3302      	adds	r3, #2
 800557a:	e7c7      	b.n	800550c <_printf_common+0x58>
 800557c:	2301      	movs	r3, #1
 800557e:	4622      	mov	r2, r4
 8005580:	4641      	mov	r1, r8
 8005582:	4638      	mov	r0, r7
 8005584:	47c8      	blx	r9
 8005586:	3001      	adds	r0, #1
 8005588:	d0e6      	beq.n	8005558 <_printf_common+0xa4>
 800558a:	3601      	adds	r6, #1
 800558c:	e7d9      	b.n	8005542 <_printf_common+0x8e>
	...

08005590 <_printf_i>:
 8005590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	7e0f      	ldrb	r7, [r1, #24]
 8005596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005598:	2f78      	cmp	r7, #120	@ 0x78
 800559a:	4691      	mov	r9, r2
 800559c:	4680      	mov	r8, r0
 800559e:	460c      	mov	r4, r1
 80055a0:	469a      	mov	sl, r3
 80055a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055a6:	d807      	bhi.n	80055b8 <_printf_i+0x28>
 80055a8:	2f62      	cmp	r7, #98	@ 0x62
 80055aa:	d80a      	bhi.n	80055c2 <_printf_i+0x32>
 80055ac:	2f00      	cmp	r7, #0
 80055ae:	f000 80d2 	beq.w	8005756 <_printf_i+0x1c6>
 80055b2:	2f58      	cmp	r7, #88	@ 0x58
 80055b4:	f000 80b9 	beq.w	800572a <_printf_i+0x19a>
 80055b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055c0:	e03a      	b.n	8005638 <_printf_i+0xa8>
 80055c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055c6:	2b15      	cmp	r3, #21
 80055c8:	d8f6      	bhi.n	80055b8 <_printf_i+0x28>
 80055ca:	a101      	add	r1, pc, #4	@ (adr r1, 80055d0 <_printf_i+0x40>)
 80055cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d0:	08005629 	.word	0x08005629
 80055d4:	0800563d 	.word	0x0800563d
 80055d8:	080055b9 	.word	0x080055b9
 80055dc:	080055b9 	.word	0x080055b9
 80055e0:	080055b9 	.word	0x080055b9
 80055e4:	080055b9 	.word	0x080055b9
 80055e8:	0800563d 	.word	0x0800563d
 80055ec:	080055b9 	.word	0x080055b9
 80055f0:	080055b9 	.word	0x080055b9
 80055f4:	080055b9 	.word	0x080055b9
 80055f8:	080055b9 	.word	0x080055b9
 80055fc:	0800573d 	.word	0x0800573d
 8005600:	08005667 	.word	0x08005667
 8005604:	080056f7 	.word	0x080056f7
 8005608:	080055b9 	.word	0x080055b9
 800560c:	080055b9 	.word	0x080055b9
 8005610:	0800575f 	.word	0x0800575f
 8005614:	080055b9 	.word	0x080055b9
 8005618:	08005667 	.word	0x08005667
 800561c:	080055b9 	.word	0x080055b9
 8005620:	080055b9 	.word	0x080055b9
 8005624:	080056ff 	.word	0x080056ff
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	1d1a      	adds	r2, r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6032      	str	r2, [r6, #0]
 8005630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005638:	2301      	movs	r3, #1
 800563a:	e09d      	b.n	8005778 <_printf_i+0x1e8>
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	1d19      	adds	r1, r3, #4
 8005642:	6031      	str	r1, [r6, #0]
 8005644:	0606      	lsls	r6, r0, #24
 8005646:	d501      	bpl.n	800564c <_printf_i+0xbc>
 8005648:	681d      	ldr	r5, [r3, #0]
 800564a:	e003      	b.n	8005654 <_printf_i+0xc4>
 800564c:	0645      	lsls	r5, r0, #25
 800564e:	d5fb      	bpl.n	8005648 <_printf_i+0xb8>
 8005650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005654:	2d00      	cmp	r5, #0
 8005656:	da03      	bge.n	8005660 <_printf_i+0xd0>
 8005658:	232d      	movs	r3, #45	@ 0x2d
 800565a:	426d      	negs	r5, r5
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005660:	4859      	ldr	r0, [pc, #356]	@ (80057c8 <_printf_i+0x238>)
 8005662:	230a      	movs	r3, #10
 8005664:	e011      	b.n	800568a <_printf_i+0xfa>
 8005666:	6821      	ldr	r1, [r4, #0]
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	0608      	lsls	r0, r1, #24
 800566c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005670:	d402      	bmi.n	8005678 <_printf_i+0xe8>
 8005672:	0649      	lsls	r1, r1, #25
 8005674:	bf48      	it	mi
 8005676:	b2ad      	uxthmi	r5, r5
 8005678:	2f6f      	cmp	r7, #111	@ 0x6f
 800567a:	4853      	ldr	r0, [pc, #332]	@ (80057c8 <_printf_i+0x238>)
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	bf14      	ite	ne
 8005680:	230a      	movne	r3, #10
 8005682:	2308      	moveq	r3, #8
 8005684:	2100      	movs	r1, #0
 8005686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800568a:	6866      	ldr	r6, [r4, #4]
 800568c:	60a6      	str	r6, [r4, #8]
 800568e:	2e00      	cmp	r6, #0
 8005690:	bfa2      	ittt	ge
 8005692:	6821      	ldrge	r1, [r4, #0]
 8005694:	f021 0104 	bicge.w	r1, r1, #4
 8005698:	6021      	strge	r1, [r4, #0]
 800569a:	b90d      	cbnz	r5, 80056a0 <_printf_i+0x110>
 800569c:	2e00      	cmp	r6, #0
 800569e:	d04b      	beq.n	8005738 <_printf_i+0x1a8>
 80056a0:	4616      	mov	r6, r2
 80056a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80056a6:	fb03 5711 	mls	r7, r3, r1, r5
 80056aa:	5dc7      	ldrb	r7, [r0, r7]
 80056ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b0:	462f      	mov	r7, r5
 80056b2:	42bb      	cmp	r3, r7
 80056b4:	460d      	mov	r5, r1
 80056b6:	d9f4      	bls.n	80056a2 <_printf_i+0x112>
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d10b      	bne.n	80056d4 <_printf_i+0x144>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07df      	lsls	r7, r3, #31
 80056c0:	d508      	bpl.n	80056d4 <_printf_i+0x144>
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	6861      	ldr	r1, [r4, #4]
 80056c6:	4299      	cmp	r1, r3
 80056c8:	bfde      	ittt	le
 80056ca:	2330      	movle	r3, #48	@ 0x30
 80056cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056d4:	1b92      	subs	r2, r2, r6
 80056d6:	6122      	str	r2, [r4, #16]
 80056d8:	f8cd a000 	str.w	sl, [sp]
 80056dc:	464b      	mov	r3, r9
 80056de:	aa03      	add	r2, sp, #12
 80056e0:	4621      	mov	r1, r4
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff fee6 	bl	80054b4 <_printf_common>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d14a      	bne.n	8005782 <_printf_i+0x1f2>
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	b004      	add	sp, #16
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f043 0320 	orr.w	r3, r3, #32
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	4833      	ldr	r0, [pc, #204]	@ (80057cc <_printf_i+0x23c>)
 8005700:	2778      	movs	r7, #120	@ 0x78
 8005702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	6831      	ldr	r1, [r6, #0]
 800570a:	061f      	lsls	r7, r3, #24
 800570c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005710:	d402      	bmi.n	8005718 <_printf_i+0x188>
 8005712:	065f      	lsls	r7, r3, #25
 8005714:	bf48      	it	mi
 8005716:	b2ad      	uxthmi	r5, r5
 8005718:	6031      	str	r1, [r6, #0]
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	bf44      	itt	mi
 800571e:	f043 0320 	orrmi.w	r3, r3, #32
 8005722:	6023      	strmi	r3, [r4, #0]
 8005724:	b11d      	cbz	r5, 800572e <_printf_i+0x19e>
 8005726:	2310      	movs	r3, #16
 8005728:	e7ac      	b.n	8005684 <_printf_i+0xf4>
 800572a:	4827      	ldr	r0, [pc, #156]	@ (80057c8 <_printf_i+0x238>)
 800572c:	e7e9      	b.n	8005702 <_printf_i+0x172>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	f023 0320 	bic.w	r3, r3, #32
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	e7f6      	b.n	8005726 <_printf_i+0x196>
 8005738:	4616      	mov	r6, r2
 800573a:	e7bd      	b.n	80056b8 <_printf_i+0x128>
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	6961      	ldr	r1, [r4, #20]
 8005742:	1d18      	adds	r0, r3, #4
 8005744:	6030      	str	r0, [r6, #0]
 8005746:	062e      	lsls	r6, r5, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1c0>
 800574c:	6019      	str	r1, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1c6>
 8005750:	0668      	lsls	r0, r5, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1bc>
 8005754:	8019      	strh	r1, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4616      	mov	r6, r2
 800575c:	e7bc      	b.n	80056d8 <_printf_i+0x148>
 800575e:	6833      	ldr	r3, [r6, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	6032      	str	r2, [r6, #0]
 8005764:	681e      	ldr	r6, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4630      	mov	r0, r6
 800576c:	f7fa fd58 	bl	8000220 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1e6>
 8005772:	1b80      	subs	r0, r0, r6
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005780:	e7aa      	b.n	80056d8 <_printf_i+0x148>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	4632      	mov	r2, r6
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ad      	beq.n	80056ec <_printf_i+0x15c>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x22e>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a6      	b.n	80056f0 <_printf_i+0x160>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09d      	beq.n	80056ec <_printf_i+0x15c>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x212>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x206>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x222>
 80057c6:	bf00      	nop
 80057c8:	08005999 	.word	0x08005999
 80057cc:	080059aa 	.word	0x080059aa

080057d0 <memmove>:
 80057d0:	4288      	cmp	r0, r1
 80057d2:	b510      	push	{r4, lr}
 80057d4:	eb01 0402 	add.w	r4, r1, r2
 80057d8:	d902      	bls.n	80057e0 <memmove+0x10>
 80057da:	4284      	cmp	r4, r0
 80057dc:	4623      	mov	r3, r4
 80057de:	d807      	bhi.n	80057f0 <memmove+0x20>
 80057e0:	1e43      	subs	r3, r0, #1
 80057e2:	42a1      	cmp	r1, r4
 80057e4:	d008      	beq.n	80057f8 <memmove+0x28>
 80057e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ee:	e7f8      	b.n	80057e2 <memmove+0x12>
 80057f0:	4402      	add	r2, r0
 80057f2:	4601      	mov	r1, r0
 80057f4:	428a      	cmp	r2, r1
 80057f6:	d100      	bne.n	80057fa <memmove+0x2a>
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005802:	e7f7      	b.n	80057f4 <memmove+0x24>

08005804 <_sbrk_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d06      	ldr	r5, [pc, #24]	@ (8005820 <_sbrk_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f7fb fc2e 	bl	8001070 <_sbrk>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_sbrk_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_sbrk_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	2000324c 	.word	0x2000324c

08005824 <memcpy>:
 8005824:	440a      	add	r2, r1
 8005826:	4291      	cmp	r1, r2
 8005828:	f100 33ff 	add.w	r3, r0, #4294967295
 800582c:	d100      	bne.n	8005830 <memcpy+0xc>
 800582e:	4770      	bx	lr
 8005830:	b510      	push	{r4, lr}
 8005832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583a:	4291      	cmp	r1, r2
 800583c:	d1f9      	bne.n	8005832 <memcpy+0xe>
 800583e:	bd10      	pop	{r4, pc}

08005840 <_realloc_r>:
 8005840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005844:	4680      	mov	r8, r0
 8005846:	4615      	mov	r5, r2
 8005848:	460c      	mov	r4, r1
 800584a:	b921      	cbnz	r1, 8005856 <_realloc_r+0x16>
 800584c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	4611      	mov	r1, r2
 8005852:	f7ff bc4b 	b.w	80050ec <_malloc_r>
 8005856:	b92a      	cbnz	r2, 8005864 <_realloc_r+0x24>
 8005858:	f7ff fbdc 	bl	8005014 <_free_r>
 800585c:	2400      	movs	r4, #0
 800585e:	4620      	mov	r0, r4
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005864:	f000 f81a 	bl	800589c <_malloc_usable_size_r>
 8005868:	4285      	cmp	r5, r0
 800586a:	4606      	mov	r6, r0
 800586c:	d802      	bhi.n	8005874 <_realloc_r+0x34>
 800586e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005872:	d8f4      	bhi.n	800585e <_realloc_r+0x1e>
 8005874:	4629      	mov	r1, r5
 8005876:	4640      	mov	r0, r8
 8005878:	f7ff fc38 	bl	80050ec <_malloc_r>
 800587c:	4607      	mov	r7, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	d0ec      	beq.n	800585c <_realloc_r+0x1c>
 8005882:	42b5      	cmp	r5, r6
 8005884:	462a      	mov	r2, r5
 8005886:	4621      	mov	r1, r4
 8005888:	bf28      	it	cs
 800588a:	4632      	movcs	r2, r6
 800588c:	f7ff ffca 	bl	8005824 <memcpy>
 8005890:	4621      	mov	r1, r4
 8005892:	4640      	mov	r0, r8
 8005894:	f7ff fbbe 	bl	8005014 <_free_r>
 8005898:	463c      	mov	r4, r7
 800589a:	e7e0      	b.n	800585e <_realloc_r+0x1e>

0800589c <_malloc_usable_size_r>:
 800589c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a0:	1f18      	subs	r0, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bfbc      	itt	lt
 80058a6:	580b      	ldrlt	r3, [r1, r0]
 80058a8:	18c0      	addlt	r0, r0, r3
 80058aa:	4770      	bx	lr

080058ac <_init>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr

080058b8 <_fini>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr
